[2025-04-03 01:02:15] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.68.136", "body": "[NO BODY]"}
[2025-04-03 01:02:15] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 01:02:15] | DEBUG | No token found, serving login page
[2025-04-03 01:02:15] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 01:02:15] | DEBUG | Response: {"status": 200, "duration_ms": "39.14", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 01:02:45] | DEBUG | Request: {"method": "GET", "url": "/wp-content/plugins/wpcargo/includes/2vAtzICX4ITuM3rd64XT9KWAzFL.php?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "clubmadeira.uk", "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/126.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "165.22.85.161", "body": "[NO BODY]"}
[2025-04-03 01:02:45] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 01:02:45] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:02:45] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:02:49] | DEBUG | Request: {"method": "GET", "url": "/wp-content/plugins/wpcargo/includes/barcode.php?text=x1x1111x1xx1xx111xx11111xx1x111x1x1x1xxx11x1111xx1x11xxxx1xx1xxxxx1x1x1xx1x1x11xx1xxxx1x11xx111xxx1xx1xx1x1x1xxx11x1111xxx1xxx1xx1x111xxx1x1xx1xxx1x1x1xx1x1x11xxx11xx1x11xx111xx1xxx1xx11x1x11x11x1111x1x11111x1x1xxxx&sizefactor=.090909090909&size=1&filepath=2vAtzICX4ITuM3rd64XT9KWAzFL.php", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "clubmadeira.uk", "User-Agent": "Mozilla/5.0 (Windows; U; Windows NT 6.0; en-US; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729)", "Content-Length": "0"}, "ip": "165.22.85.161", "body": "[NO BODY]"}
[2025-04-03 01:02:49] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 01:02:49] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:02:49] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:03:03] | DEBUG | Request: {"method": "POST", "url": "/wp-content/plugins/wpcargo/includes/2vAtzICX4ITuM3rd64XT9KWAzFL.php?1=var_dump", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "clubmadeira.uk", "User-Agent": "Mozilla/5.0 (Ubuntu; Linux i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/118.0.0.0 Safari/537.36", "Content-Length": "34", "Content-Type": "application/x-www-form-urlencoded"}, "ip": "165.22.85.161", "body": {"2": "c8c605999f3d8352d7bb792cf3fdb25b"}}
[2025-04-03 01:03:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 01:03:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "15.51", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:03:03] | DEBUG | Response: {"status": 404, "duration_ms": "15.51", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:03:20] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "keep-alive", "Accept": "*/*", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.84 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Content-Length": "0"}, "ip": "66.249.68.134", "body": "[NO BODY]"}
[2025-04-03 01:03:20] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 01:03:20] | DEBUG | No token found, serving login page
[2025-04-03 01:03:20] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 01:03:20] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 01:03:21] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "keep-alive", "Accept": "*/*", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Content-Length": "0"}, "ip": "66.249.68.134", "body": "[NO BODY]"}
[2025-04-03 01:03:21] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 01:03:21] | DEBUG | No token found, serving login page
[2025-04-03 01:03:21] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 01:03:21] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 01:03:24] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "keep-alive", "Accept": "*/*", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Content-Length": "0"}, "ip": "66.249.68.134", "body": "[NO BODY]"}
[2025-04-03 01:03:24] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 01:03:24] | DEBUG | No token found, serving login page
[2025-04-03 01:03:24] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 01:03:24] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 01:03:28] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "keep-alive", "Accept": "*/*", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Googlebot-Image/1.0", "Content-Length": "0"}, "ip": "66.249.68.134", "body": "[NO BODY]"}
[2025-04-03 01:03:28] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 01:03:28] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:03:28] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:12:46] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Cache-Control": "max-age=0", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9", "Accept-Encoding": "gzip, deflate, br", "Accept-Language": "en-GB,en-US;q=0.9,en;q=0.8", "Host": "clubmadeira.uk", "User-Agent": "Mozilla/5.0 (Linux; Android 12; Pixel 6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Mobile Safari/537.36", "Sec-Ch-Ua": "\"Not_A Brand\";v=\"99\", \"Google Chrome\";v=\"114\", \"Chromium\";v=\"114\"", "Sec-Ch-Ua-Platform": "Android", "Sec-Ch-Ua-Mobile": "?1", "Sec-Fetch-Dest": "document", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-Site": "none", "Sec-Fetch-User": "?1", "Upgrade-Insecure-Requests": "1", "Content-Length": "0"}, "ip": "35.84.21.121", "body": "[NO BODY]"}
[2025-04-03 01:12:46] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 01:12:46] | DEBUG | No token found, serving login page
[2025-04-03 01:12:46] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 01:12:46] | DEBUG | Response: {"status": 200, "duration_ms": "60.98", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 01:34:51] | DEBUG | Request: {"method": "GET", "url": "/actuator/gateway/routes?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228:443", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36", "Content-Length": "0"}, "ip": "92.255.57.58", "body": "[NO BODY]"}
[2025-04-03 01:34:51] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 01:34:51] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:34:51] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:52:32] | DEBUG | Request: {"method": "GET", "url": "/RDWeb/Pages/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip, deflate", "Host": "217.154.57.228", "User-Agent": "Python/3.11 aiohttp/3.11.11", "Content-Length": "0"}, "ip": "80.94.95.90", "body": "[NO BODY]"}
[2025-04-03 01:52:32] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 01:52:32] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 01:52:32] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 02:09:32] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Cache-Control": "no-cache", "Pragma": "no-cache", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", "Accept-Encoding": "gzip, deflate", "Accept-Language": "en-US,en;q=0.9", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible)", "Content-Length": "0"}, "ip": "167.99.112.39", "body": "[NO BODY]"}
[2025-04-03 02:09:32] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 02:09:32] | DEBUG | No token found, serving login page
[2025-04-03 02:09:32] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 02:09:32] | DEBUG | Response: {"status": 200, "duration_ms": "46.81", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 02:24:42] | DEBUG | Request: {"method": "GET", "url": "/.env?", "headers": {"Connection": "close", "Accept-Charset": "utf-8", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; it; rv:1.9.2.3) Gecko/20100406 Firefox/3.6.3 (Swiftfox)", "Content-Length": "0"}, "ip": "196.251.70.24", "body": "[NO BODY]"}
[2025-04-03 02:24:42] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 02:24:42] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 02:24:42] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 02:27:09] | DEBUG | Request: {"method": "GET", "url": "/.env?", "headers": {"Connection": "close", "Accept-Charset": "utf-8", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.9.0.11) Gecko/2009060309 Ubuntu/9.10 (karmic) Firefox/3.0.11", "Content-Length": "0"}, "ip": "196.251.70.24", "body": "[NO BODY]"}
[2025-04-03 02:27:09] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 02:27:09] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 02:27:09] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:01:10] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Host": "217.154.57.228:443", "Content-Length": "0"}, "ip": "167.94.145.96", "body": "[NO BODY]"}
[2025-04-03 03:01:10] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 03:01:10] | DEBUG | No token found, serving login page
[2025-04-03 03:01:10] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 03:01:10] | DEBUG | Response: {"status": 200, "duration_ms": "15.72", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 03:01:15] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "167.94.145.96", "body": "[NO BODY]"}
[2025-04-03 03:01:15] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 03:01:15] | DEBUG | No token found, serving login page
[2025-04-03 03:01:15] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 03:01:15] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 03:01:15] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "167.94.145.96", "body": "[NO BODY]"}
[2025-04-03 03:01:15] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:01:15] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:01:15] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:01:27] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "167.94.145.96", "body": "[NO BODY]"}
[2025-04-03 03:01:27] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:01:27] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:01:27] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:05:11] | DEBUG | Request: {"method": "GET", "url": "/signup?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.68.135", "body": "[NO BODY]"}
[2025-04-03 03:05:11] | DEBUG | Request: {"method": "GET", "url": "/signup?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.68.135", "body": "[NO BODY]"}
[2025-04-03 03:05:11] | INFO | Signup page rendered successfully
[2025-04-03 03:05:11] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="/static/signup.css"> <!-- Link to combined styles with pulse -->
    <!-- Favicon: Font Awesome "group-arrows-rotate" SVG (Unicode f366) -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
</head>
<body>
    <div class="signup-container">
        <h1>Sign Up - I am a...</h1>
        <form id="signupForm" autocomplete="off">
            <!-- Dummy fields to trick autofill -->
            <input type="text" class="hidden" autocomplete="off">
            <input type="text" class="hidden" autocomplete="off">
            <div class="options">
                <label class="option">
                    <input type="radio" name="signup_type" value="community" checked>
                    <img src="/static/img/community.jpg" alt="Scout leader in uniform, neck down">
                    <span>Community Group</span>
                </label>
                <label class="option">
                    <input type="radio" name="signup_type" value="seller">
                    <img src="/static/img/merchant.jpg" alt="White man in business suit, neck down">
                    <span>Merchant</span>
                </label>
                <label class="option">
                    <input type="radio" name="signup_type" value="wixpro">
                    <img src="/static/img/wixpro.jpg" alt="Female ethnic web designer in casual dress, neck down">
                    <span>Partner</span>
                </label>
            </div>
            <div class="form-section">
                <div class="form-group">
                    <label for="contact_name">Contact Name:</label>
                    <div class="input-container">
                        <input type="text" id="contact_name" name="contact_name" required autocomplete="off">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-phone">Phone Number:</label>
                    <div class="input-container">
                        <input type="tel" id="signup-phone" name="signup_phone" autocomplete="off" pattern="[0-9]{10}" title="Please enter a 10-digit phone number">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-email">Email:</label>
                    <div class="input-container">
                        <input type="text" id="signup-email" name="signup_email" required autocomplete="off">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-password">Password:</label>
                    <div class="input-container">
                        <input type="text" id="signup-password" name="signup_password" required autocomplete="new-password">
                        <i class="fas fa-eye toggle-password" data-target="signup-password"></i>
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-confirm-password">Confirm Password:</label>
                    <div class="input-container">
                        <input type="password" id="signup-confirm-password" name="signup_confirm_password" required autocomplete="new-password">
                        <i class="fas fa-eye toggle-password" data-target="signup-confirm-password"></i>
                    </div>
                </div>
                <button type="submit">Sign Me Up</button>
            </div>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Set correct input types and clear fields after load
        window.onload = function() {
            const emailInput = document.getElementById('signup-email');
            const passwordInput = document.getElementById('signup-password');
            const confirmPasswordInput = document.getElementById('signup-confirm-password');
            const phoneInput = document.getElementById('signup-phone');

            // Set proper types
            emailInput.type = 'email';
            passwordInput.type = 'password';

            // Double-clear strategy
            setTimeout(function() {
                emailInput.value = '';
                passwordInput.value = '';
                confirmPasswordInput.value = '';
                phoneInput.value = '';
            }, 100);

            setTimeout(function() {
                emailInput.value = '';
                passwordInput.value = '';
                confirmPasswordInput.value = '';
                phoneInput.value = '';
            }, 500); // Extra delay for Chrome

            // Set "Community Group" as selected by default
            const communityOption = document.querySelector('input[value="community"]').closest('.option');
            communityOption.classList.add('selected');
        };

        // Clear fields on focus
        document.getElementById('signup-email').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-password').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-confirm-password').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-phone').addEventListener('focus', function() {
            this.value = '';
        });

        // Highlight selected option
        document.querySelectorAll('input[name="signup_type"]').forEach(function(radio) {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.option').forEach(function(option) {
                    option.classList.remove('selected');
                });
                if (this.checked) {
                    this.closest('.option').classList.add('selected');
                }
            });
        });

        // Dynamically set 'required' attribute for phone number based on signup type
        document.querySelectorAll('input[name="signup_type"]').forEach(function(radio) {
            radio.addEventListener('change', function() {
                const phoneInput = document.getElementById('signup-phone');
                if (this.value === 'wixpro') {
                    phoneInput.removeAttribute('required');
                } else {
                    phoneInput.setAttribute('required', '');
                }
            });

            // Set initial phone requirement based on default selection
            const phoneInput = document.getElementById('signup-phone');
            if (radio.value === 'community' && radio.checked) {
                phoneInput.setAttribute('required', '');
            }
        });

        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(function(icon) {
            icon.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                if (input.type === 'password') {
                    input.type = 'text';
                    this.classList.remove('fa-eye');
                    this.classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                    this.classList.remove('fa-eye-slash');
                    this.classList.add('fa-eye');
                }
            });
        });

        // Form submission with OTP workflow
        $('#signupForm').on('submit', async function(e) {
            e.preventDefault();

            const signupType = $('input[name="signup_type"]:checked').val();
            if (!signupType) {
                toastr.error('Please select a signup type.');
                return;
            }

            const contactName = $('#contact_name').val().trim();
            const phone = $('#signup-phone').val().trim();
            const email = $('#signup-email').val().trim();
            const password = $('#signup-password').val().trim();
            const confirmPassword = $('#signup-confirm-password').val().trim();

            // Validation: Check all required fields, password match, and phone validity
            if (!contactName || !email || !password || !confirmPassword) {
                toastr.error('All fields except phone (for Partner) must be filled.');
                return;
            }

            if (password !== confirmPassword) {
                toastr.error('Passwords do not match.');
                return;
            }

            const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/;
            if (!passwordRegex.test(password)) {
                toastr.error('Password must be 8+ characters with letters and numbers.');
                return;
            }

            if (signupType !== 'wixpro') {
                if (!phone) {
                    toastr.error('Phone number is required for Community Group and Merchant.');
                    return;
                }
                const phoneRegex = /^\d{10}$/;
                if (!phoneRegex.test(phone)) {
                    toastr.error('Enter a valid 10-digit phone number (e.g., 1234567890).');
                    return;
                }
            }

            const signupData = { 
                signup_type: signupType, 
                contact_name: contactName, 
                signup_phone: phone || null, 
                signup_email: email, 
                signup_password: password 
            };

            try {
                // Step 1: Create user with /signup
                const signupResponse = await fetch('/signup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(signupData)
                });
                const signupDataResp = await signupResponse.json();
                if (!signupResponse.ok) throw new Error(signupDataResp.message || 'Signup failed');

                if (signupType === 'wixpro') {
                    // Partner: Direct to login
                    toastr.success('Signup successful! Redirecting to login...');
                    setTimeout(() => window.location.href = '/login', 2000);
                } else {
                    // Merchant/Community: Send OTP with /reset-password
                    const otpResponse = await fetch('/reset-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const otpData = await otpResponse.json();
                    if (!otpResponse.ok) throw new Error(otpData.message || 'Failed to send OTP');

                    toastr.success('OTP sent to your phone. Please enter it below.');
                    const otpContainer = document.createElement('div');
                    otpContainer.innerHTML = `
                        <div class="form-group">
                            <label for="signupOtp">Enter OTP:</label>
                            <input type="text" id="signupOtp" name="otp" placeholder="Enter OTP" required>
                        </div>
                        <button id="verifyOtpBtn">Verify OTP</button>
                    `;
                    this.appendChild(otpContainer);
                    this.querySelector('.form-section').style.display = 'none';

                    document.getElementById('verifyOtpBtn').addEventListener('click', async () => {
                        const otp = document.getElementById('signupOtp').value.trim();
                        if (!otp) {
                            toastr.error('Please enter the OTP.');
                            return;
                        }

                        // Step 2: Verify OTP with /verify-reset-code
                        const verifyResponse = await fetch('/verify-reset-code', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email, code: otp, new_password: password })
                        });
                        const verifyData = await verifyResponse.json();
                        if (!verifyResponse.ok) throw new Error(verifyData.message || 'OTP verification failed');

                        // Step 3: Redirect to group page based on signup_type
                        toastr.success('Signup verified! Redirecting to your page...');
                        const redirectPath = signupType === 'seller' ? '/merchant' : '/community';
                        setTimeout(() => window.location.href = redirectPath, 2000);
                    });
                }
            } catch (error) {
                toastr.error(error.message || 'Error during signup/OTP process');
            }
        });

        // Toastr options
        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: 'toast-top-right',
            timeOut: 5000
        };
    </script>
</body>
</html>
[2025-04-03 03:05:11] | DEBUG | Response: {"status": 200, "duration_ms": "11.40", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sign Up</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <link rel=\"stylesheet\" href=\"/static/signup.css\"> <!-- Link to combined styles with pulse -->\n    <!-- Favicon: Font Awesome \"group-arrows-rotate\" SVG (Unicode f366) -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 4..."}
[2025-04-03 03:31:26] | DEBUG | Request: {"method": "GET", "url": "/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "BlackBerry8300/4.2.2 Profile/MIDP-2.0 Configuration/CLDC-1.1 VendorID/107 UP.Link/6.2.3.15.0", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:26] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:26] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:26] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:27] | DEBUG | Request: {"method": "GET", "url": "/credentials.cfg?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.84 Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:27] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:27] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "16.17", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:27] | DEBUG | Response: {"status": 404, "duration_ms": "16.17", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:28] | DEBUG | Request: {"method": "GET", "url": "/credentials.hjson?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_3) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/64.0.3282.168 Safari/537.36 OPR/51.0.2830.40", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:28] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:28] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:28] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:29] | DEBUG | Request: {"method": "GET", "url": "/credentials.xml?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; U; Android 2.3.6; en-ph; GT-S5300 Build/GINGERBREAD) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:29] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:29] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:29] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:30] | DEBUG | Request: {"method": "GET", "url": "/info?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Android 4.4.2; Tablet; rv:58.0) Gecko/58.0 Firefox/58.0", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:30] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:30] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:30] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:32] | DEBUG | Request: {"method": "GET", "url": "/info/phpinfo?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; SAMSUNG SM-G532G Build/MMB29T) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/4.2 Chrome/44.0.2403.133 Mobile Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:32] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:32] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:32] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:32] | DEBUG | Request: {"method": "GET", "url": "/info/phpinfo.php?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Opera/9.21 (Windows 98; U; en)", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:32] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:32] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:32] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:33] | DEBUG | Request: {"method": "GET", "url": "/php-info?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; U; Android 4.3; en-us; SAMSUNG-SGH-I747 Build/JSS15J) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:33] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:33] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:33] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:35] | DEBUG | Request: {"method": "GET", "url": "/php/phpinfo.php?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:35] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:35] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "4.53", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:35] | DEBUG | Response: {"status": 404, "duration_ms": "4.53", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:36] | DEBUG | Request: {"method": "GET", "url": "/phpinfo.html?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Mobile; LYF/F50Y/LYF-F50Y-000-01-31-131017; rv:48.0) Gecko/48.0 Firefox/48.0 KAIOS/2.0", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:36] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:36] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:36] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:37] | DEBUG | Request: {"method": "GET", "url": "/phpinfo/php-details.php?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Win32)", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:37] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:37] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:37] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:37] | DEBUG | Request: {"method": "GET", "url": "/phpinfo/phpinfo.php?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.21 Safari/537.36 MMS/1.0.2459.0", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:37] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:37] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:37] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:38] | DEBUG | Request: {"method": "GET", "url": "/phpinformation?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.7.8) Gecko/20050523 Firefox/1.0.4", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:38] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:38] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:38] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:39] | DEBUG | Request: {"method": "GET", "url": "/phptest.php?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.59 Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:39] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:39] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:39] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:40] | DEBUG | Request: {"method": "GET", "url": "/secret?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/44.0.2403.89 Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:40] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:40] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:40] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:41] | DEBUG | Request: {"method": "GET", "url": "/secret.txt?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; InfoPath.2)", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:41] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:41] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:41] | DEBUG | Response: {"status": 404, "duration_ms": "1.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:42] | DEBUG | Request: {"method": "GET", "url": "/secret_keys?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.1) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.57 Safari/536.11", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:42] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:42] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:42] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:43] | DEBUG | Request: {"method": "GET", "url": "/secrets.cson?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 5.1.1; Nexus 7 Build/LMY47V) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.78 Safari/537.36 OPR/30.0.1856.93524", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:43] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:43] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:43] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:45] | DEBUG | Request: {"method": "GET", "url": "/secrets.hjson?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; U; Android 2.3.5; en-us; SCH-R680 Build/GINGERBREAD) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1 USCC-R680", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:45] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:45] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:45] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:45] | DEBUG | Request: {"method": "GET", "url": "/secrets.json?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; HO32600; HO32600R; rv:11.0) like Gecko", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:45] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:45] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:45] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:47] | DEBUG | Request: {"method": "GET", "url": "/secrets.kdbx?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; hu; rv:1.8b4) Gecko/20050827 Firefox/1.0+", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:47] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:47] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:47] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:52] | DEBUG | Request: {"method": "GET", "url": "/secrets.pgp?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:52] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:52] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:52] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:53] | DEBUG | Request: {"method": "GET", "url": "/secrets.xml?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:53] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:53] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:53] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:54] | DEBUG | Request: {"method": "GET", "url": "/secrets.yaml?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; U; SunOS i86pc; en-US; rv:1.8.1) Gecko/20061211 Firefox/2.0", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:54] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:54] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:54] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:55] | DEBUG | Request: {"method": "GET", "url": "/server/phpinfo.php?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10) AppleWebKit/600.1.22 (KHTML, like Gecko) Version/8.0 Safari/600.1.22", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:57] | DEBUG | Request: {"method": "GET", "url": "/services/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 4.4.2; en-us; SAMSUNG-SGH-I337Z Build/KOT49H) AppleWebKit/537.36 (KHTML, like Gecko) Version/1.5 Chrome/28.0.1500.94 Mobile Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.207", "body": "[NO BODY]"}
[2025-04-03 03:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 03:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 03:34:31] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36", "Content-Length": "0"}, "ip": "185.242.226.14", "body": "[NO BODY]"}
[2025-04-03 03:34:31] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 03:34:31] | DEBUG | No token found, serving login page
[2025-04-03 03:34:31] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 03:34:31] | DEBUG | Response: {"status": 200, "duration_ms": "31.23", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 04:07:25] | DEBUG | Request: {"method": "POST", "url": "/FD873AC4-CF86-4FED-84EC-4BD59C6F17A7?", "headers": {"Cache-Control": "no-cache", "Connection": "Keep-Alive", "Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)", "Content-Length": "40"}, "ip": "185.100.87.136", "body": "[NO BODY]"}
[2025-04-03 04:07:25] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 04:07:25] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:07:25] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:18:14] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) Chrome/126.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "3.134.112.171", "body": "[NO BODY]"}
[2025-04-03 04:18:14] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 04:18:14] | DEBUG | No token found, serving login page
[2025-04-03 04:18:14] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 04:18:14] | DEBUG | Response: {"status": 200, "duration_ms": "46.84", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 04:28:50] | DEBUG | Request: {"method": "GET", "url": "/.env?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/108.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "139.59.187.7", "body": "[NO BODY]"}
[2025-04-03 04:28:50] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 04:28:50] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:28:50] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:29:19] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "65.49.1.221", "body": "[NO BODY]"}
[2025-04-03 04:29:19] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 04:29:19] | DEBUG | No token found, serving login page
[2025-04-03 04:29:19] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 04:29:19] | DEBUG | Response: {"status": 200, "duration_ms": "46.85", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 04:37:28] | DEBUG | Request: {"method": "HEAD", "url": "/owa/?", "headers": {"Accept": "*/*", "Host": "mail.clubmadeira.io", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0", "Content-Length": "0"}, "ip": "65.49.1.212", "body": "[NO BODY]"}
[2025-04-03 04:37:28] | DEBUG | Full Response: Status 404, Body: 
[2025-04-03 04:37:28] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": ""}
[2025-04-03 04:37:28] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": ""}
[2025-04-03 04:38:22] | DEBUG | Request: {"method": "GET", "url": "/owa/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "mail.clubmadeira.io", "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0", "Content-Length": "0"}, "ip": "65.49.1.219", "body": "[NO BODY]"}
[2025-04-03 04:38:22] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 04:38:22] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:38:22] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:47:41] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "65.49.1.219", "body": "[NO BODY]"}
[2025-04-03 04:47:41] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 04:47:41] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:47:41] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:54:06] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "65.49.1.220", "body": "[NO BODY]"}
[2025-04-03 04:54:06] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 04:54:06] | DEBUG | No token found, serving login page
[2025-04-03 04:54:06] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 04:54:06] | DEBUG | Response: {"status": 200, "duration_ms": "63.47", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 04:57:33] | DEBUG | Request: {"method": "GET", "url": "/owa/auth/x.js?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Cookie": "X-AnonResource=true; X-AnonResource-Backend=localhost/ecp/default.flt?~3; X-BEResource=localhost/owa/auth/logon.aspx?~3;", "Host": "mail.clubmadeira.io", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/122.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "65.49.1.218", "body": "[NO BODY]"}
[2025-04-03 04:57:33] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 04:57:33] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 04:57:33] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 05:11:58] | DEBUG | Request: {"method": "GET", "url": "/geoserver/web/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:109.0) Gecko/20100101 Firefox/115.0", "Content-Length": "0"}, "ip": "65.49.1.214", "body": "[NO BODY]"}
[2025-04-03 05:11:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 05:11:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 05:11:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 05:18:08] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; ModatScanner/1.0; +https://modat.io/)", "Content-Length": "0"}, "ip": "57.128.230.106", "body": "[NO BODY]"}
[2025-04-03 05:18:08] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 05:18:08] | DEBUG | No token found, serving login page
[2025-04-03 05:18:08] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 05:18:08] | DEBUG | Response: {"status": 200, "duration_ms": "31.77", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 06:03:49] | DEBUG | Request: {"method": "GET", "url": "/merchant?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.68.136", "body": "[NO BODY]"}
[2025-04-03 06:03:49] | WARNING | Security Issue - No token provided in Authorization header or session, redirecting to /
[2025-04-03 06:03:49] | DEBUG | Full Response: Status 302, Body: <!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/">/</a>. If not, click the link.

[2025-04-03 06:03:49] | DEBUG | Response: {"status": 302, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to the target URL: <a href=\"/\">/</a>. If not, click the link.\n"}
[2025-04-03 06:22:57] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", "Accept-Encoding": "gzip, deflate, br, zstd", "Accept-Language": "en-US,en;q=0.9,en;q=0.9;q=0.8", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36", "Upgrade-Insecure-Requests": "1", "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Priority": "u=0, i", "Content-Length": "0"}, "ip": "3.88.150.135", "body": "[NO BODY]"}
[2025-04-03 06:22:57] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 06:22:57] | DEBUG | No token found, serving login page
[2025-04-03 06:22:57] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 06:22:57] | DEBUG | Response: {"status": 200, "duration_ms": "50.22", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 06:49:00] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:00] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 06:49:00] | DEBUG | No token found, serving login page
[2025-04-03 06:49:00] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 06:49:00] | DEBUG | Response: {"status": 200, "duration_ms": "46.84", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 06:49:01] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Host": "217.154.57.228", "User-Agent": "l9tcpid/v1.1.0", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:01] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 06:49:01] | DEBUG | No token found, serving login page
[2025-04-03 06:49:01] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 06:49:01] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 06:49:01] | DEBUG | Request: {"method": "GET", "url": "/.env.dist?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:01] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:01] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "2.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:01] | DEBUG | Response: {"status": 404, "duration_ms": "2.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:01] | DEBUG | Request: {"method": "GET", "url": "/.env.production.local?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:01] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:01] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:01] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:01] | DEBUG | Request: {"method": "GET", "url": "/assets../.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:01] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:01] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "15.62", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:01] | DEBUG | Response: {"status": 404, "duration_ms": "15.62", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/configuration/.env?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/prod/.env?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/settings/.env?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "4.18", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "4.18", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/core/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "10.16", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "10.16", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/docker-compose.prod.yml?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/.env.prod?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/.env.template?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/project/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "15.64", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "15.64", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Request: {"method": "GET", "url": "/api/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/cms/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "5.07", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "5.07", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/files/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/.env.bak?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/app/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/backup/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/.env.config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/.env.dev?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "1.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Request: {"method": "GET", "url": "/api/.env?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/build/.env?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/server/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/.env.live?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/.env.staging.local?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/data/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/.env.dev.local?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/.env.local?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/.env.sandbox?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Request: {"method": "GET", "url": "/.env.development.local?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:04] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/.env.preprod?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/dev/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/media/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/www/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "7.70", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "7.70", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/config/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/.env.ci?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/.env.production?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/.env_sample?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Request: {"method": "GET", "url": "/.env.save?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:05] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/src/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/admin/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/config.json?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/public/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/.env?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/.env.stage?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/.env.uat?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/.env.test?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Request: {"method": "GET", "url": "/.aws/credentials?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Request: {"method": "GET", "url": "/media../.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Request: {"method": "GET", "url": "/.env.default?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Request: {"method": "GET", "url": "/config/.env?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Request: {"method": "GET", "url": "/.env.testing?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Request: {"method": "GET", "url": "/.env.backup?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Request: {"method": "GET", "url": "/.env.secret?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "45.148.10.34", "body": "[NO BODY]"}
[2025-04-03 06:49:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 06:49:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 06:49:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:11:37] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36", "Content-Length": "0"}, "ip": "185.180.140.101", "body": "[NO BODY]"}
[2025-04-03 07:11:37] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:11:37] | DEBUG | No token found, serving login page
[2025-04-03 07:11:37] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:11:37] | DEBUG | Response: {"status": 200, "duration_ms": "31.33", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:51:59] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:51:59] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:51:59] | DEBUG | No token found, serving login page
[2025-04-03 07:51:59] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:51:59] | DEBUG | Response: {"status": 200, "duration_ms": "62.49", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:51:59] | DEBUG | Request: {"method": "GET", "url": "/Portal0000.htm?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:51:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:51:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:51:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:51:59] | DEBUG | Request: {"method": "GET", "url": "/QaiA?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:51:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:51:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:51:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:51:59] | DEBUG | Request: {"method": "GET", "url": "/rest/applinks/1.0/manifest?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:51:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:51:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:51:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Request: {"method": "GET", "url": "/nmaplowercheck1743663119?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:00] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:00] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Request: {"method": "GET", "url": "/webui?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:00] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:00] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Request: {"method": "GET", "url": "/confluence/rest/applinks/1.0/manifest?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:00] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:00] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Request: {"method": "POST", "url": "/scripts/WPnBr.dll?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "232", "Content-Type": "text/xml"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:00] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:00] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:00] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:01] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:01] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:01] | DEBUG | No token found, serving login page
[2025-04-03 07:52:01] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:01] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:01] | DEBUG | Request: {"method": "GET", "url": "/HNAP1?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:01] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:01] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:01] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:01] | DEBUG | Request: {"method": "GET", "url": "/pools/default/buckets?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:01] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:01] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:01] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:02] | DEBUG | Request: {"method": "GET", "url": "/Portal/Portal.mwsl?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:02] | DEBUG | Request: {"method": "GET", "url": "/pools?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:02] | DEBUG | Request: {"method": "GET", "url": "/owa/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:03] | DEBUG | Request: {"method": "POST", "url": "/sdk?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "441"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:03] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:03] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:03] | DEBUG | No token found, serving login page
[2025-04-03 07:52:03] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:03] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:03] | DEBUG | Request: {"method": "GET", "url": "/owa/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:03] | DEBUG | Request: {"method": "GET", "url": "/docs/cplugError.html/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:04] | DEBUG | Request: {"method": "GET", "url": "/login.php?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "15.75", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:04] | DEBUG | Response: {"status": 404, "duration_ms": "15.75", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:06] | DEBUG | Request: {"method": "GET", "url": "/dniapi/userInfos?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:06] | DEBUG | Request: {"method": "GET", "url": "/start.aspx?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:07] | DEBUG | Request: {"method": "GET", "url": "/api/v2/about?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:07] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:07] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:07] | DEBUG | No token found, serving login page
[2025-04-03 07:52:07] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:07] | DEBUG | Response: {"status": 200, "duration_ms": "15.67", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:07] | DEBUG | Request: {"method": "GET", "url": "/?=PHPB8B5F2A0-3C92-11d3-A3A9-4C7B08C10000", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:07] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:07] | DEBUG | No token found, serving login page
[2025-04-03 07:52:07] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:07] | DEBUG | Response: {"status": 200, "duration_ms": "46.86", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:07] | DEBUG | Request: {"method": "GET", "url": "/__Additional?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:07] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:07] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:07] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:08] | DEBUG | Request: {"method": "GET", "url": "/CSS/Miniweb.css?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:08] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:08] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:08] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:08] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:08] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:08] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:08] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:08] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:08] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:08] | DEBUG | No token found, serving login page
[2025-04-03 07:52:08] | DEBUG | Request: {"method": "GET", "url": "/webui?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:08] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:08] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:08] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:08] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:08] | DEBUG | Response: {"status": 200, "duration_ms": "42.49", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:09] | DEBUG | Request: {"method": "GET", "url": "/user?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:09] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:09] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:09] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:09] | DEBUG | Request: {"method": "HEAD", "url": "/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:09] | DEBUG | Request: {"method": "HEAD", "url": "/?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "content_type": "", "body": "[NO BODY]"}
[2025-04-03 07:52:09] | WARNING | Missing fields: {}
[2025-04-03 07:52:09] | DEBUG | Full Response: Status 400, Body: {"message":"Email and password are required","status":"error"}

[2025-04-03 07:52:09] | WARNING | UX Issue - Response failed: {"status": 400, "duration_ms": "0.00", "body": "{\"message\":\"Email and password are required\",\"status\":\"error\"}\n"}
[2025-04-03 07:52:09] | DEBUG | Response: {"status": 400, "duration_ms": "0.00", "body": "{\"message\":\"Email and password are required\",\"status\":\"error\"}\n"}
[2025-04-03 07:52:10] | DEBUG | Request: {"method": "GET", "url": "/?=PHPE9568F36-D428-11d2-A769-00AA001ACF42", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:10] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:10] | DEBUG | No token found, serving login page
[2025-04-03 07:52:10] | DEBUG | Request: {"method": "GET", "url": "/.git/HEAD?", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:10] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:10] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:10] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:10] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:10] | DEBUG | Response: {"status": 200, "duration_ms": "52.16", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:10] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:10] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:10] | DEBUG | No token found, serving login page
[2025-04-03 07:52:10] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:10] | DEBUG | Response: {"status": 200, "duration_ms": "31.25", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:10] | DEBUG | Request: {"method": "GET", "url": "/human.aspx?arg12=infotech", "headers": {"Connection": "close", "Host": "ip217-154-57-228.pbiaas.com", "User-Agent": "curl/7.54.0", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:10] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 07:52:10] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "15.65", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:10] | DEBUG | Response: {"status": 404, "duration_ms": "15.65", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 07:52:10] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:10] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:10] | DEBUG | No token found, serving login page
[2025-04-03 07:52:10] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:10] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 07:52:10] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Host": "ip217-154-57-228.pbiaas.com", "Content-Length": "0"}, "ip": "51.195.190.6", "body": "[NO BODY]"}
[2025-04-03 07:52:10] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 07:52:10] | DEBUG | No token found, serving login page
[2025-04-03 07:52:10] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 07:52:10] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 08:22:16] | DEBUG | Request: {"method": "GET", "url": "/robots.txt?", "headers": {"Connection": "keep-alive", "Accept": "text/plain,text/html,*/*", "Accept-Encoding": "gzip, deflate, br", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Content-Length": "0"}, "ip": "66.249.68.135", "body": "[NO BODY]"}
[2025-04-03 08:22:16] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 08:22:16] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 08:22:16] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 08:22:18] | DEBUG | Request: {"method": "GET", "url": "/community?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.68.135", "body": "[NO BODY]"}
[2025-04-03 08:22:18] | WARNING | Security Issue - No token provided in Authorization header or session, redirecting to /
[2025-04-03 08:22:18] | DEBUG | Full Response: Status 302, Body: <!doctype html>
<html lang=en>
<title>Redirecting...</title>
<h1>Redirecting...</h1>
<p>You should be redirected automatically to the target URL: <a href="/">/</a>. If not, click the link.

[2025-04-03 08:22:18] | DEBUG | Response: {"status": 302, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>Redirecting...</title>\n<h1>Redirecting...</h1>\n<p>You should be redirected automatically to the target URL: <a href=\"/\">/</a>. If not, click the link.\n"}
[2025-04-03 09:10:34] | DEBUG | Request: {"method": "GET", "url": "/owa/auth/logon.aspx?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 zgrab/0.x", "Content-Length": "0"}, "ip": "172.202.117.213", "body": "[NO BODY]"}
[2025-04-03 09:10:34] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:10:34] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:10:34] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:55] | DEBUG | Request: {"method": "GET", "url": "/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Opera/12.0(Windows NT 5.1;U;en)Presto/22.9.168 Version/12.00", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:29:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:29:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:55] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:56] | DEBUG | Request: {"method": "GET", "url": "/.env-sample?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.2; rv:56.0) Gecko/20100101 Firefox/56.0", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:29:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:29:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:56] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:57] | DEBUG | Request: {"method": "GET", "url": "/dependencies/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; en-US; rv:1.8.1.8) Gecko/20061201 Firefox/2.0.0.8", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:29:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:29:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:58] | DEBUG | Request: {"method": "GET", "url": "/user/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; i686) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.114 Safari/537.36 SRAF/3.0", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:29:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:29:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:58] | DEBUG | Request: {"method": "GET", "url": "/back/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; U; Android 4.0.4; en-ca; SGH-T989D-parrot Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:29:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:29:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:59] | DEBUG | Request: {"method": "GET", "url": "/security/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36 OPR/45.0.2552.888", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:29:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:29:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:29:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:00] | DEBUG | Request: {"method": "GET", "url": "/admins/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/533.2 (KHTML, like Gecko) Chrome/5.0.342.3 Safari/533.2", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:00] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:00] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:00] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:01] | DEBUG | Request: {"method": "GET", "url": "/lib/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; U; Android 4.1.2; en-us; SPH-P500 Build/JZO54K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:01] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:01] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:01] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:02] | DEBUG | Request: {"method": "GET", "url": "/production/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Trident/5.0; NP07; NP07)", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:02] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:02] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:02] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:03] | DEBUG | Request: {"method": "GET", "url": "/bot/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0; Touch; ASU2JS)", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:03] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:03] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:03] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:04] | DEBUG | Request: {"method": "GET", "url": "/cms/.env.prod?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 5.0; SM-G900V Build/LRX21T) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.94 Mobile Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:04] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:04] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:04] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:05] | DEBUG | Request: {"method": "GET", "url": "/credentials?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Linux x86_64; U; de; rv:1.9.1.6) Gecko/20091201 Firefox/3.5.6 Opera 10.62", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:05] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:05] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "15.63", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:05] | DEBUG | Response: {"status": 404, "duration_ms": "15.63", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:06] | DEBUG | Request: {"method": "GET", "url": "/sample.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_5; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.639.0 Safari/534.16", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:06] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:06] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:06] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:08] | DEBUG | Request: {"method": "GET", "url": "/community/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; U; PPC Mac OS X; de-de) AppleWebKit/85.8.5 (KHTML, like Gecko) Safari/85.8.1", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:08] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:08] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:08] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:10] | DEBUG | Request: {"method": "GET", "url": "/~admin/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (iPad; U; CPU OS 3_2 like Mac OS X; en-us) AppleWebKit/531.21.10 (KHTML, like Gecko) Version/4.0.4 Mobile/7B367 Safari/531.21.10", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:10] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:10] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:10] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:11] | DEBUG | Request: {"method": "GET", "url": "/Core/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 4.4.4; en-us; SAMSUNG SM-G900P Build/KTU84P) AppleWebKit/537.36 (KHTML, like Gecko) Version/1.6 Chrome/28.0.1500.94 Mobile Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:11] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:11] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:11] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:12] | DEBUG | Request: {"method": "GET", "url": "/pos/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; U; Linux i686; pl-PL; rv:1.9.0.13) Gecko/2009080315 Ubuntu/9.04 (jaunty) Firefox/3.0.13", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:12] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:12] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:12] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:13] | DEBUG | Request: {"method": "GET", "url": "/robots/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:36.0) Gecko/20100101 Firefox/36.0", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:13] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:13] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:13] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:14] | DEBUG | Request: {"method": "GET", "url": "/app/config/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 5.1; rv:18.0) Gecko/20100101 Firefox/18.0", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:14] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:14] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:14] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:15] | DEBUG | Request: {"method": "GET", "url": "/base/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36 OPR/42.0.2393.517", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:15] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:15] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:15] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:16] | DEBUG | Request: {"method": "GET", "url": "/django/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; U; Android 4.0.4; en-us; GT-P5113 Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Safari/534.30", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:16] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:16] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:16] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:17] | DEBUG | Request: {"method": "GET", "url": "/awstats/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Opera/9.80 (Linux armv6l; Opera TV Store/5581; (SonyBDP/BDV13)) Presto/2.12.362 Version/12.11", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:17] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:17] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:17] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:18] | DEBUG | Request: {"method": "GET", "url": "/profile/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/4.0 (compatible; MSIE 6.0; X11; Linux i686; en) Opera 8.54", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:18] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:18] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:18] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:18] | DEBUG | Request: {"method": "GET", "url": "/travis/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; WOW64; Trident/7.0; Touch; TNJB; rv:11.0) like Gecko", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:18] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:18] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:18] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:19] | DEBUG | Request: {"method": "GET", "url": "/novnc/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10_6_2; nl-nl) AppleWebKit/534.52.7 (KHTML, like Gecko) Fluid/0.9.6 Safari/534.52.7", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:19] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:19] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:19] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:20] | DEBUG | Request: {"method": "GET", "url": "/Media/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 7.0; SAMSUNG SM-T580 Build/NRD90M) AppleWebKit/537.36 (KHTML, like Gecko) SamsungBrowser/6.4 Chrome/56.0.2924.87 Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:20] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:20] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:20] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:21] | DEBUG | Request: {"method": "GET", "url": "/Demo/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 5.1.1; LGMS631 Build/LMY47V) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.105 Mobile Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:21] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:21] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:21] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:21] | DEBUG | Request: {"method": "GET", "url": "/.ENV?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/43.0.2357.81 Safari/537.36 OPR/30.0.1835.59 (Edition Campaign 16)", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:21] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:21] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:21] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:23] | DEBUG | Request: {"method": "GET", "url": "/.Env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; U; Android 4.1.2; en-us; SCH-L710 Build/JZO54K) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:23] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:23] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:23] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:23] | DEBUG | Request: {"method": "GET", "url": "/items/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.66 Safari/535.11", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:23] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:23] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:23] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:24] | DEBUG | Request: {"method": "GET", "url": "/club/.env?", "headers": {"Accept": "*/*", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Linux; Android 5.0.2; SM-T530NU Build/LRX22G) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.84 Safari/537.36", "Content-Length": "0"}, "ip": "78.153.140.151", "body": "[NO BODY]"}
[2025-04-03 09:30:24] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 09:30:24] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:30:24] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 09:51:20] | DEBUG | Request: {"method": "HEAD", "url": "/remote/fgt_lang?lang=en", "headers": {"Host": "217.154.57.228:443", "User-Agent": "Go-http-client/1.1", "Content-Length": "0"}, "ip": "185.147.125.147", "body": "[NO BODY]"}
[2025-04-03 09:51:20] | DEBUG | Full Response: Status 404, Body: 
[2025-04-03 09:51:20] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": ""}
[2025-04-03 09:51:20] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": ""}
[2025-04-03 10:18:12] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Host": "217.154.57.228:443", "Content-Length": "0"}, "ip": "167.94.145.104", "body": "[NO BODY]"}
[2025-04-03 10:18:12] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 10:18:12] | DEBUG | No token found, serving login page
[2025-04-03 10:18:13] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 10:18:13] | DEBUG | Response: {"status": 200, "duration_ms": "1015.65", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 10:18:18] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "167.94.145.104", "body": "[NO BODY]"}
[2025-04-03 10:18:18] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 10:18:18] | DEBUG | No token found, serving login page
[2025-04-03 10:18:18] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 10:18:18] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 10:18:19] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "167.94.145.104", "body": "[NO BODY]"}
[2025-04-03 10:18:19] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 10:18:19] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 10:18:19] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 10:18:32] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "167.94.145.104", "body": "[NO BODY]"}
[2025-04-03 10:18:32] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 10:18:32] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 10:18:32] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 10:40:45] | DEBUG | Request: {"method": "GET", "url": "/reset-password?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.68.134", "body": "[NO BODY]"}
[2025-04-03 10:40:45] | DEBUG | Full Response: Status 405, Body: <!doctype html>
<html lang=en>
<title>405 Method Not Allowed</title>
<h1>Method Not Allowed</h1>
<p>The method is not allowed for the requested URL.</p>

[2025-04-03 10:40:45] | WARNING | UX Issue - Response failed: {"status": 405, "duration_ms": "15.61", "body": "<!doctype html>\n<html lang=en>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n"}
[2025-04-03 10:40:45] | DEBUG | Response: {"status": 405, "duration_ms": "15.61", "body": "<!doctype html>\n<html lang=en>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n"}
[2025-04-03 10:40:49] | DEBUG | Request: {"method": "POST", "url": "/?", "headers": {"Connection": "close", "Accept": "*/*", "Accept-Encoding": "gzip", "Accept-Language": "en", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2226.0 Safari/537.36", "Sec-Dest": "64kucNyN", "Sec-Site": "6B64EE730E9041F0C7F9", "Content-Length": "0"}, "ip": "50.3.85.74", "body": "[NO BODY]"}
[2025-04-03 10:40:49] | DEBUG | Request: {"method": "POST", "url": "/?", "headers": {"Connection": "close", "Accept": "*/*", "Accept-Encoding": "gzip", "Accept-Language": "en", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/41.0.2226.0 Safari/537.36", "Sec-Dest": "64kucNyN", "Sec-Site": "6B64EE730E9041F0C7F9", "Content-Length": "0"}, "ip": "50.3.85.74", "content_type": "", "body": "[NO BODY]"}
[2025-04-03 10:40:49] | WARNING | Missing fields: {}
[2025-04-03 10:40:49] | DEBUG | Full Response: Status 400, Body: {"message":"Email and password are required","status":"error"}

[2025-04-03 10:40:49] | WARNING | UX Issue - Response failed: {"status": 400, "duration_ms": "0.00", "body": "{\"message\":\"Email and password are required\",\"status\":\"error\"}\n"}
[2025-04-03 10:40:49] | DEBUG | Response: {"status": 400, "duration_ms": "0.00", "body": "{\"message\":\"Email and password are required\",\"status\":\"error\"}\n"}
[2025-04-03 11:38:42] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "'Mozilla/5.0 (compatible; GenomeCrawlerd/1.0; +https://www.nokia.com/genomecrawler)'", "Content-Length": "0"}, "ip": "104.234.115.180", "body": "[NO BODY]"}
[2025-04-03 11:38:42] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 11:38:42] | DEBUG | No token found, serving login page
[2025-04-03 11:38:42] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 11:38:42] | DEBUG | Response: {"status": 200, "duration_ms": "31.73", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 12:26:18] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36", "Content-Length": "0"}, "ip": "45.156.128.45", "body": "[NO BODY]"}
[2025-04-03 12:26:18] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 12:26:18] | DEBUG | No token found, serving login page
[2025-04-03 12:26:18] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 12:26:18] | DEBUG | Response: {"status": 200, "duration_ms": "31.26", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 12:26:31] | DEBUG | Request: {"method": "GET", "url": "/login.html?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36", "Content-Length": "0"}, "ip": "45.156.128.45", "body": "[NO BODY]"}
[2025-04-03 12:26:31] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 12:26:31] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:26:31] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:26:44] | DEBUG | Request: {"method": "GET", "url": "/jasperserver/login.html?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36", "Content-Length": "0"}, "ip": "45.156.128.131", "body": "[NO BODY]"}
[2025-04-03 12:26:44] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 12:26:44] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:26:44] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:27:00] | DEBUG | Request: {"method": "GET", "url": "/jasperserver-pro/login.html?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36", "Content-Length": "0"}, "ip": "45.156.128.45", "body": "[NO BODY]"}
[2025-04-03 12:27:00] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 12:27:00] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "2.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:27:00] | DEBUG | Response: {"status": 404, "duration_ms": "2.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:59:00] | DEBUG | Request: {"method": "GET", "url": "/autodiscover/autodiscover.json?@zdi/Powershell", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 zgrab/0.x", "Content-Length": "0"}, "ip": "172.203.233.136", "body": "[NO BODY]"}
[2025-04-03 12:59:00] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 12:59:00] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "18.82", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:59:00] | DEBUG | Response: {"status": 404, "duration_ms": "18.82", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 12:59:09] | DEBUG | Request: {"method": "GET", "url": "/login?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.69.13", "body": "[NO BODY]"}
[2025-04-03 12:59:09] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 12:59:09] | DEBUG | Response: {"status": 200, "duration_ms": "31.24", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 13:05:58] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept-Encoding": "gzip", "Host": "example.com", "User-Agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/133.0.0.0 Safari/537.36", "Content-Length": "0"}, "ip": "144.202.82.88", "body": "[NO BODY]"}
[2025-04-03 13:05:58] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 13:05:58] | DEBUG | No token found, serving login page
[2025-04-03 13:05:58] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 13:05:58] | DEBUG | Response: {"status": 200, "duration_ms": "62.53", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 13:13:12] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Accept": "*/*", "Accept-Encoding": "gzip", "Host": "clubmadeira.uk", "User-Agent": "curl/8.6.0", "Content-Length": "0"}, "ip": "40.113.118.83", "body": "[NO BODY]"}
[2025-04-03 13:13:12] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 13:13:12] | DEBUG | No token found, serving login page
[2025-04-03 13:13:12] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 13:13:12] | DEBUG | Response: {"status": 200, "duration_ms": "73.93", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 13:27:09] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept-Encoding": "gzip", "Host": "217.154.57.228:443", "User-Agent": "Expanse, a Palo Alto Networks company, searches across the global IPv4 space multiple times per day to identify customers&#39; presences on the Internet. If you would like to be excluded from our scans, please send IP addresses/domains to: scaninfo@paloaltonetworks.com", "Content-Length": "0"}, "ip": "147.185.133.164", "body": "[NO BODY]"}
[2025-04-03 13:27:09] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 13:27:09] | DEBUG | No token found, serving login page
[2025-04-03 13:27:09] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 13:27:09] | DEBUG | Response: {"status": 200, "duration_ms": "58.80", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 14:22:09] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.7049.52 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.69.13", "body": "[NO BODY]"}
[2025-04-03 14:22:09] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 14:22:09] | DEBUG | No token found, serving login page
[2025-04-03 14:22:09] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 14:22:09] | DEBUG | Response: {"status": 200, "duration_ms": "34.47", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 14:38:53] | DEBUG | Request: {"method": "GET", "url": "/version?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 zgrab/0.x", "Content-Length": "0"}, "ip": "20.221.65.112", "body": "[NO BODY]"}
[2025-04-03 14:38:53] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 14:38:53] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "17.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 14:38:53] | DEBUG | Response: {"status": 404, "duration_ms": "17.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 14:49:31] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Cache-Control": "no-cache", "Connection": "close", "Pragma": "no-cache", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", "Accept-Encoding": "gzip, deflate, br", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) HeadlessChrome/125.0.6422.60 Safari/537.36", "Sec-Ch-Ua": "\"HeadlessChrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"", "Sec-Ch-Ua-Mobile": "?0", "Sec-Ch-Ua-Platform": "\"Linux\"", "Upgrade-Insecure-Requests": "1", "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Priority": "u=0, i", "Content-Length": "0"}, "ip": "34.122.147.229", "body": "[NO BODY]"}
[2025-04-03 14:49:31] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 14:49:31] | DEBUG | No token found, serving login page
[2025-04-03 14:49:31] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 14:49:31] | DEBUG | Response: {"status": 200, "duration_ms": "31.18", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 15:15:10] | DEBUG | Request: {"method": "GET", "url": "/.env?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 Keydrop", "Content-Length": "0"}, "ip": "159.203.17.64", "body": "[NO BODY]"}
[2025-04-03 15:15:10] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 15:15:10] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "3.08", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 15:15:10] | DEBUG | Response: {"status": 404, "duration_ms": "3.08", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 15:15:11] | DEBUG | Request: {"method": "GET", "url": "/.git/config?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 Keydrop", "Content-Length": "0"}, "ip": "159.203.17.64", "body": "[NO BODY]"}
[2025-04-03 15:15:11] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 15:15:11] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "2.83", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 15:15:11] | DEBUG | Response: {"status": 404, "duration_ms": "2.83", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 15:59:12] | DEBUG | Request: {"method": "GET", "url": "/robots.txt?", "headers": {"Connection": "keep-alive", "Accept": "text/plain,text/html,*/*", "Accept-Encoding": "gzip, deflate, br", "Host": "clubmadeira.uk", "User-Agent": "Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Content-Length": "0"}, "ip": "66.249.72.69", "body": "[NO BODY]"}
[2025-04-03 15:59:12] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 15:59:12] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 15:59:12] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 15:59:12] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.uk", "If-Modified-Since": "Wed, 02 Apr 2025 15:00:15 GMT", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/134.0.6998.165 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.72.71", "body": "[NO BODY]"}
[2025-04-03 15:59:12] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 15:59:12] | DEBUG | No token found, serving login page
[2025-04-03 15:59:12] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 15:59:12] | DEBUG | Response: {"status": 200, "duration_ms": "51.53", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 16:14:20] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Host": "217.154.57.228:443", "Content-Length": "0"}, "ip": "162.142.125.125", "body": "[NO BODY]"}
[2025-04-03 16:14:20] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 16:14:20] | DEBUG | No token found, serving login page
[2025-04-03 16:14:20] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 16:14:20] | DEBUG | Response: {"status": 200, "duration_ms": "46.53", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 16:14:23] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "162.142.125.125", "body": "[NO BODY]"}
[2025-04-03 16:14:23] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 16:14:23] | DEBUG | No token found, serving login page
[2025-04-03 16:14:23] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 16:14:23] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 16:14:24] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "162.142.125.125", "body": "[NO BODY]"}
[2025-04-03 16:14:24] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 16:14:24] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 16:14:24] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 16:14:35] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (compatible; CensysInspect/1.1; +https://about.censys.io/)", "Content-Length": "0"}, "ip": "162.142.125.125", "body": "[NO BODY]"}
[2025-04-03 16:14:35] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 16:14:35] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 16:14:35] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 16:35:30] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.113 Safari/537.36", "Content-Length": "0"}, "ip": "45.156.128.129", "body": "[NO BODY]"}
[2025-04-03 16:35:30] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 16:35:30] | DEBUG | No token found, serving login page
[2025-04-03 16:35:30] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 16:35:30] | DEBUG | Response: {"status": 200, "duration_ms": "37.03", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 16:54:04] | DEBUG | Request: {"method": "GET", "url": "/signup?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.7049.52 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.69.14", "body": "[NO BODY]"}
[2025-04-03 16:54:04] | DEBUG | Request: {"method": "GET", "url": "/signup?", "headers": {"Connection": "keep-alive", "Accept": "text/html,application/xhtml+xml,application/signed-exchange;v=b3,application/xml;q=0.9,*/*;q=0.8", "Accept-Encoding": "gzip, deflate, br", "From": "googlebot(at)googlebot.com", "Host": "clubmadeira.io", "User-Agent": "Mozilla/5.0 (Linux; Android 6.0.1; Nexus 5X Build/MMB29P) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.7049.52 Mobile Safari/537.36 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)", "Amp-Cache-Transform": "google;v=\"1..8\"", "Content-Length": "0"}, "ip": "66.249.69.14", "body": "[NO BODY]"}
[2025-04-03 16:54:04] | INFO | Signup page rendered successfully
[2025-04-03 16:54:04] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sign Up</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <link rel="stylesheet" href="/static/signup.css"> <!-- Link to combined styles with pulse -->
    <!-- Favicon: Font Awesome "group-arrows-rotate" SVG (Unicode f366) -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
</head>
<body>
    <div class="signup-container">
        <h1>Sign Up - I am a...</h1>
        <form id="signupForm" autocomplete="off">
            <!-- Dummy fields to trick autofill -->
            <input type="text" class="hidden" autocomplete="off">
            <input type="text" class="hidden" autocomplete="off">
            <div class="options">
                <label class="option">
                    <input type="radio" name="signup_type" value="community" checked>
                    <img src="/static/img/community.jpg" alt="Scout leader in uniform, neck down">
                    <span>Community Group</span>
                </label>
                <label class="option">
                    <input type="radio" name="signup_type" value="seller">
                    <img src="/static/img/merchant.jpg" alt="White man in business suit, neck down">
                    <span>Merchant</span>
                </label>
                <label class="option">
                    <input type="radio" name="signup_type" value="wixpro">
                    <img src="/static/img/wixpro.jpg" alt="Female ethnic web designer in casual dress, neck down">
                    <span>Partner</span>
                </label>
            </div>
            <div class="form-section">
                <div class="form-group">
                    <label for="contact_name">Contact Name:</label>
                    <div class="input-container">
                        <input type="text" id="contact_name" name="contact_name" required autocomplete="off">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-phone">Phone Number:</label>
                    <div class="input-container">
                        <input type="tel" id="signup-phone" name="signup_phone" autocomplete="off" pattern="[0-9]{10}" title="Please enter a 10-digit phone number">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-email">Email:</label>
                    <div class="input-container">
                        <input type="text" id="signup-email" name="signup_email" required autocomplete="off">
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-password">Password:</label>
                    <div class="input-container">
                        <input type="text" id="signup-password" name="signup_password" required autocomplete="new-password">
                        <i class="fas fa-eye toggle-password" data-target="signup-password"></i>
                    </div>
                </div>
                <div class="form-group">
                    <label for="signup-confirm-password">Confirm Password:</label>
                    <div class="input-container">
                        <input type="password" id="signup-confirm-password" name="signup_confirm_password" required autocomplete="new-password">
                        <i class="fas fa-eye toggle-password" data-target="signup-confirm-password"></i>
                    </div>
                </div>
                <button type="submit">Sign Me Up</button>
            </div>
        </form>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Set correct input types and clear fields after load
        window.onload = function() {
            const emailInput = document.getElementById('signup-email');
            const passwordInput = document.getElementById('signup-password');
            const confirmPasswordInput = document.getElementById('signup-confirm-password');
            const phoneInput = document.getElementById('signup-phone');

            // Set proper types
            emailInput.type = 'email';
            passwordInput.type = 'password';

            // Double-clear strategy
            setTimeout(function() {
                emailInput.value = '';
                passwordInput.value = '';
                confirmPasswordInput.value = '';
                phoneInput.value = '';
            }, 100);

            setTimeout(function() {
                emailInput.value = '';
                passwordInput.value = '';
                confirmPasswordInput.value = '';
                phoneInput.value = '';
            }, 500); // Extra delay for Chrome

            // Set "Community Group" as selected by default
            const communityOption = document.querySelector('input[value="community"]').closest('.option');
            communityOption.classList.add('selected');
        };

        // Clear fields on focus
        document.getElementById('signup-email').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-password').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-confirm-password').addEventListener('focus', function() {
            this.value = '';
        });
        document.getElementById('signup-phone').addEventListener('focus', function() {
            this.value = '';
        });

        // Highlight selected option
        document.querySelectorAll('input[name="signup_type"]').forEach(function(radio) {
            radio.addEventListener('change', function() {
                document.querySelectorAll('.option').forEach(function(option) {
                    option.classList.remove('selected');
                });
                if (this.checked) {
                    this.closest('.option').classList.add('selected');
                }
            });
        });

        // Dynamically set 'required' attribute for phone number based on signup type
        document.querySelectorAll('input[name="signup_type"]').forEach(function(radio) {
            radio.addEventListener('change', function() {
                const phoneInput = document.getElementById('signup-phone');
                if (this.value === 'wixpro') {
                    phoneInput.removeAttribute('required');
                } else {
                    phoneInput.setAttribute('required', '');
                }
            });

            // Set initial phone requirement based on default selection
            const phoneInput = document.getElementById('signup-phone');
            if (radio.value === 'community' && radio.checked) {
                phoneInput.setAttribute('required', '');
            }
        });

        // Toggle password visibility
        document.querySelectorAll('.toggle-password').forEach(function(icon) {
            icon.addEventListener('click', function() {
                const targetId = this.getAttribute('data-target');
                const input = document.getElementById(targetId);
                if (input.type === 'password') {
                    input.type = 'text';
                    this.classList.remove('fa-eye');
                    this.classList.add('fa-eye-slash');
                } else {
                    input.type = 'password';
                    this.classList.remove('fa-eye-slash');
                    this.classList.add('fa-eye');
                }
            });
        });

        // Form submission with OTP workflow
        $('#signupForm').on('submit', async function(e) {
            e.preventDefault();

            const signupType = $('input[name="signup_type"]:checked').val();
            if (!signupType) {
                toastr.error('Please select a signup type.');
                return;
            }

            const contactName = $('#contact_name').val().trim();
            const phone = $('#signup-phone').val().trim();
            const email = $('#signup-email').val().trim();
            const password = $('#signup-password').val().trim();
            const confirmPassword = $('#signup-confirm-password').val().trim();

            // Validation: Check all required fields, password match, and phone validity
            if (!contactName || !email || !password || !confirmPassword) {
                toastr.error('All fields except phone (for Partner) must be filled.');
                return;
            }

            if (password !== confirmPassword) {
                toastr.error('Passwords do not match.');
                return;
            }

            const passwordRegex = /^(?=.*[A-Za-z])(?=.*\d).{8,}$/;
            if (!passwordRegex.test(password)) {
                toastr.error('Password must be 8+ characters with letters and numbers.');
                return;
            }

            if (signupType !== 'wixpro') {
                if (!phone) {
                    toastr.error('Phone number is required for Community Group and Merchant.');
                    return;
                }
                const phoneRegex = /^\d{10}$/;
                if (!phoneRegex.test(phone)) {
                    toastr.error('Enter a valid 10-digit phone number (e.g., 1234567890).');
                    return;
                }
            }

            const signupData = { 
                signup_type: signupType, 
                contact_name: contactName, 
                signup_phone: phone || null, 
                signup_email: email, 
                signup_password: password 
            };

            try {
                // Step 1: Create user with /signup
                const signupResponse = await fetch('/signup', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(signupData)
                });
                const signupDataResp = await signupResponse.json();
                if (!signupResponse.ok) throw new Error(signupDataResp.message || 'Signup failed');

                if (signupType === 'wixpro') {
                    // Partner: Direct to login
                    toastr.success('Signup successful! Redirecting to login...');
                    setTimeout(() => window.location.href = '/login', 2000);
                } else {
                    // Merchant/Community: Send OTP with /reset-password
                    const otpResponse = await fetch('/reset-password', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const otpData = await otpResponse.json();
                    if (!otpResponse.ok) throw new Error(otpData.message || 'Failed to send OTP');

                    toastr.success('OTP sent to your phone. Please enter it below.');
                    const otpContainer = document.createElement('div');
                    otpContainer.innerHTML = `
                        <div class="form-group">
                            <label for="signupOtp">Enter OTP:</label>
                            <input type="text" id="signupOtp" name="otp" placeholder="Enter OTP" required>
                        </div>
                        <button id="verifyOtpBtn">Verify OTP</button>
                    `;
                    this.appendChild(otpContainer);
                    this.querySelector('.form-section').style.display = 'none';

                    document.getElementById('verifyOtpBtn').addEventListener('click', async () => {
                        const otp = document.getElementById('signupOtp').value.trim();
                        if (!otp) {
                            toastr.error('Please enter the OTP.');
                            return;
                        }

                        // Step 2: Verify OTP with /verify-reset-code
                        const verifyResponse = await fetch('/verify-reset-code', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email, code: otp, new_password: password })
                        });
                        const verifyData = await verifyResponse.json();
                        if (!verifyResponse.ok) throw new Error(verifyData.message || 'OTP verification failed');

                        // Step 3: Redirect to group page based on signup_type
                        toastr.success('Signup verified! Redirecting to your page...');
                        const redirectPath = signupType === 'seller' ? '/merchant' : '/community';
                        setTimeout(() => window.location.href = redirectPath, 2000);
                    });
                }
            } catch (error) {
                toastr.error(error.message || 'Error during signup/OTP process');
            }
        });

        // Toastr options
        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: 'toast-top-right',
            timeOut: 5000
        };
    </script>
</body>
</html>
[2025-04-03 16:54:04] | DEBUG | Response: {"status": 200, "duration_ms": "29.95", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Sign Up</title>\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\">\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <link rel=\"stylesheet\" href=\"/static/signup.css\"> <!-- Link to combined styles with pulse -->\n    <!-- Favicon: Font Awesome \"group-arrows-rotate\" SVG (Unicode f366) -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 4..."}
[2025-04-03 18:24:30] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.190 Safari/537.36", "Content-Length": "0"}, "ip": "185.242.226.14", "body": "[NO BODY]"}
[2025-04-03 18:24:30] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 18:24:30] | DEBUG | No token found, serving login page
[2025-04-03 18:24:30] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 18:24:30] | DEBUG | Response: {"status": 200, "duration_ms": "31.65", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 19:31:12] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Cache-Control": "no-cache", "Connection": "close", "Pragma": "no-cache", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7", "Accept-Encoding": "gzip, deflate, br, zstd", "Host": "217.154.57.228", "Referer": "https://bing.com/", "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.5938.132 Safari/537.36", "Upgrade-Insecure-Requests": "1", "Sec-Fetch-Site": "none", "Sec-Fetch-Mode": "navigate", "Sec-Fetch-User": "?1", "Sec-Fetch-Dest": "document", "Priority": "u=0, i", "Content-Length": "0"}, "ip": "205.169.39.22", "body": "[NO BODY]"}
[2025-04-03 19:31:12] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 19:31:12] | DEBUG | No token found, serving login page
[2025-04-03 19:31:12] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 19:31:12] | DEBUG | Response: {"status": 200, "duration_ms": "43.86", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 21:12:20] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 zgrab/0.x", "Content-Length": "0"}, "ip": "149.28.49.123", "body": "[NO BODY]"}
[2025-04-03 21:12:20] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 21:12:20] | DEBUG | No token found, serving login page
[2025-04-03 21:12:20] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 21:12:20] | DEBUG | Response: {"status": 200, "duration_ms": "15.61", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 21:23:27] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 zgrab/0.x", "Content-Length": "0"}, "ip": "172.172.245.168", "body": "[NO BODY]"}
[2025-04-03 21:23:27] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 21:23:27] | DEBUG | No token found, serving login page
[2025-04-03 21:23:27] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 21:23:27] | DEBUG | Response: {"status": 200, "duration_ms": "16.63", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 21:49:55] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0", "Content-Length": "0"}, "ip": "91.196.152.230", "body": "[NO BODY]"}
[2025-04-03 21:49:55] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 21:49:55] | DEBUG | No token found, serving login page
[2025-04-03 21:49:56] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 21:49:56] | DEBUG | Response: {"status": 200, "duration_ms": "31.31", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 21:51:41] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0", "Content-Length": "0"}, "ip": "91.196.152.225", "body": "[NO BODY]"}
[2025-04-03 21:51:41] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 21:51:41] | DEBUG | No token found, serving login page
[2025-04-03 21:51:41] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 21:51:41] | DEBUG | Response: {"status": 200, "duration_ms": "4.03", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 21:57:35] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0", "Content-Length": "0"}, "ip": "91.196.152.43", "body": "[NO BODY]"}
[2025-04-03 21:57:35] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 21:57:35] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 21:57:35] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 21:58:59] | DEBUG | Request: {"method": "GET", "url": "/favicon.ico?", "headers": {"Connection": "close", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0", "Content-Length": "0"}, "ip": "91.196.152.51", "body": "[NO BODY]"}
[2025-04-03 21:58:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 21:58:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 21:58:59] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:53] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:53] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 22:31:53] | DEBUG | No token found, serving login page
[2025-04-03 22:31:53] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 22:31:53] | DEBUG | Response: {"status": 200, "duration_ms": "44.57", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 22:31:54] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Host": "217.154.57.228", "User-Agent": "l9tcpid/v1.1.0", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:54] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 22:31:54] | DEBUG | No token found, serving login page
[2025-04-03 22:31:54] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 22:31:54] | DEBUG | Response: {"status": 200, "duration_ms": "5.05", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 22:31:54] | DEBUG | Request: {"method": "GET", "url": "/flock/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:54] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:54] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:54] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:54] | DEBUG | Request: {"method": "GET", "url": "/m/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:54] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:54] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:54] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/staging/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/store/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.53", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "1.53", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/api/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/blog/wp-content/themes/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/dot.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/awsconf.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/database/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "7.53", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "7.53", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/public/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/samples/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Request: {"method": "GET", "url": "/shop/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:55] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:55] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:55] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/.git/configf?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/a/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/dev/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/app/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/data/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/qa/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/repository/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "1.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Request: {"method": "GET", "url": "/amphtml/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:56] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:56] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "15.68", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:56] | DEBUG | Response: {"status": 404, "duration_ms": "15.68", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/aomanalyzer/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/vendor/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.99", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.99", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/wp-includes/js/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/prod.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/wp-content/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/wp-content/plugins/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/admin/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.97", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "1.97", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/developer/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/git/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "1.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "1.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Request: {"method": "GET", "url": "/cms/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:57] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:57] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:57] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/demo/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/repos/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "2.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "2.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/s3/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/application/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/blog/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/build/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/old-cuburn/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/site/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/web/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:58] | DEBUG | Request: {"method": "GET", "url": "/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:58] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:58] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/common/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/new/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/live/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/wiki/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/wp-content/themes/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "7.03", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "7.03", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/__macosx/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/backup/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Request: {"method": "GET", "url": "/beta/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "195.178.110.159", "body": "[NO BODY]"}
[2025-04-03 22:31:59] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:31:59] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "2.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:31:59] | DEBUG | Response: {"status": 404, "duration_ms": "2.01", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:46:50] | DEBUG | Request: {"method": "PROPFIND", "url": "/?", "headers": {"Accept-Encoding": "gzip", "Host": "217.154.57.228:443", "User-Agent": "-", "Content-Length": "0"}, "ip": "154.81.156.10", "body": "[NO BODY]"}
[2025-04-03 22:46:50] | DEBUG | Full Response: Status 405, Body: <!doctype html>
<html lang=en>
<title>405 Method Not Allowed</title>
<h1>Method Not Allowed</h1>
<p>The method is not allowed for the requested URL.</p>

[2025-04-03 22:46:50] | WARNING | UX Issue - Response failed: {"status": 405, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n"}
[2025-04-03 22:46:50] | DEBUG | Response: {"status": 405, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n"}
[2025-04-03 22:57:42] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Content-Length": "0"}, "ip": "170.39.218.2", "body": "[NO BODY]"}
[2025-04-03 22:57:42] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 22:57:42] | DEBUG | No token found, serving login page
[2025-04-03 22:57:42] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 22:57:42] | DEBUG | Response: {"status": 200, "duration_ms": "31.27", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 22:57:42] | DEBUG | Request: {"method": "GET", "url": "/.git/config?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "l9explore/1.2.2", "Content-Length": "0"}, "ip": "170.39.218.2", "body": "[NO BODY]"}
[2025-04-03 22:57:42] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 22:57:42] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 22:57:42] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 23:25:31] | DEBUG | Request: {"method": "POST", "url": "/vpnsvc/connect.cgi?", "headers": {"Connection": "Keep-Alive", "Host": "217.154.57.228", "X-Ssl-Vpn": "1", "Content-Length": "1684", "Content-Type": "image/jpeg"}, "ip": "85.90.246.159", "body": "[NO BODY]"}
[2025-04-03 23:25:31] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-03 23:25:31] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 23:25:31] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-03 23:26:03] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "close", "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8", "Accept-Language": "en-US,en;q=0.5", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:130.0) Gecko/20100101 Firefox/130.0", "Content-Length": "0"}, "ip": "51.254.49.102", "body": "[NO BODY]"}
[2025-04-03 23:26:03] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-03 23:26:03] | DEBUG | No token found, serving login page
[2025-04-03 23:26:03] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-03 23:26:03] | DEBUG | Response: {"status": 200, "duration_ms": "31.81", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-03 23:29:27] | DEBUG | Request: {"method": "PROPFIND", "url": "/?", "headers": {"Accept-Encoding": "gzip", "Host": "217.154.57.228:443", "User-Agent": "-", "Content-Length": "0"}, "ip": "154.81.156.10", "body": "[NO BODY]"}
[2025-04-03 23:29:27] | DEBUG | Full Response: Status 405, Body: <!doctype html>
<html lang=en>
<title>405 Method Not Allowed</title>
<h1>Method Not Allowed</h1>
<p>The method is not allowed for the requested URL.</p>

[2025-04-03 23:29:27] | WARNING | UX Issue - Response failed: {"status": 405, "duration_ms": "0.99", "body": "<!doctype html>\n<html lang=en>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n"}
[2025-04-03 23:29:27] | DEBUG | Response: {"status": 405, "duration_ms": "0.99", "body": "<!doctype html>\n<html lang=en>\n<title>405 Method Not Allowed</title>\n<h1>Method Not Allowed</h1>\n<p>The method is not allowed for the requested URL.</p>\n"}
[2025-04-03 23:34:28] | DEBUG | Request: {"method": "HEAD", "url": "/remote/fgt_lang?lang=en", "headers": {"Host": "217.154.57.228:443", "User-Agent": "Go-http-client/1.1", "Content-Length": "0"}, "ip": "185.147.125.147", "body": "[NO BODY]"}
[2025-04-03 23:34:28] | DEBUG | Full Response: Status 404, Body: 
[2025-04-03 23:34:28] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": ""}
[2025-04-03 23:34:28] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": ""}
[2025-04-04 00:35:02] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Accept": "*/*", "Accept-Encoding": "gzip", "Host": "217.154.57.228", "User-Agent": "Mozilla/5.0 (X11; Linux i686; rv:110.0) Gecko/20100101 Firefox/110.0", "Content-Length": "0"}, "ip": "38.110.46.210", "body": "[NO BODY]"}
[2025-04-04 00:35:02] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-04 00:35:02] | DEBUG | No token found, serving login page
[2025-04-04 00:35:02] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-04 00:35:02] | DEBUG | Response: {"status": 200, "duration_ms": "47.56", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-04 00:36:26] | DEBUG | Request: {"method": "GET", "url": "/?", "headers": {"Connection": "keep-alive", "Accept": "*/*", "Accept-Encoding": "gzip, deflate", "Host": "217.154.57.228", "User-Agent": "python-requests/2.32.3", "Content-Length": "0"}, "ip": "35.195.23.184", "body": "[NO BODY]"}
[2025-04-04 00:36:26] | DEBUG | Token sources - Session: null, Header: null, Cookie: null
[2025-04-04 00:36:26] | DEBUG | No token found, serving login page
[2025-04-04 00:36:26] | DEBUG | Full Response: Status 200, Body: <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>clubmadeira.io | Login</title>
    <!-- External CSS -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css">    
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <!-- Local CSS -->
    <link rel="stylesheet" href="/static/css/icons.css%3Fv=1.0.1">
    <!-- Favicon -->
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>" type="image/svg+xml">
    <!-- Fallback for browsers that don't support SVG favicons -->
    <link rel="shortcut icon" href="/static/favicon.ico" type="image/x-icon">
    <!-- Dynamic API URL -->
    <script>
        window.apiUrl = 'https://clubmadeira.io';
    </script>
    <!-- External JS -->
    <script src="/static/js/marked.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js" defer></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js" defer></script>
    <script src="https://cdn.tiny.cloud/1/YOUR_API_KEY/tinymce/6/tinymce.min.js" defer></script>
    <!-- Load common.js early for Toastr setup -->
    <script src="/static/js/common.js" defer></script>
</head>
<body>
    <div class="layout-wrapper">
        <div class="header">
            <!-- templates/roles.inc -->

<div style="color: currentcolor; padding: 20px; border-radius: 8px; display: flex; align-items: center; gap: 15px; height: 120px; box-sizing: border-box; overflow: visible;">
    <span class="icon-community" style="width: 50px; height: 50px;"></span>
    <div>
        <h1 style="margin: 0; font-size: 24px; color: currentcolor;">Welcome to clubmadeira.io</h1>
        <p style="margin: 5px 0 0; font-size: 14px; opacity: 0.9; color: currentcolor;">Log in to access your dashboard.</p>
    </div>
</div>
            
        </div>        
        <div id="loadingOverlay" style="display: flex; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(255, 255, 255, 1); justify-content: center; align-items: center; z-index: 9999;">
    <div style="position: relative; width: 200px; height: 200px;">
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 120px; height: 120px; border-top-color: #ff6f61; top: 40px; left: 40px; animation-delay: 0s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 90px; height: 90px; border-top-color: #6bff61; top: 55px; left: 55px; animation-delay: 0.3s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 60px; height: 60px; border-top-color: #61cfff; top: 70px; left: 70px; animation-delay: 0.6s;"></div>
        <div style="position: absolute; border-radius: 50%; border: 8px solid transparent; animation: spin 1.5s linear infinite; width: 30px; height: 30px; border-top-color: #ff61ff; top: 85px; left: 85px; animation-delay: 0.9s;"></div>
    </div>
</div>
<style>
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
</style>
        
<!-- Deployed 2025-03-31 v11 -->
<div class="login-page">
    <div id="loadingOverlay" class="hidden">
        <div class="multicircle-loader">
            <div class="circle circle1"></div>
            <div class="circle circle2"></div>
            <div class="circle circle3"></div>
            <div class="circle circle4"></div>
        </div>
    </div>

    <div class="container hidden" id="loginContainer">
        <h2>Login</h2>
        <div class="custom-login-notice">
            <span class="highlight">Please log in</span> to access your account. If you don’t have an account, click "Sign Up" below.
        </div>
        <form id="loginForm" class="form" method="POST" action="/">
            <div class="form-group">
                <label for="loginEmail">Email:</label>
                <div class="input-container">
                    <input type="email" id="loginEmail" name="email" placeholder="Enter your email" required>
                </div>
            </div>
            <div class="form-group">
                <label for="loginPassword">Password:</label>
                <div class="input-container">
                    <input type="password" id="loginPassword" name="password" placeholder="Enter your password" required>
                    <span class="toggle-password"><i class="fas fa-eye"></i></span>
                </div>
            </div>
            <button type="submit">Login</button>
        </form>
        <div class="toggle-link">
            <a href="/signup">Need an account? Sign Up</a><br>
            <a onclick="showForgotPassword()">Forgot Password?</a>
        </div>
    </div>

    <div class="container hidden" id="forgotPasswordContainer">
        <h2>Forgot Password</h2>
        <form id="forgotPasswordForm" class="form" method="POST" action="/reset-password">
            <div class="form-group">
                <label for="forgotEmail">Email:</label>
                <input type="email" id="forgotEmail" name="email" placeholder="Enter your email" required>
            </div>
            <button type="submit">Send OTP via SMS</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>

    <div class="container hidden" id="verifyOtpContainer">
        <h2>Verify OTP</h2>
        <form id="verifyOtpForm" class="form" method="POST" action="/verify-reset-code">
            <div class="form-group">
                <label for="verifyEmail">Email:</label>
                <input type="email" id="verifyEmail" name="email" placeholder="Enter your email" required>
            </div>
            <div class="form-group">
                <label for="otpCode">One-Time Password:</label>
                <input type="text" id="otpCode" name="code" placeholder="Enter the OTP from SMS" required>
            </div>
            <div class="form-group">
                <label for="newPassword">New Password:</label>
                <input type="password" id="newPassword" name="new_password" placeholder="Enter new password" required>
            </div>
            <div class="form-group">
                <label for="confirmNewPassword">Confirm New Password:</label>
                <input type="password" id="confirmNewPassword" name="confirm_new_password" placeholder="Confirm new password" required>
            </div>
            <button type="submit">Update Password</button>
        </form>
        <div class="toggle-link">
            <a onclick="showLogin()">Back to Login</a>
        </div>
    </div>
</div>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        console.log('Login script loaded - Version: v11 - Timestamp:', new Date().toISOString());

        if (!window.apiUrl) {
            console.error('window.apiUrl is not defined. Form will submit natively.');
            showLogin();
            return;
        }

        if (!window.siteNavigation || !window.decodeJWT || !window.initialize) {
            console.error('Required scripts not loaded. Falling back to native form submission.');
            toastr.error('Failed to load required scripts. Please refresh the page.');
            showLogin();
            return;
        }

        function showLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.remove('hidden');
        }

        function hideLoadingOverlay() {
            const overlay = document.getElementById('loadingOverlay');
            if (overlay) overlay.classList.add('hidden');
        }

        function showLogin() {
            const loginContainer = document.getElementById('loginContainer');
            const forgotContainer = document.getElementById('forgotPasswordContainer');
            const verifyContainer = document.getElementById('verifyOtpContainer');
            if (loginContainer) loginContainer.classList.remove('hidden');
            if (forgotContainer) forgotContainer.classList.add('hidden');
            if (verifyContainer) verifyContainer.classList.add('hidden');
            hideLoadingOverlay();
        }

        function showForgotPassword() {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.remove('hidden');
            document.getElementById('verifyOtpContainer').classList.add('hidden');
            hideLoadingOverlay();
        }

        function showVerifyOtp(email) {
            document.getElementById('loginContainer').classList.add('hidden');
            document.getElementById('forgotPasswordContainer').classList.add('hidden');
            document.getElementById('verifyOtpContainer').classList.remove('hidden');
            document.getElementById('verifyEmail').value = email;
            hideLoadingOverlay();
        }

        // Utility to set a cookie
        function setCookie(name, value, days) {
            let expires = "";
            if (days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                expires = "; expires=" + date.toUTCString();
            }
            document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
            console.log('setCookie - Set cookie:', name, 'Value:', value);
        }

        // Utility to get a cookie
        function getCookie(name) {
            const nameEQ = name + "=";
            const ca = document.cookie.split(';');
            for (let i = 0; i < ca.length; i++) {
                let c = ca[i];
                while (c.charAt(0) === ' ') c = c.substring(1, c.length);
                if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
            }
            return null;
        }

        // Utility to delete a cookie
        function deleteCookie(name) {
            document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
            console.log('deleteCookie - Deleted cookie:', name);
        }

        document.querySelectorAll('.toggle-password').forEach(toggle => {
            toggle.addEventListener('click', function() {
                const input = this.parentElement.querySelector('input');
                const icon = this.querySelector('i');
                input.type = input.type === 'password' ? 'text' : 'password';
                icon.classList.toggle('fa-eye');
                icon.classList.toggle('fa-eye-slash');
            });
        });

        const loginForm = document.getElementById('loginForm');
        if (loginForm) {
            loginForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                console.log('Login form submitted');
                const email = document.getElementById('loginEmail').value.trim();
                const password = document.getElementById('loginPassword').value;

                if (!email || !password) {
                    toastr.error('Please enter both email and password.');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await fetch('/', {
                        method: 'POST',
                        headers: { 
                            'Content-Type': 'application/json', 
                            'Accept': 'application/json' 
                        },
                        body: JSON.stringify({ email, password }),
                        credentials: 'include' // Ensure cookies are sent
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Login failed');
                    }

                    const data = await response.json();
                    if (data.status !== 'success') throw new Error(data.message || 'Login failed');

                    localStorage.setItem('authToken', data.token);
                    if (data.user_id) localStorage.setItem('userId', data.user_id);  // Already "user_id", kept for consistency
                    localStorage.setItem('expectedPageType', data['x-role']);
                    setCookie('authToken', data.token, 7); // Explicitly set cookie before redirect
                    console.log('Login success - Token:', data.token, 'Redirecting to:', data.redirect_url);
                    window.location.href = data.redirect_url;
                } catch (error) {
                    console.error('Login error:', error.message);
                    toastr.error(error.message || 'Unable to connect to server.');
                    hideLoadingOverlay();
                    showLogin();
                }
            });
        }

        const forgotPasswordForm = document.getElementById('forgotPasswordForm');
        if (forgotPasswordForm) {
            forgotPasswordForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('forgotEmail').value.trim();

                showLoadingOverlay();
                try {
                    const response = await fetch(`${window.apiUrl}/reset-password`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Reset request failed');

                    toastr.success('A one-time password has been sent to your phone.');
                    showVerifyOtp(email);
                } catch (error) {
                    toastr.error(error.message || 'Error sending OTP');
                    hideLoadingOverlay();
                }
            });
        }

        const verifyOtpForm = document.getElementById('verifyOtpForm');
        if (verifyOtpForm) {
            verifyOtpForm.addEventListener('submit', async function(e) {
                e.preventDefault();
                const email = document.getElementById('verifyEmail').value.trim();
                const code = document.getElementById('otpCode').value.trim();
                const newPassword = document.getElementById('newPassword').value;
                const confirmNewPassword = document.getElementById('confirmNewPassword').value;

                const passwordRegex = /^(?=.*\d).{8,}$/;
                if (!passwordRegex.test(newPassword)) {
                    toastr.error('New password must be at least 8 characters long and include numbers');
                    return;
                }
                if (newPassword !== confirmNewPassword) {
                    toastr.error('New password and confirmation do not match');
                    return;
                }

                showLoadingOverlay();
                try {
                    const response = await window.siteNavigation.authenticatedFetch(`${window.apiUrl}/verify-reset-code`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ email, code, new_password: newPassword })
                    });
                    const data = await response.json();
                    if (!response.ok) throw new Error(data.message || 'Verification failed');

                    toastr.success('Password updated successfully!');
                    showLogin();
                } catch (error) {
                    toastr.error(error.message || 'Error verifying OTP');
                    hideLoadingOverlay();
                }
            });
        }

        // Check if already logged in on page load
        const token = localStorage.getItem('authToken');
        const currentPageType = document.body.getAttribute('data-page-type') || 'login';
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;

        console.log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount);

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                console.error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else if (xPageType === 'login') {
                console.error('Server returned login page despite valid token, possible session mismatch');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                deleteCookie('authToken');
                showLogin();
            } else {
                console.log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            localStorage.removeItem('expectedPageType');
            showLogin();
        }
    });
</script>

    </div>

    <!-- Local JS -->
    <script src="/static/js/site-auth.js" defer></script>
    <script src="/static/js/site-navigation.js" defer></script>
    <script src="/static/js/category-management.js" defer></script>
    <script src="/static/js/site-request.js" defer></script>
    <script src="/static/js/user-management.js" defer></script>    
    <script src="/static/js/admin-page.js" defer></script>
    <script src="/static/js/merchant-page.js" defer></script>    
    <script src="/static/js/partner-page.js" defer></script>    
    <script src="/static/js/community-page.js" defer></script>    
    <script src="/static/js/page-load.js" defer></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const layoutWrapper = document.querySelector('.layout-wrapper');
            layoutWrapper.style.display = 'none'; // Hide initially

            // Pass page type from Flask
            const pageType = 'login';

            // Ensure navigation is initialized even if page-specific initialization fails
            function initializeFallback() {
                if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                    console.log('initializeFallback - Initializing navigation');
                    window.siteNavigation.initializeNavigation();
                } else {
                    console.error('initializeFallback - siteNavigation.initializeNavigation not found');
                }
                layoutWrapper.style.display = 'block'; // Show the layout
            }

            // Attempt page-specific initialization
            if (typeof window.initialize === 'function') {
                console.log(`Initializing page for type: ${pageType}`);
                window.initialize(pageType);
            } else {
                console.warn('window.initialize not found, falling back to navigation initialization');
                initializeFallback();
            }

            // Add event listeners for markdown rendering
            if (typeof window.renderMdPage === 'function') {
                document.querySelectorAll('.md-link').forEach(link => {
                    link.addEventListener('click', function(event) {
                        event.preventDefault(); // Prevent default link behavior
                        const mdPath = this.getAttribute('data-md-path'); // Get markdown path from attribute
                        const targetId = 'md-render-target'; // Define target element ID
                        window.renderMdPage(mdPath, targetId); // Call renderMdPage
                    });
                });
            } else {
                console.error('renderMdPage is not defined');
            }
        });
    </script>
</body>
</html>
[2025-04-04 00:36:26] | DEBUG | Response: {"status": 200, "duration_ms": "0.00", "body": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>clubmadeira.io | Login</title>\n    <!-- External CSS -->\n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.2/css/all.min.css\">    \n    <link rel=\"stylesheet\" href=\"https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css\">\n    <!-- Local CSS -->\n    <link rel=\"stylesheet\" href=\"/static/css/icons.css%3Fv=1.0.1\">\n    <!-- Favicon -->\n    <link rel=\"icon\" href=\"data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'><path fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/></svg>\" type=\"image/svg+xml\">\n    <!-- Fallback for browsers that ..."}
[2025-04-04 00:53:49] | DEBUG | Request: {"method": "GET", "url": "/robots.txt?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "clubmadeira.uk", "User-Agent": "Mozilla/5.0 (Linux; Android 5.0) AppleWebKit/537.36 (KHTML, like Gecko) Mobile Safari/537.36 (compatible; Bytespider; spider-feedback@bytedance.com)", "Content-Length": "0"}, "ip": "47.128.116.126", "body": "[NO BODY]"}
[2025-04-04 00:53:49] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-04 00:53:49] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-04 00:53:49] | DEBUG | Response: {"status": 404, "duration_ms": "0.00", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-04 00:57:47] | DEBUG | Request: {"method": "GET", "url": "/robots.txt?", "headers": {"Connection": "close", "Accept-Encoding": "gzip", "Host": "clubmadeira.uk", "User-Agent": "Mozilla/5.0 (Linux; Android 5.0) AppleWebKit/537.36 (KHTML, like Gecko) Mobile Safari/537.36 (compatible; Bytespider; spider-feedback@bytedance.com)", "Content-Length": "0"}, "ip": "47.128.40.45", "body": "[NO BODY]"}
[2025-04-04 00:57:47] | DEBUG | Full Response: Status 404, Body: <!doctype html>
<html lang=en>
<title>404 Not Found</title>
<h1>Not Found</h1>
<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>

[2025-04-04 00:57:47] | WARNING | UX Issue - Response failed: {"status": 404, "duration_ms": "16.10", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
[2025-04-04 00:57:47] | DEBUG | Response: {"status": 404, "duration_ms": "16.10", "body": "<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n"}
