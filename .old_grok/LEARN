{
  "SCHEMA": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "Comprehensive Project Schema",
    "type": "object",
    "properties": {
      "name": {
        "type": "string",
        "description": "The name of the project (optional)"
      },
      "description": {
        "type": "string",
        "description": "A brief description of the project"
      },
      "base_url": {
        "type": "string",
        "format": "uri",
        "description": "The base URL of the project"
      },
      "main_file": {
        "type": "string",
        "description": "The main file of the project"
      },
      "github": {
        "type": "string",
        "format": "uri",
        "description": "The GitHub repository URL"
      },
      "files": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/file"
        },
        "description": "An array of files in the project"
      },
      "version": {
        "type": "string",
        "description": "The version of the project (optional)"
      },
      "dependencies": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of dependencies (optional)"
      },
      "technologies": {
        "type": "array",
        "items": {
          "type": "string"
        },
        "description": "List of technologies used (optional)"
      }
    },
    "required": [
      "description",
      "base_url",
      "main_file",
      "github",
      "files"
    ],
    "definitions": {
      "file": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the file"
          },
          "type": {
            "type": "string",
            "description": "The type or extension of the file"
          },
          "relative_location": {
            "type": "string",
            "description": "The relative path to the file from the main file"
          },
          "related": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string",
                  "description": "The related filename, relative to root"
                },
                "function": {
                  "type": "string",
                  "description": "The function in the related file (if applicable)"
                },
                "relationship": {
                  "type": "string",
                  "description": "The nature of the relationship, explaining what the related file/function does for this file"
                }
              },
              "required": [
                "file",
                "relationship"
              ]
            },
            "description": "An optional array of related files and functions that may need to be changed if this file is modified"
          }
        },
        "required": [
          "name",
          "type",
          "relative_location"
        ],
        "oneOf": [
          {
            "$ref": "#/definitions/js_file"
          },
          {
            "$ref": "#/definitions/blueprint_file"
          },
          {
            "$ref": "#/definitions/template_file"
          },
          {
            "$ref": "#/definitions/document_file"
          },
          {
            "$ref": "#/definitions/ccs_file"
          }
        ]
      },
      "parameter": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the parameter"
          },
          "type": {
            "type": "string",
            "description": "The data type of the parameter"
          },
          "optional": {
            "type": "boolean",
            "description": "Whether the parameter is optional"
          },
          "description": {
            "type": "string",
            "description": "A concise description of the parameter"
          }
        },
        "required": [
          "name",
          "type",
          "optional",
          "description"
        ]
      },
      "js_file": {
        "allOf": [
          {
            "$ref": "#/definitions/file"
          },
          {
            "type": "object",
            "properties": {
              "functions": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/function"
                },
                "description": "An array of functions defined in the JS file"
              }
            },
            "required": [
              "functions"
            ]
          }
        ]
      },
      "function": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the function"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the function"
          },
          "parameters": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/parameter"
            },
            "description": "An array of parameters for the function"
          },
          "related": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "file": {
                  "type": "string",
                  "description": "The related filename, relative to root"
                },
                "function": {
                  "type": "string",
                  "description": "The function in the related file (if applicable)"
                },
                "relationship": {
                  "type": "string",
                  "description": "The nature of the relationship, explaining what the related file/function does for this function"
                }
              },
              "required": [
                "file",
                "relationship"
              ]
            },
            "description": "An optional array of related files and functions that may need to be changed if this function is modified"
          }
        },
        "required": [
          "name",
          "description",
          "parameters"
        ]
      },
      "blueprint_file": {
        "allOf": [
          {
            "$ref": "#/definitions/file"
          },
          {
            "type": "object",
            "properties": {
              "flask_blueprint": {
                "type": "string",
                "description": "The name of the Flask blueprint"
              },
              "endpoint_name": {
                "type": "string",
                "description": "The name of the endpoint"
              },
              "method": {
                "type": "string",
                "enum": [
                  "GET",
                  "POST",
                  "PUT",
                  "DELETE"
                ],
                "description": "The HTTP method of the endpoint"
              },
              "description": {
                "type": "string",
                "description": "A brief description of the endpoint"
              },
              "parameters": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/parameter"
                },
                "description": "An array of parameters for the endpoint"
              }
            },
            "required": [
              "flask_blueprint",
              "endpoint_name",
              "method",
              "description",
              "parameters"
            ]
          }
        ]
      },
      "template_file": {
        "allOf": [
          {
            "$ref": "#/definitions/file"
          },
          {
            "type": "object",
            "properties": {
              "engine": {
                "type": "string",
                "enum": [
                  "jinja2",
                  "handlebars",
                  "mustache"
                ],
                "description": "The templating engine used"
              }
            },
            "required": [
              "engine"
            ]
          }
        ]
      },
      "document_file": {
        "allOf": [
          {
            "$ref": "#/definitions/file"
          },
          {
            "type": "object",
            "properties": {
              "format": {
                "type": "string",
                "enum": [
                  "pdf",
                  "docx",
                  "txt"
                ],
                "description": "The format of the document"
              }
            },
            "required": [
              "format"
            ]
          }
        ]
      },
      "ccs_file": {
        "allOf": [
          {
            "$ref": "#/definitions/file"
          },
          {
            "type": "object",
            "properties": {
              "styles": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/csstyle"
                },
                "description": "An array of style definitions contained in the CCS file"
              }
            },
            "required": [
              "styles"
            ]
          }
        ]
      },
      "csstyle": {
        "type": "object",
        "properties": {
          "style_name": {
            "type": "string",
            "description": "The name of the CSS style"
          },
          "description": {
            "type": "string",
            "description": "A brief description of what the style does or its purpose"
          }
        },
        "required": [
          "style_name",
          "description"
        ]
      },
      "command": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the command"
          },
          "syntax": {
            "type": "string",
            "description": "The syntax of the command"
          },
          "description": {
            "type": "string",
            "description": "A brief description of the command"
          },
          "responses": {
            "type": "array",
            "items": {
              "$ref": "#/definitions/response"
            },
            "description": "An array of possible responses"
          }
        },
        "required": [
          "name",
          "syntax",
          "description",
          "responses"
        ]
      },
      "response": {
        "type": "object",
        "properties": {
          "accepted_response": {
            "type": "string",
            "description": "The accepted response message"
          },
          "condition": {
            "type": "string",
            "description": "The condition under which this response is issued"
          }
        },
        "required": [
          "accepted_response",
          "condition"
        ]
      }
    }
  },
  "VALID_COMMANDS": [
    {
      "syntax": "{`SCHEMA`: current SCHEMA in full ; `VALID_COMMANDS`: current valid commands in full ; `Comprehensive Project Schema`: the current project schema in full }",
      "description": "This file. Perform LEARN command on all attachments.",
      "responses": [
        {
          "accepted_response": "Initialised {Comprehensive Project Schema project name if defined || blank}.",
          "condition": "Always"
        }
      ]
    },
    {
      "name": "CR",
      "syntax": "CR",
      "description": "Confirm receipt of file/code/content, providing no additional response beyond confirmation. Incorporate any new data and update the Comprehensive Project Schema as appropriate to store useful debugging information. When updating file entries, ensure the 'related' field is populated with all known references to other project files (e.g., endpoints, scripts, styles, or assets like images/icons) based on the provided content.",
      "responses": [
        {
          "accepted_response": "Received {filename if given}",
          "condition": "Always"
        }
      ]
    },
    {
      "name": "CREQ",
      "syntax": "CREQ",
      "description": "Confirm requirement. Read any files you need from the project git. Ask for any missing files. Then give a concise review of your current understanding of the requirement and any questions you have. Update this with new info from subsequent 'CREQ' prompts; do not generate code unless instructed. Always include a separate list of files that will be changed by the CREQ. Ensure that any file dependencies identified (e.g., endpoints, scripts, or assets) are candidates for inclusion in the 'related' field of affected files.",
      "responses": [
        {
          "accepted_response": "A concise text summary of understanding, questions, and a list of files to be changed.",
          "condition": "When the requirement is understood and files to be changed are identified."
        },
        {
          "accepted_response": "Clarification needed: [specific question]",
          "condition": "When there are ambiguities or missing information in the requirement."
        }
      ]
    },
    {
      "name": "NF",
      "syntax": "NF",
      "description": "When working with the array of files from CREQ, provide the Next file in sequence. May be used in combination with AMD. May be modified with ?. Response with the next file or none if all complete.",
      "responses": [
        {
          "accepted_response": "The next filename",
          "condition": "When there are remaining files in the sequence."
        },
        {
          "accepted_response": "sequence complete",
          "condition": "When all files in the sequence have been processed."
        },
        {
          "accepted_response": "Identify the next file in sequence, or none.",
          "condition": "When the command is modified with '?' to indicate uncertainty."
        }
      ]
    },
    {
      "name": "AMD",
      "syntax": "AMD {filename}\n{body}",
      "description": "Amend. Add your amendments to your most recent version and update the Comprehensive Project Schema as appropriate to store useful debugging information. When writing an AMD this MUST be the FULL unabridged version of the original file plus your changes. If a newer version exists it will be provided in the {body}. Amend the provided version if given else your most recent update. If omitted and no recent update, read the file from the repo or request it. Ensure the 'related' field in the schema entry for {filename} is updated to include all known references to other project files (e.g., endpoints, scripts, styles, or assets) identified in the amended content. The response must contain only the amended code block with no additional commentary in the format AMD {filename}: {body}",
      "responses": [
        {
          "accepted_response": "The full amended file content reflecting all changes, as a raw code block with no commentary.",
          "condition": "When the amendment is successfully applied to the file."
        }
      ]
    },
    {
      "name": "XREQ",
      "syntax": "XREQ",
      "description": "A Transfer Request. Create a concise prompt to restart the chat with another instance, stating the Current Requirement and progress made toward it. List files changed in AMD amendments with before and after code. Add a section of observations for code improvement, including suggestions for populating the 'related' field with any newly identified dependencies. This may be saved as xreq.md in the project repo, so use .md formatting.",
      "responses": [
        {
          "accepted_response": "A raw Markdown text block formatted with @ for internal code blocks, containing the transfer request details.",
          "condition": "When the transfer request is generated with all required details."
        }
      ]
    },
    {
      "name": "LEARN",
      "syntax": "LEARN\n{body} || LEARN ATT",
      "description": "Create a Comprehensive Project Schema if one is not in memory. If 'LEARN ATT' is used, process each attachment in the prompt (e.g., images, PDFs, text files) and add/update entries in the project schema based on their content. If 'LEARN\n{body}' is used, read the {body} only. For each processed item (attachments or body), add files to the 'files' array if they conform to existing types (js_file, blueprint_file, template_file, document_file). For items that do not fit existing types, create a new file_type in the schema’s 'definitions' section: base it on 'js_file' if it contains methods/functions, 'blueprint_file' if it contains endpoints, or 'document_file' if it’s documentation. Update the 'oneOf' clause in the 'file' definition to include any new type. Add the file to the 'files' array under its type. Populate the 'related' field for each file with all known references to other project files (e.g., endpoints, scripts, styles, images, or icons) identified in the content. Respond with 'Learned: {filenames}' when done, where {filenames} is a space-separated list of processed file names.",
      "responses": [
        {
          "accepted_response": "Learned: {filenames}",
          "condition": "When the learning process is completed, entries are updated, and any new file types are added to the schema."
        },
        {
          "accepted_response": "Error: No attachments found",
          "condition": "When 'LEARN ATT' is specified but no attachments are present in the prompt."
        },
        {
          "accepted_response": "Error: No body provided",
          "condition": "When 'LEARN' is used without {body} and without 'ATT'."
        }
      ]
    },
    {
      "name": "SUMMARISE",
      "syntax": "summarise {all}",
      "description": "If all is omitted write the current project schema in full, including all populated 'related' fields reflecting dependencies across the project. Otherwise write this json in full in the format {`SCHEMA`: current SCHEMA in full ; `VALID_COMMANDS`: current valid commands in full ; `Comprehensive Project Schema`: the current project schema in full }",
      "responses": [
        {
          "accepted_response": "{`SCHEMA`: current SCHEMA in full ; `VALID_COMMANDS`: current valid commands in full ; `Comprehensive Project Schema`: the current project schema in full }",
          "condition": "if all"
        },
        {
          "accepted_response": "Write just current `Comprehensive Project Schema` JSON in full.",
          "condition": "if all is omitted"
        }
      ]
    }
  ],
  "Comprehensive Project Schema": {
    "name": null,
    "description": "",
    "base_url": "",
    "main_file": "",
    "github": "",
    "files": [],
    "version": null,
    "dependencies": [],
    "technologies": []
  }
}