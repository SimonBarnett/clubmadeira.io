"You are Grok, created by xAI. In prompts, apply these shorthand expressions (case insensitive). These base instructions do not need to be verified in CREQs (confirm reuirements) but you are to remember them in preference to any subsequent information:
CR: Confirm receipt of file/code/content, ONLY.
CREQ: Confirm requirement. Read any files you need from the projact git. Then give a concise review of your current understanding of the requirement and any questions you have. Update this with new info from subsequent 'CREQ' prompts; do not generate code unless instructed. Always include the list of files that will be changed by the CREQ.
NF: When working with the array of files from CREQ, provide the Next file in sequence. May be used in conbination with AMD. May be modified with ?. Reponse with teh next file or none if all complete.
AMD {filename}\n{body}: Ammend. Add your amendments to your most recent version. When writing an AMD this MUST be the FULL unabridged version of the original file plus your changes. If a newer version exists it will be provided in the {body}. Amend the provided version if given else your most recent update. If ommited and no recent update, read the file from the repo. Do not repeat the AMD command in the code.
When generating code, you MUST provide the complete file reflecting all current requirements—NEVER produce partial snippets, as this risks overriding complete versions.
When I request an .md file, provide raw Markdown text in a markdown code block, using `@` instead of  for internal code blocks (e.g., 
# Example Heading
Text here.

@@@cmd
echo Hello
@@@). Apply this format only for .md requests."
cr

Today we are making a flask. The Flask App is /madeira.py
My git hub is here:
https://github.com/SimonBarnett/clubmadeira.io

There are four SPA permission based pages in /templates.
	/admin
	/community
	/merchant
	/partner
Routes are defined with blueprints in /bluprints
The app uses a login_required decorator from utils/auth.py for permissions
The main entry point of the app is /, which uses the /login template
from there, depending on user permssion, we redirect to one of the templates above.

CR Blueprint Endpoints

# Flask API cURL Commands Documentation

This document provides cURL commands for interacting with the Flask API endpoints defined in the following blueprints:

- `authentication_bp.py`
- `content_bp.py`
- `manager_bp.py`
- `referral_bp.py`
- `role_pages_bp.py`
- `site_request_bp.py`
- `user_settings_bp.py`
- `utility_bp.py`

All endpoints are hosted at `https://clubmadeira.io`. Replace placeholders like `<your_token>`, `<admin_token>`, `<user_id>`, and sample data with actual values relevant to your environment.

---

## Authentication Blueprint (`authentication_bp.py`)

### `/login` (POST)
Login a user with email and password.

@@@bash
curl -X POST https://clubmadeira.io/login \
-H "Content-Type: application/json" \
-d '{"email": "user@example.com", "password": "mypassword"}'
@@@

### `/signup` (GET)
Retrieve the signup page (returns HTML).

@@@bash
curl -X GET https://clubmadeira.io/signup
@@@

### `/signup` (POST)
Register a new user with required fields.

@@@bash
curl -X POST https://clubmadeira.io/signup \
-H "Content-Type: application/json" \
-d '{"signup_type": "seller", "contact_name": "John Doe", "signup_email": "john@example.com", "signup_password": "securepass", "signup_phone": "1234567890"}'
@@@

### `/reset-password` (POST)
Initiate a password reset by sending an OTP to the user's phone.

@@@bash
curl -X POST https://clubmadeira.io/reset-password \
-H "Content-Type: application/json" \
-d '{"email": "user@example.com"}'
@@@

### `/verify-reset-code` (POST)
Verify the OTP and reset the password.

@@@bash
curl -X POST https://clubmadeira.io/verify-reset-code \
-H "Content-Type: application/json" \
-d '{"email": "user@example.com", "code": "123456", "new_password": "newsecurepass"}'
@@@

### `/update-password` (POST)
Update the user's password (requires authentication).

@@@bash
curl -X POST https://clubmadeira.io/update-password \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <your_token>" \
-d '{"email": "user@example.com", "password": "newersecurepass"}'
@@@

---

## Content Blueprint (`content_bp.py`)

### `/deals` (GET)
Fetch discounted products by category ID.

@@@bash
curl -X GET "https://clubmadeira.io/deals?category_id=123"
@@@

### `/categories` (GET)
Retrieve categories, optionally filtered by parent ID.

@@@bash
curl -X GET "https://clubmadeira.io/categories?parent_id=456"
@@@

---

## Manager Blueprint (`manager_bp.py`)

### `/users` (GET)
List all users (admin only).

@@@bash
curl -X GET https://clubmadeira.io/users \
-H "Authorization: Bearer <admin_token>"
@@@

### `/users/<user_id>` (GET)
Get details for a specific user (admin only).

@@@bash
curl -X GET https://clubmadeira.io/users/789 \
-H "Authorization: Bearer <admin_token>"
@@@

### `/permissions/<user_id>` (GET)
Fetch a user's permissions (admin only).

@@@bash
curl -X GET https://clubmadeira.io/permissions/789 \
-H "Authorization: Bearer <admin_token>"
@@@

### `/permissions/<user_id>` (POST)
Add a permission to a user (admin only).

@@@bash
curl -X POST https://clubmadeira.io/permissions/789 \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <admin_token>" \
-d '{"permission": "merchant"}'
@@@

### `/settings/settings_key` (GET)
Retrieve all settings of type `settings_key` (admin only).

@@@bash
curl -X GET https://clubmadeira.io/settings/settings_key \
-H "Authorization: Bearer <admin_token>"
@@@

### `/settings/settings_key/<key_type>` (PATCH)
Update specific fields of a `settings_key` (admin only).

@@@bash
curl -X PATCH https://clubmadeira.io/settings/settings_key/mykey \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <admin_token>" \
-d '{"field1": "new_value1"}'
@@@

### `/settings/settings_key/<key_type>` (PUT)
Replace a `settings_key` entry (admin only).

@@@bash
curl -X PUT https://clubmadeira.io/settings/settings_key/mykey \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <admin_token>" \
-d '{"setting_type": "settings_key", "field1": "value1", "field2": "value2"}'
@@@

### `/settings/affiliate_key` (GET)
Retrieve all settings of type `affiliate_key` (admin only).

@@@bash
curl -X GET https://clubmadeira.io/settings/affiliate_key \
-H "Authorization: Bearer <admin_token>"
@@@

### `/settings/affiliate_key/<key_type>` (PATCH)
Update specific fields of an `affiliate_key` (admin only).

@@@bash
curl -X PATCH https://clubmadeira.io/settings/affiliate_key/affkey \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <admin_token>" \
-d '{"field1": "new_value1"}'
@@@

### `/settings/affiliate_key/<key_type>` (PUT)
Replace an `affiliate_key` entry (admin only).

@@@bash
curl -X PUT https://clubmadeira.io/settings/affiliate_key/affkey \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <admin_token>" \
-d '{"setting_type": "affiliate_key", "field1": "value1", "field2": "value2"}'
@@@

---

## Referral Blueprint (`referral_bp.py`)

### `/referral` (POST)
Record a referral visit or order (public endpoint).

- **For a visit:**
@@@bash
curl -X POST https://clubmadeira.io/referral \
-H "Content-Type: application/json" \
-d '{"timestamp": "2023-10-26T12:34:56Z", "referer": "user123", "page": "/deals"}'
@@@

- **For an order:**
@@@bash
curl -X POST https://clubmadeira.io/referral \
-H "Content-Type: application/json" \
-d '{"timestamp": "2023-10-26T12:34:56Z", "referer": "user123", "orderId": "ORD001", "buyer": "Jane Doe", "total": 99.99}'
@@@

### `/<user_id>/visits` (GET)
Retrieve referral visits for a user (self or admin).

@@@bash
curl -X GET https://clubmadeira.io/user123/visits \
-H "Authorization: Bearer <your_token>"
@@@

### `/<user_id>/orders` (GET)
Retrieve referral orders for a user (self or admin).

@@@bash
curl -X GET https://clubmadeira.io/user123/orders \
-H "Authorization: Bearer <your_token>"
@@@

---

## Role Pages Blueprint (`role_pages_bp.py`)

### `/admin` (GET)
Render the admin dashboard (admin only).

@@@bash
curl -X GET https://clubmadeira.io/admin \
-H "Authorization: Bearer <admin_token>"
@@@

### `/community` (GET)
Render the community dashboard (community or admin).

@@@bash
curl -X GET https://clubmadeira.io/community \
-H "Authorization: Bearer <your_token>"
@@@

### `/merchant` (GET)
Render the merchant dashboard (merchant or admin).

@@@bash
curl -X GET https://clubmadeira.io/merchant \
-H "Authorization: Bearer <your_token>"
@@@

### `/partner` (GET)
Render the partner dashboard (wixpro or admin).

@@@bash
curl -X GET https://clubmadeira.io/partner \
-H "Authorization: Bearer <your_token>"
@@@

### `/branding` (GET)
Fetch branding data for a specific type (authenticated users).

@@@bash
curl -X GET "https://clubmadeira.io/branding?type=admin" \
-H "Authorization: Bearer <your_token>"
@@@

---

## Site Request Blueprint (`site_request_bp.py`)

### `/siterequests` (GET)
List all site requests (admin or wixpro).

@@@bash
curl -X GET https://clubmadeira.io/siterequests \
-H "Authorization: Bearer <admin_or_wixpro_token>"
@@@

### `/siterequests` (POST)
Submit a new site request (self only).

@@@bash
curl -X POST https://clubmadeira.io/siterequests \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <your_token>" \
-d '{"userId": "user123", "type": "community", "communityName": "MyCommunity", "aboutCommunity": "A great community", "communityLogos": ["logo1.png"], "colorPrefs": "blue", "stylingDetails": "modern", "preferredDomain": "mycommunity.org", "emails": ["contact@mycommunity.org"], "pages": [{"title": "Home", "content": "Welcome"}], "widgets": ["chat"]}'
@@@

---

## User Settings Blueprint (`user_settings_bp.py`)

### `/settings/user` (GET)
Retrieve user settings (self only).

@@@bash
curl -X GET https://clubmadeira.io/settings/user \
-H "Authorization: Bearer <your_token>"
@@@

### `/settings/user` (PUT)
Replace user settings (self only).

@@@bash
curl -X PUT https://clubmadeira.io/settings/user \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <your_token>" \
-d '{"email": "newemail@example.com", "notifications": false, "theme": "dark"}'
@@@

### `/settings/user` (PATCH)
Update specific user settings (self only).

@@@bash
curl -X PATCH https://clubmadeira.io/settings/user \
-H "Content-Type: application/json" \
-H "Authorization: Bearer <your_token>" \
-d '{"notifications": true}'
@@@

### `/settings/client_api` (GET)
Retrieve all `client_api` settings (authenticated users).

@@@bash
curl -X GET https://clubmadeira.io/settings/client_api \
-H "Authorization: Bearer <your_token>"
@@@

### `/settings/client_api/<key>` (PUT)
Replace a `client_api` setting (self only).

@@@bash
curl -X PUT https://clubmadeira.io/settings/client_api/mykey \
-H "Content-Type: application/json" \


Below is a complete list of functions from the JavaScript files located under /static/js in the Flask application. Each entry includes the function's name, description, and parameters, presented in a simple, copyable plaintext format. The functions are organized by their respective JavaScript files for clarity.
Functions from admin-page.js  
initializeAdmin: Initializes the admin page based on the specified page type.  
Parameters: pageType (string)

setupNavigation: Configures the navigation elements for the admin page.  
Parameters: None

loadInitialData: Loads initial data (e.g., deals) required for the admin page.  
Parameters: None

setupEventListeners: Sets up event listeners for interactive elements like save buttons on the admin page.  
Parameters: None

Functions from category-management.js  
createTreeNode: Creates a tree node for displaying a category in a hierarchical structure.  
Parameters: category (object), level (number, default: 0), isAdmin (boolean, default: false), savedCategories (array, default: [])

loadCategories: Loads category data, optionally filtered by user or admin context.  
Parameters: userId (string|null, default: null), isAdmin (boolean, default: false)

toggleSubcategories: Toggles the visibility of subcategories for a given category.  
Parameters: categoryId (string), toggle (boolean)

saveCategories: Saves the selected categories for a specific user.  
Parameters: userId (string)

handleCategorySelection: Manages the selection of a category, typically for admin purposes like loading related products.  
Parameters: categoryId (string), checkbox (HTMLElement)

Functions from common.js  
setupToastr: Configures the Toastr library for displaying notifications.  
Parameters: None

Functions from community-page.js  
initializeCommunity: Initializes the community page with necessary setup.  
Parameters: None

updateMenu: Updates the menu based on the user’s permissions.  
Parameters: None

updateIntegrationCode: Updates the integration code displayed for a specific section.  
Parameters: section (string)

loadVisits: Loads visit data for the community page.  
Parameters: None

loadOrders: Loads order data for the community page.  
Parameters: None

setupCollapsibleSections: Sets up collapsible sections for displaying orders and visits.  
Parameters: None

waitForTinyMCE: Waits for the TinyMCE editor to load, then executes a callback.  
Parameters: callback (function)

Functions from merchant-page.js  
initializeMerchant: Initializes the merchant page with necessary setup.  
Parameters: None

checkAdminPermission: Checks user permissions and toggles visibility of admin-specific elements.  
Parameters: None

loadProducts: Loads and displays products associated with the merchant.  
Parameters: None

loadStoreRequest: Loads store request data specific to the merchant page.  
Parameters: None

Functions from page-load.js  
showLoadingOverlay: Displays a loading overlay during page transitions.  
Parameters: None

hideLoadingOverlay: Hides the loading overlay after a specified minimum delay.  
Parameters: minDelay (number, default: 1000)

waitForCssLoad: Waits for CSS files to finish loading before proceeding.  
Parameters: None

loadBranding: Loads branding content based on the specified type.  
Parameters: brandingType (string)

attachEventListeners: Attaches event listeners for actions like logging off.  
Parameters: None

initializePage: Initializes the page, including permission checks, and executes a callback.  
Parameters: requiredPermissions (array), callback (function)

initialize: Handles page-specific setup based on the page type.  
Parameters: pageType (string)

Functions from partner-page.js  
initializePartner: Initializes the partner page with necessary setup.  
Parameters: None

checkAdminPermission: Checks user permissions and toggles visibility of admin-specific elements.  
Parameters: None

loadPartnerIntegrations: Loads and displays integrations specific to the partner page.  
Parameters: None

Functions from site-auth.js  
togglePassword: Toggles the visibility of a password input field (e.g., show/hide).  
Parameters: fieldId (string)

logOff: Logs the user out and clears session data.  
Parameters: None

decodeJWT: Decodes a JWT token to extract user information.  
Parameters: token (string)

authenticatedFetch: Performs an authenticated fetch request using a JWT token.  
Parameters: url (string), options (object, default: {})

savePassword: Saves an updated user password via an API call.  
Parameters: newPassword (string)

Functions from site-navigation.js  
fetchProtectedPage: Fetches content for a protected page requiring authentication.  
Parameters: url (string)

loadBranding: Loads branding content into a specified container.  
Parameters: brandingType (string), containerId (string, default: 'brandingContent')

loadSection: Loads content for a specific section of the page.  
Parameters: sectionId (string)

showSection: Shows a specified section while hiding others, with an optional callback.  
Parameters: sectionId (string), onSectionLoad (function|null, default: null)

toggleSubmenu: Toggles the visibility of a submenu.  
Parameters: submenuId (string), action (string, default: 'toggle')

closeAllSubmenus: Closes all submenus within a specified container.  
Parameters: container (HTMLElement)

handleSectionClick: Handles click events on section navigation buttons.  
Parameters: event (Event)

initializeNavigation: Initializes the navigation system for the application.  
Parameters: None

handleLogoutClick: Handles the logout button click event.  
Parameters: e (Event)

attachBrandingHeaderListener: Attaches an event listener to the branding header for interactivity.  
Parameters: None

Functions from site-request.js  
addPage: Adds a new page entry to the site request form.  
Parameters: type (string)

removePage: Removes a page entry from the site request form.  
Parameters: pageNum (number), type (string)

addEmail: Adds a new email entry to the site request form.  
Parameters: type (string)

removeEmail: Removes an email entry from the site request form.  
Parameters: emailNum (number), type (string)

updateDomainPreview: Updates the domain preview based on user input.  
Parameters: type (string)

checkDomainAvailability: Checks the availability of a domain name via an API call.  
Parameters: None

loadTinyMCE: Loads the TinyMCE editor library for content editing.  
Parameters: None

initializeTinyMCE: Initializes TinyMCE for specified text areas.  
Parameters: selector (string, default: 'textarea[name$="Content"], #about')

getCurrentTimestamp: Generates a formatted timestamp for the current time.  
Parameters: None

saveSiteRequest: Saves the site request form data via an API call.  
Parameters: None

Functions from user-management.js  
loadSettings: Loads user settings into the DOM for display/editing.  
Parameters: None

saveSettings: Saves user settings from the DOM to the backend.  
Parameters: settings (object)

loadWixClientId: Loads the Wix client ID into the DOM for display/editing.  
Parameters: None

saveWixClientId: Saves the Wix client ID from the DOM to the backend.  
Parameters: clientId (string)

validatePassword: Validates the complexity of a password based on predefined rules.  
Parameters: password (string)

setupChangePassword: Sets up the submission logic for the "Change Password" form.  
Parameters: None

CR
