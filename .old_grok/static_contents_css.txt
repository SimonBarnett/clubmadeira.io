+ [static]
+----[css]
+------base.css
+------components.css
+------icons copy.css
+------icons.css
+------layout.css
+------pages.css
+------signup.css
+------styles.css
+------test-svg.html
+------utilities.css
+----[error]
+------200.md
+------403.md
+------404.md
+------500.md
+----[js]
+------admin-page.js
+------amd-admin-page.js
+------category-management.js
+------common.js
+------community-page.js
+------marked.min.js
+------merchant-page.js
+------page-load.js
+------partner-page.js
+------site-auth.js
+------site-navigation.js
+------site-request.js
+------user-management.js
+----[md]
+------amazon_uk_readme.md
+------awin_readme.md
+------bigcommerce.md
+------bigcommerce_readme.md
+------cj_readme.md
+------ebay_uk_readme.md
+------joomla_readme.md
+------magento.md
+------magento_readme.md
+------md_contents_text.txt
+------shopify.md
+------shopify_readme.md
+------squarespace_readme.md
+------weebly_readme.md
+------wix.md
+------wixStore.md
+------wixStore_readme.md
+------wix_readme.md
+------woocommerce.md
+------woocommerce_readme.md
+------wordpress_readme.md
+----static_contents_css.txt

css/base.css
body {
    font-family: Arial, sans-serif;
    margin: 0 !important; /* From original styles.css */
    padding: 0 !important; /* From original styles.css */
    background-color: #f4f4f4;
    min-height: 100vh;
    display: block !important; /* Default from original, overridden in signup-specific cases */
    align-items: initial !important; /* Default from original */
    justify-content: initial !important; /* Default from original */
    text-align: initial !important; /* Default from original */
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
}

h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}
css/components.css
.menu {
    padding-left: 5px;
}

.menu button {
    padding: 10px 10px 10px 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    width: 100%;
    max-width: 200px;
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding-right: 30px;
}

.menu button:hover {
    background-color: #0056b3;
}

.menu button[data-submenu][aria-expanded="true"] {
    background-color: #0056b3;
    border-left: 4px solid #fff;
}

.menu button i,
.menu button .svg-icon,
.menu button .icon-group {
    margin-right: 8px;
    vertical-align: middle;
}

.menu button i::before {
    font-family: "Font Awesome 6 Free";
}

.menu button i.fas::before {
    font-weight: 900;
}

.menu button .svg-icon {
    display: inline-block;
    height: 16px;
    width: auto;
}

.menu button .svg-icon svg {
    height: 100%;
    width: auto;
    fill: white;
}

.menu button .icon-group {
    display: inline-flex;
    align-items: center;
    position: relative;
}

.menu button .icon-group .small-icon {
    font-size: 10px;
    position: absolute;
    bottom: 0;
    right: -8px;
    color: white;
}

.menu button .button-content {
    display: flex;
    align-items: center;
    justify-content: flex-start;
}

.menu button .caret {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: white;
    font-size: 14px;
}

.menu .btn-admin {
    background-color: #dc3545;
}

.menu .btn-admin:hover {
    background-color: #c82333;
}

.menu .btn-logoff {
    background-color: #dc3545;
}

.menu .btn-logoff:hover {
    background-color: #c82333;
}

.menu button[data-href="/admin"] {
    background-color: #dc3545;
}

.menu button[data-href="/admin"]:hover {
    background-color: #c82333;
}

.submenu {
    display: none;
    padding-left: 20px;
    padding-bottom: 0;
    overflow: visible;
    max-height: 0;
    transition: all 0.3s ease-in-out;
}

.submenu.open {
    display: block;
    max-height: 1000px;
    height: auto;
}

.submenu button {
    display: block !important;
    min-height: 30px !important;
    background-color: #6c757d !important;
}

.submenu button:hover {
    background-color: #5a6268;
}

.submenu button.active {
    background-color: #28a745;
    color: white;
}

.form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 400px;
}

.form label {
    font-weight: bold;
}

.form input, .form select {
    padding: 5px;
}

.form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
}

.form button:hover {
    background-color: #0056b3;
}

.settings-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 600px;
}

.settings-form label {
    font-weight: bold;
    margin-bottom: 5px;
}

.settings-form input, 
.settings-form textarea {
    padding: 8px;
    width: 100%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.settings-form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 4px;
}

.settings-form button:hover {
    background-color: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.deals-table th {
    background-color: #f2f2f2;
}

.treeview {
    max-height: 600px;
    overflow-y: auto;
    margin-bottom: 10px;
}

.treeview, .treeview ul, .treeview li {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.treeview .node {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 5px 0;
}

.treeview .toggle {
    cursor: pointer;
    width: 20px;
    text-align: center;
    font-weight: bold;
    flex-shrink: 0;
}

.treeview input[type="checkbox"] {
    width: 16px !important;
    height: 16px !important;
    margin: 0;
    flex-shrink: 0;
}

.treeview .subcategories {
    display: none;
    padding-left: 20px;
}

.treeview .subcategories.open {
    display: block;
}

.button-container {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    max-width: 200px;
}

button:hover {
    background-color: #0056b3;
}
css/icons copy.css
/* icons.css */

/* Size classes for branding and menu icons */
.branding-size {
    display: inline-block;
    width: 100px;
    height: 80px;
    vertical-align: middle;
    margin-right: 8px;
}

.menu-size {
    display: inline-block;
    width: 24px; /* Standardized size for menu icons */
    height: 24px;
    vertical-align: middle;
    margin-right: 8px;
}

/* Icon classes with SVG background images */

/* Admin icon (used in branding) */
.icon-admin {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='currentColor' d='M256 48C141.1 48 48 141.1 48 256l0 40c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-40C0 114.6 114.6 0 256 0S512 114.6 512 256l0 144.1c0 48.6-39.4 88-88.1 88L313.6 488c-8.3 14.3-23.8 24-41.6 24l-32 0c-26.5 0-48-21.5-48-48s21.5-48 48-48l32 0c17.8 0 33.3 9.7 41.6 24l110.4 .1c22.1 0 40-17.9 40-40L464 256c0-114.9-93.1-208-208-208zM144 208l16 0c17.7 0 32 14.3 32 32l0 112c0 17.7-14.3 32-32 32l-16 0c-35.3 0-64-28.7-64-64l0-48c0-35.3 28.7-64 64-64zm224 0c35.3 0 64 28.7 64 64l0 48c0 35.3-28.7 64-64 64l-16 0c-17.7 0-32-14.3-32-32l0-112c0-17.7 14.3-32 32-32l16 0z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Merchant icon (used in both branding and menu) */
.icon-merchant {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='currentColor' d='M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Community icon (used in both branding and menu) */
.icon-community {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 512'%3E%3Cpath fill='currentColor' d='M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Partner icon (used in both branding and menu) */
.icon-partner {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='currentColor' d='M512 256c0 .9 0 1.8 0 2.7c-.4 36.5-33.6 61.3-70.1 61.3L344 320c-26.5 0-48 21.5-48 48c0 3.4 .4 6.7 1 9.9c2.1 10.2 6.5 20 10.8 29.9c6.1 13.8 12.1 27.5 12.1 42c0 31.8-21.6 60.7-53.4 62c-3.5 .1-7 .2-10.6 .2C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM128 288a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm0-96a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM288 96a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm96 96a32 32 0 1 0 0-64 32 32 0 1 0 0 64z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Favicon icon */
.icon-favicon {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='black' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Amazon UK Icon */
.icon-amazon-uk {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='currentColor' d='M257.2 162.7c-48.7 1.8-169.5 15.5-169.5 117.5 0 109.5 138.3 114 183.5 43.2 6.5 10.2 35.4 37.5 45.3 46.8l56.8-56S341 288.9 341 261.4V114.3C341 89 316.5 32 228.7 32 140.7 32 94 87 94 136.3l73.5 6.8c16.3-49.5 54.2-49.5 54.2-49.5 40.7-.1 35.5 29.8 35.5 69.1zm0 86.8c0 80-84.2 68-84.2 17.2 0-47.2 50.5-56.7 84.2-57.8v40.6zm136 163.5c-7.7 10-70 67-174.5 67S34.2 408.5 9.7 379c-6.8-7.7 1-11.3 5.5-8.3C88.5 415.2 203 488.5 387.7 401c7.5-3.7 13.3 2 5.5 12zm39.8 2.2c-6.5 15.8-16 26.8-21.2 31-5.5 4.5-9.5 2.7-6.5-3.8s19.3-46.5 12.7-55c-6.5-8.3-37-4.3-48-3.2-10.8 1-13 2-14-.3-2.3-5.7 21.7-15.5 37.5-17.5 15.7-1.8 41-.8 46 5.7 3.7 5.1 0 27.1-6.5 43.1z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
    display: inline-block;
    width: 24px; /* Standardized size */
    height: 24px;
    vertical-align: middle;
}

/* eBay UK Icon */
.icon-ebay-uk {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 512'%3E%3Cpath fill='currentColor' d='M606 189.5l-54.8 109.9-54.9-109.9h-37.5l10.9 20.6c-11.5-19-35.9-26-63.3-26-31.8 0-67.9 8.7-71.5 43.1h33.7c1.4-13.8 15.7-21.8 35-21.8 26 0 41 9.6 41 33v3.4c-12.7 0-28 .1-41.7 .4-42.4 .9-69.6 10-76.7 34.4 1-5.2 1.5-10.6 1.5-16.2 0-52.1-39.7-76.2-75.4-76.2-21.3 0-43 5.5-58.7 24.2v-80.6h-32.1v169.5c0 10.3-.6 22.9-1.1 33.1h31.5c.7-6.3 1.1-12.9 1.1-19.5 13.6 16.6 35.4 24.9 58.7 24.9 36.9 0 64.9-21.9 73.3-54.2-.5 2.8-.7 5.8-.7 9 0 24.1 21.1 45 60.6 45 26.6 0 45.8-5.7 61.9-25.5 0 6.6 .3 13.3 1.1 20.2h29.8c-.7-8.2-1-17.5-1-26.8v-65.6c0-9.3-1.7-17.2-4.8-23.8l61.5 116.1-28.5 54.1h35.9L640 189.5zM243.7 313.8c-29.6 0-50.2-21.5-50.2-53.8 0-32.4 20.6-53.8 50.2-53.8 29.8 0 50.2 21.4 50.2 53.8 0 32.3-20.4 53.8-50.2 53.8zm200.9-47.3c0 30-17.9 48.4-51.6 48.4-25.1 0-35-13.4-35-25.8 0-19.1 18.1-24.4 47.2-25.3 13.1-.5 27.6-.6 39.4-.6zm-411.9 1.6h128.8v-8.5c0-51.7-33.1-75.4-78.4-75.4-56.8 0-83 30.8-83 77.6 0 42.5 25.3 74 82.5 74 31.4 0 68-11.7 74.4-46.1h-33.1c-12 35.8-87.7 36.7-91.2-21.6zm95-21.4H33.3c6.9-56.6 92.1-54.7 94.4 0z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
    display: inline-block;
    width: 24px; /* Standardized size */
    height: 24px;
    vertical-align: middle;
}


/* Wix Icon */
.icon-wix::before {
    display: inline-block;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 700 400"><path fill="currentColor" d="M393.4 131.7c0 13 2.1 32.7-28.7 43.8-9.5 3.5-16 9.7-16 9.7 0-31 4.7-42.2 17.4-48.9 9.8-5.1 27.2-4.6 27.2-4.6zm-115.8 35.5l-34.2 132.7-28.5-108.6c-7.7-32-20.8-48.5-48.4-48.5-27.4 0-40.7 16.2-48.4 48.5L89.5 299.9 55.3 167.2C49.7 140.5 23.9 129 0 132l65.6 247.9s21.6 1.6 32.5-4c14.2-7.3 21-12.8 29.6-46.6 7.7-30.1 29.1-118.4 31.1-124.7 4.8-14.9 11.1-13.8 15.4 0 2 6.3 23.5 94.6 31.1 124.7 8.6 33.7 15.4 39.3 29.6 46.6 10.8 5.5 32.5 4 32.5 4l65.6-247.9c-24.4-3.1-49.8 8.9-55.3 35.3zm115.8 5.2s-4.1 6.3-13.5 11.6c-6 3.4-11.8 5.6-18 8.6-15.1 7.3-13.2 14-13.2 35.2v152.1s16.6 2.1 27.4-3.4c13.9-7.1 17.1-14 17.3-44.8V181.4l0 0v-9zm163.4 84.1L640 132.8s-35.1-6-52.5 9.9c-13.3 12.1-24.4 29.6-54.2 72.5-.5 .7-6.3 10.5-13.1 0-29.3-42.2-40.8-60.3-54.2-72.5-17.4-15.8-52.5-9.9-52.5-9.9l83.2 123.7-83 123.4s36.6 4.6 54-11.2c11.5-10.5 17.6-20.4 52.5-70.7 6.8-10.5 12.6-.8 13.1 0 29.4 42.4 39.2 58.1 53.1 70.7 17.4 15.8 53.3 11.2 53.3 11.2L556.8 256.5z"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
    content: "";
    width: 100%; /* Takes the width of the <i> element */
    height: 100%; /* Takes the height of the <i> element */
    vertical-align: middle; /* Aligns with text */
}

/* WordPress Icon */
.icon-wordpress::before {
    content: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M61.7 169.6l-49.7 185.5c42.3 76.8 119.2 129.9 208.8 129.9 26.5 0 52.1-5 76-14.1L314 448l30.8-102.8 22-74.4-59-165.5c-24.7-5-50.8-7.6-77.8-7.6-42.8 0-82.8 11.7-116.3 32zm428.9 36.4C476 127.5 413.9 70.5 336 61.7L246.5 288l70.2 66.1zm-88.1-98.9c16.8 2.3 33 7.6 48 15.8 11.4 6.3 21.8 14.5 30.8 24.2 6.5 7 12 14.8 16.4 23.2 15.2 29.7 23.2 61.9 23.2 94.8 0 46-18.8 87.8-50 117-2.8-66-27-126-67.8-171.8zm-149.3 47.5c25.5 0 46 19 46 42.5s-20.5 42.5-46 42.5-46-19-46-42.5 20.5-42.5 46-42.5zm149.2 187.9l-33.8-100-42.5-112.9c-16.8-2-33.8-2.8-51-2.8-52.2 0-100.5 16.5-139.5 44.5l52.2 154.9c42-27.2 92.2-42.8 141.5-42.8 24.2 0 47.8 3.8 73.2 11.2zm-196-94.9c-25.5 0-46-19-46-42.5s20.5-42.5 46-42.5 46 19 46 42.5-20.5 42.5-46 42.5zm-90.5-42.5c0-23.5 20.5-42.5 46-42.5s46 19 46 42.5-20.5 42.5-46 42.5-46-19-46-42.5zm-61.8-85.8C36.2 165 0 223 0 288c0 141.4 114.6 256 256 256 90.8 0 171-47.5 216.5-119.5-45-15-93-23.5-142.5-23.5-66.5 0-129.2 21-181.2 59.8L112 344.5l13.8-51.5L209 64C148.2 64 94 99.8 61.7 149.8z"/></svg>');
    display: inline-block;
    object-fit: contain;
    vertical-align: middle;
    width: 24px; /* Standardized size */
    height: 24px;
}

/* Squarespace Icon */
.icon-squarespace::before {
    content: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M186.5 235.8c-24.7-24.7-64.8-24.7-89.5 0L73.2 259.5c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.8c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.7zm66.1-66.1c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.8c-24.7-24.7-64.8-24.7-89.5 0L188.8 56.5c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.7zm66.1 66.1c-24.7-24.7-64.8-24.7-89.5 0l-23.8 23.8c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.8c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.8zm66.1 66.1c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.8c-24.7-24.7-64.8-24.7-89.5 0l-23.8 23.8c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.8z"/></svg>');
    display: inline-block;
    object-fit: contain;
    vertical-align: middle;
    width: 24px; /* Standardized size */
    height: 24px;
}

/* Weebly Icon */
.icon-weebly::before {
    content: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M435.8 123.5c-8.6-12.2-21.8-19.8-37-21.8-17.8-2.3-35.8 2.3-50 13-14.2-10.8-32.2-15.4-50-13-15.2 2-28.4 9.6-37 21.8-8.8 12.5-11 28-6 42.2 8 22.8 28.4 38 55 40 2 .2 4 .2 6 0 26.6-2 47-17.2 55-40 5-14.2 2.8-29.8-6-42.2zM256 235.8c-26.6-2-47-17.2-55-40-5-14.2-2.8-29.8 6-42.2 8.6-12.2 21.8-19.8 37-21.8 17.8-2.3 35.8 2.3 50 13 14.2-10.8 32.2-15.4 50-13 15.2 2 28.4 9.6 37 21.8 8.8 12.5 11 28 6 42.2-8 22.8-28.4 38-55 40-2 .2-4 .2-6 0-26.6-2-47-17.2-55-40zm-163.8 0c-26.6-2-47-17.2-55-40-5-14.2-2.8-29.8 6-42.2 8.6-12.2 21.8-19.8 37-21.8 17.8-2.3 35.8 2.3 50 13 14.2-10.8 32.2-15.4 50-13 15.2 2 28.4 9.6 37 21.8 8.8 12.5 11 28 6 42.2-8 22.8-28.4 38-55 40-2 .2-4 .2-6 0-26.6-2-47-17.2-55-40zm-12 97l47 179h40l-47-179H80zm163.8 0l47 179h40l-47-179h-40zm163.8 0l47 179h40l-47-179h-40z"/></svg>');
    display: inline-block;
    object-fit: contain;
    vertical-align: middle;
    width: 24px; /* Standardized size */
    height: 24px;
}

/* Joomla Icon */
.icon-joomla::before {
    content: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M243.3 154.8c-10.5-10.5-27.6-10.5-38.1 0l-19 19-95.2-95.2c28-34.2 67-57 110.9-65.5C141.2 56.9 98.8 112.8 98.8 176c0 19.7 4.9 38.3 13.5 54.6l-90 90c-15.5-27-24.3-58.5-24.3-92 0-106 86-192 192-192 33.5 0 65 8.6 92 23.7l-30.7 30.7zm-41.4 83.5c10.5 10.5 27.6 10.5 38.1 0l19-19 95.2 95.2c-28 34.2-67 57-110.9 65.5 60.8-43.8 103.2-99.7 103.2-163 0-19.7-4.9-38.3-13.5-54.6l90-90c15.5 27 24.3 58.5 24.3 92 0 106-86 192-192 192-33.5 0-65-8.6-92-23.7l30.7-30.7zm-19-133.6l-30.7-30.7C125 58.9 93.5 50.3 60 50.3c-33.5 0-65 8.6-92 23.7l90 90c-8.6-16.3-13.5-34.9-13.5-54.6 0-63.2 42.4-119.1 103.2-163-43.9 8.5-82.9 31.3-110.9 65.5l95.2 95.2 19-19c10.5-10.5 10.5-27.6 0-38.1zm133.6 209.1l30.7 30.7c27-15.1 58.5-23.7 92-23.7 106 0 192-86 192-192 0-33.5-8.6-65-23.7-92l-90 90c8.6 16.3 13.5 34.9 13.5 54.6 0 63.2-42.4 119.1-103.2 163 43.9-8.5 82.9-31.3 110.9-65.5l-95.2-95.2-19 19c-10.5 10.5-10.5 27.6 0 38.1z"/></svg>');
    display: inline-block;
    object-fit: contain;
    vertical-align: middle;
    width: 24px; /* Standardized size */
    height: 24px;
}

/* BigCommerce Icon (House-like) */
.icon-bigcommerce::before {
    display: inline-block;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 60 60"><path fill="currentColor" d="M33.72 36.432h8.073c2.296 0 3.75-1.263 3.75-3.3 0-1.913-1.454-3.3-3.75-3.3H33.72c-.268 0-.497.23-.497.46v5.663c.038.268.23.46.497.46zm0 13.048h8.34c2.564 0 4.094-1.3 4.094-3.597 0-2-1.454-3.597-4.094-3.597h-8.34c-.268 0-.497.23-.497.46v6.237c.038.306.23.497.497.497zM63.257.16l-23.875 23.8h3.903c6.084 0 9.68 3.826 9.68 7.997 0 3.3-2.22 5.7-4.6 6.772-.383.153-.383.7.038.842 2.755 1.07 4.706 3.94 4.706 7.308 0 4.744-3.176 8.532-9.336 8.532H26.87c-.268 0-.497-.23-.497-.46V36.93L.164 63.023c-.344.344-.115.957.383.957h63.016c.23 0 .42-.2.42-.42V.505c.115-.42-.42-.65-.727-.344z"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
    content: "";
    width: 100%; /* Takes the width of the <i> element */
    height: 100%; /* Takes the height of the <i> element */
    vertical-align: middle; /* Aligns with text */
    content: ""; /* Required for ::before to render */
}
  
/* WooCommerce Icon (Shopping Bag) */
.icon-woocommerce::before {
    display: inline-block;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path fill="currentColor" d="M204.848 655.616v149.312c-1.488 21.392-10 38.432-25.648 54.064-15.6 15.648-45.456 24.16-69.616 24.16H74.032c-22.768 0-32.768-11.392-49.808-26.992C10 841.952 1.44 826.304.048 806.4h128V274.496c0-22.72 8.56-42.672 25.552-58.272 17.088-15.696 46.944-24.16 69.712-24.16h476.384c22.72 0 32.72 11.344 49.808 26.992 14.16 14.256 22.688 29.904 24.16 49.808H204.816v78.192c7.072-1.44 12.784-1.44 18.464-1.44h520.512c24.16 0 95.264 12.832 112.352 29.904 17.04 15.648 28.432 31.248 39.824 55.408L1023.92 725.36c0 22.72-9.904 42.624-27.04 58.272-17.04 15.648-26.992 22.768-49.76 22.768H223.312c-5.696 0-11.392 0-18.464-1.488v-75.376h742.304l-128-307.2-614.304.016v233.264zM614.4 76.816c0-35.552 28.48-63.984 64.032-63.984s63.984 28.432 63.984 63.984-28.432 63.984-63.984 63.984S614.4 112.368 614.4 76.816zm-511.952 0c0-35.552 28.432-63.984 63.984-63.984s63.984 28.432 63.984 63.984-28.432 63.984-63.984 63.984-63.984-28.432-63.984-63.984z"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
    content: "";
    width: 100%; /* Takes the width of the <i> element */
    height: 100%; /* Takes the height of the <i> element */
    vertical-align: middle; /* Aligns with text */
    transform: rotate(180deg); /* Flip the icon upright */
    transform-origin: center; /* Ensure it rotates around its center */
}
/* Shopify Icon (Stylized S/Arrow) */
.icon-shopify::before {
    display: inline-block;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M388.3 104.1a4.7 4.7 0 0 0 -4.4-4c-2 0-37.2-.8-37.2-.8s-21.6-20.8-29.6-28.8V503.2L442.8 472S388.7 106.5 388.3 104.1zM288.7 70.5a116.7 116.7 0 0 0 -7.2-17.6C271 32.9 255.4 22 237 22a15 15 0 0 0 -4 .4c-.4-.8-1.2-1.2-1.6-2C223.4 11.6 213 7.6 200.6 8c-24 .8-48 18-67.3 48.8-13.6 21.6-24 48.8-26.8 70.1-27.6 8.4-46.8 14.4-47.2 14.8-14 4.4-14.4 4.8-16 18-1.2 10-38 291.8-38 291.8L307.9 504V65.7a41.7 41.7 0 0 0 -4.4 .4S297.9 67.7 288.7 70.5zM233.4 87.7c-16 4.8-33.6 10.4-50.8 15.6 4.8-18.8 14.4-37.6 25.6-50 4.4-4.4 10.4-9.6 17.2-12.8C232.2 54.9 233.8 74.5 233.4 87.7zM200.6 24.4A27.5 27.5 0 0 1 215 28c-6.4 3.2-12.8 8.4-18.8 14.4-15.2 16.4-26.8 42-31.6 66.5-14.4 4.4-28.8 8.8-42 12.8C131.3 83.3 163.8 25.2 200.6 24.4zM154.2 244.6c1.6 25.6 69.3 31.2 73.3 91.7 2.8 47.6-25.2 80.1-65.7 82.5-48.8 3.2-75.7-25.6-75.7-25.6l10.4-44s26.8 20.4 48.4 18.8c14-.8 19.2-12.4 18.8-20.4-2-33.6-57.2-31.6-60.8-86.9-3.2-46.4 27.2-93.3 94.5-97.7 26-1.6 39.2 4.8 39.2 4.8L221.4 225.4s-17.2-8-37.6-6.4C154.2 221 153.8 239.8 154.2 244.6zM249.4 82.9c0-12-1.6-29.2-7.2-43.6 18.4 3.6 27.2 24 31.2 36.4Q262.6 78.7 249.4 82.9z"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
    content: "";
    width: 100%; /* Takes the width of the <i> element */
    height: 100%; /* Takes the height of the <i> element */
    vertical-align: middle; /* Aligns with text */
}
/* Magento Icon (Multi-shape) */
.icon-magento::before {
    display: inline-block;
    background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M445.7 127.9V384l-63.4 36.5V164.7L223.8 73.1 65.2 164.7l.4 255.9L2.3 384V128.1L224.2 0l221.5 127.9zM255.6 420.5L224 438.9l-31.8-18.2v-256l-63.3 36.6 .1 255.9 94.9 54.9 95.1-54.9v-256l-63.4-36.6v255.9z"/></svg>');
    background-size: contain;
    background-repeat: no-repeat;
    content: "";
    width: 100%; /* Takes the width of the <i> element */
    height: 100%; /* Takes the height of the <i> element */
    vertical-align: middle; /* Aligns with text */
}
css/icons.css
/* icons.css */

/* Size classes for branding and menu icons (unchanged) */
.branding-size { display: inline-block; width: 100px; height: 80px; vertical-align: middle; margin-right: 8px; }
.menu-size { display: inline-block; width: 24px; /* Standardized size for menu icons */ height: 24px; vertical-align: middle; margin-right: 8px; }

/* Base styles for all icons */
.icon-admin, .icon-merchant, .icon-community, .icon-partner, .icon-amazon-uk, .icon-ebay-uk, .icon-awin::before, .icon-cj::before, .icon-wix, .icon-wordpress, .icon-squarespace, .icon-weebly, .icon-joomla, .icon-bigcommerce, .icon-woocommerce, .icon-shopify, .icon-magento, .icon-textmagic, .icon-tiny, .woo-cart-icon, .custom-icon { display: inline-block; vertical-align: middle; /* Aligns the <i> with surrounding text */ }
.icon-admin::before, .icon-merchant::before, .icon-community::before, .icon-partner::before, .icon-amazon-uk::before, .icon-ebay-uk::before, .icon-awin::before, .icon-cj::before, .icon-wix::before, .icon-wordpress::before, .icon-squarespace::before, .icon-weebly::before, .icon-joomla::before, .icon-bigcommerce::before, .icon-woocommerce::before, .icon-shopify::before, .icon-magento::before, .icon-textmagic::before, .icon-tiny::before, .woo-cart-icon::before, .custom-icon::before { display: block; /* Fills the <i> container */ background-size: contain; background-repeat: no-repeat; content: ""; width: 100%; /* Takes the width of the <i> element */ height: 100%; /* Takes the height of the <i> element */ }

/* Admin icon (used in branding) */
.icon-admin::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='currentColor' d='M256 48C141.1 48 48 141.1 48 256l0 40c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-40C0 114.6 114.6 0 256 0S512 114.6 512 256l0 144.1c0 48.6-39.4 88-88.1 88L313.6 488c-8.3 14.3-23.8 24-41.6 24l-32 0c-26.5 0-48-21.5-48-48s21.5-48 48-48l32 0c17.8 0 33.3 9.7 41.6 24l110.4 .1c22.1 0 40-17.9 40-40L464 256c0-114.9-93.1-208-208-208zM144 208l16 0c17.7 0 32 14.3 32 32l0 112c0 17.7-14.3 32-32 32l-16 0c-35.3 0-64-28.7-64-64l0-48c0-35.3 28.7-64 64-64zm224 0c35.3 0 64 28.7 64 64l0 48c0 35.3-28.7 64-64 64l-16 0c-17.7 0-32-14.3-32-32l0-112c0-17.7 14.3-32 32-32l16 0z'/%3E%3C/svg%3E"); }

/* Merchant icon (used in both branding and menu) */
.icon-merchant::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='currentColor' d='M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z'/%3E%3C/svg%3E"); }

/* Community icon (used in both branding and menu) */
.icon-community::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 512'%3E%3Cpath fill='currentColor' d='M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z'/%3E%3C/svg%3E"); }

/* Partner icon (used in both branding and menu) */
.icon-partner::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='currentColor' d='M512 256c0 .9 0 1.8 0 2.7c-.4 36.5-33.6 61.3-70.1 61.3L344 320c-26.5 0-48 21.5-48 48c0 3.4 .4 6.7 1 9.9c2.1 10.2 6.5 20 10.8 29.9c6.1 13.8 12.1 27.5 12.1 42c0 31.8-21.6 60.7-53.4 62c-3.5 .1-7 .2-10.6 .2C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM128 288a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm0-96a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM288 96a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm96 96a32 32 0 1 0 0-64 32 32 0 1 0 0 64z'/%3E%3C/svg%3E"); }

/* Updated Awin icon */
.icon-awin::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M4 20h4l4-12 4 12h4L14 4h-4z M10 12h4v4h-4z'/%3E%3C/svg%3E"); }

/* Updated CJ icon */
.icon-cj::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24'%3E%3Cpath fill='currentColor' d='M18 4H8a8 8 0 0 0 0 16h10a8 8 0 0 0 0-16z m-2 12a4 4 0 0 1 0-8z'/%3E%3C/svg%3E"); }

/* Amazon UK Icon */
.icon-amazon-uk::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='currentColor' d='M257.2 162.7c-48.7 1.8-169.5 15.5-169.5 117.5 0 109.5 138.3 114 183.5 43.2 6.5 10.2 35.4 37.5 45.3 46.8l56.8-56S341 288.9 341 261.4V114.3C341 89 316.5 32 228.7 32 140.7 32 94 87 94 136.3l73.5 6.8c16.3-49.5 54.2-49.5 54.2-49.5 40.7-.1 35.5 29.8 35.5 69.1zm0 86.8c0 80-84.2 68-84.2 17.2 0-47.2 50.5-56.7 84.2-57.8v40.6zm136 163.5c-7.7 10-70 67-174.5 67S34.2 408.5 9.7 379c-6.8-7.7 1-11.3 5.5-8.3C88.5 415.2 203 488.5 387.7 401c7.5-3.7 13.3 2 5.5 12zm39.8 2.2c-6.5 15.8-16 26.8-21.2 31-5.5 4.5-9.5 2.7-6.5-3.8s19.3-46.5 12.7-55c-6.5-8.3-37-4.3-48-3.2-10.8 1-13 2-14-.3-2.3-5.7 21.7-15.5 37.5-17.5 15.7-1.8 41-.8 46 5.7 3.7 5.1 0 27.1-6.5 43.1z'/%3E%3C/svg%3E"); }

/* eBay UK Icon */
.icon-ebay-uk::before { background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 512'%3E%3Cpath fill='currentColor' d='M606 189.5l-54.8 109.9-54.9-109.9h-37.5l10.9 20.6c-11.5-19-35.9-26-63.3-26-31.8 0-67.9 8.7-71.5 43.1h33.7c1.4-13.8 15.7-21.8 35-21.8 26 0 41 9.6 41 33v3.4c-12.7 0-28 .1-41.7 .4-42.4 .9-69.6 10-76.7 34.4 1-5.2 1.5-10.6 1.5-16.2 0-52.1-39.7-76.2-75.4-76.2-21.3 0-43 5.5-58.7 24.2v-80.6h-32.1v169.5c0 10.3-.6 22.9-1.1 33.1h31.5c.7-6.3 1.1-12.9 1.1-19.5 13.6 16.6 35.4 24.9 58.7 24.9 36.9 0 64.9-21.9 73.3-54.2-.5 2.8-.7 5.8-.7 9 0 24.1 21.1 45 60.6 45 26.6 0 45.8-5.7 61.9-25.5 0 6.6 .3 13.3 1.1 20.2h29.8c-.7-8.2-1-17.5-1-26.8v-65.6c0-9.3-1.7-17.2-4.8-23.8l61.5 116.1-28.5 54.1h35.9L640 189.5zM243.7 313.8c-29.6 0-50.2-21.5-50.2-53.8 0-32.4 20.6-53.8 50.2-53.8 29.8 0 50.2 21.4 50.2 53.8 0 32.3-20.4 53.8-50.2 53.8zm200.9-47.3c0 30-17.9 48.4-51.6 48.4-25.1 0-35-13.4-35-25.8 0-19.1 18.1-24.4 47.2-25.3 13.1-.5 27.6-.6 39.4-.6zm-411.9 1.6h128.8v-8.5c0-51.7-33.1-75.4-78.4-75.4-56.8 0-83 30.8-83 77.6 0 42.5 25.3 74 82.5 74 31.4 0 68-11.7 74.4-46.1h-33.1c-12 35.8-87.7 36.7-91.2-21.6zm95-21.4H33.3c6.9-56.6 92.1-54.7 94.4 0z'/%3E%3C/svg%3E"); }

/* Wix Icon */
.icon-wix::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 700 400"><path fill="currentColor" d="M393.4 131.7c0 13 2.1 32.7-28.7 43.8-9.5 3.5-16 9.7-16 9.7 0-31 4.7-42.2 17.4-48.9 9.8-5.1 27.2-4.6 27.2-4.6zm-115.8 35.5l-34.2 132.7-28.5-108.6c-7.7-32-20.8-48.5-48.4-48.5-27.4 0-40.7 16.2-48.4 48.5L89.5 299.9 55.3 167.2C49.7 140.5 23.9 129 0 132l65.6 247.9s21.6 1.6 32.5-4c14.2-7.3 21-12.8 29.6-46.6 7.7-30.1 29.1-118.4 31.1-124.7 4.8-14.9 11.1-13.8 15.4 0 2 6.3 23.5 94.6 31.1 124.7 8.6 33.7 15.4 39.3 29.6 46.6 10.8 5.5 32.5 4 32.5 4l65.6-247.9c-24.4-3.1-49.8 8.9-55.3 35.3zm115.8 5.2s-4.1 6.3-13.5 11.6c-6 3.4-11.8 5.6-18 8.6-15.1 7.3-13.2 14-13.2 35.2v152.1s16.6 2.1 27.4-3.4c13.9-7.1 17.1-14 17.3-44.8V181.4l0 0v-9zm163.4 84.1L640 132.8s-35.1-6-52.5 9.9c-13.3 12.1-24.4 29.6-54.2 72.5-.5 .7-6.3 10.5-13.1 0-29.3-42.2-40.8-60.3-54.2-72.5-17.4-15.8-52.5-9.9-52.5-9.9l83.2 123.7-83 123.4s36.6 4.6 54-11.2c11.5-10.5 17.6-20.4 52.5-70.7 6.8-10.5 12.6-.8 13.1 0 29.4 42.4 39.2 58.1 53.1 70.7 17.4 15.8 53.3 11.2 53.3 11.2L556.8 256.5z"/></svg>'); }

/* WordPress Icon */
.icon-wordpress::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M61.7 169.6l-49.7 185.5c42.3 76.8 119.2 129.9 208.8 129.9 26.5 0 52.1-5 76-14.1L314 448l30.8-102.8 22-74.4-59-165.5c-24.7-5-50.8-7.6-77.8-7.6-42.8 0-82.8 11.7-116.3 32zm428.9 36.4C476 127.5 413.9 70.5 336 61.7L246.5 288l70.2 66.1zm-88.1-98.9c16.8 2.3 33 7.6 48 15.8 11.4 6.3 21.8 14.5 30.8 24.2 6.5 7 12 14.8 16.4 23.2 15.2 29.7 23.2 61.9 23.2 94.8 0 46-18.8 87.8-50 117-2.8-66-27-126-67.8-171.8zm-149.3 47.5c25.5 0 46 19 46 42.5s-20.5 42.5-46 42.5-46-19-46-42.5 20.5-42.5 46-42.5zm149.2 187.9l-33.8-100-42.5-112.9c-16.8-2-33.8-2.8-51-2.8-52.2 0-100.5 16.5-139.5 44.5l52.2 154.9c42-27.2 92.2-42.8 141.5-42.8 24.2 0 47.8 3.8 73.2 11.2zm-196-94.9c-25.5 0-46-19-46-42.5s20.5-42.5 46-42.5 46 19 46 42.5-20.5 42.5-46 42.5zm-90.5-42.5c0-23.5 20.5-42.5 46-42.5s46 19 46 42.5-20.5 42.5-46 42.5-46-19-46-42.5zm-61.8-85.8C36.2 165 0 223 0 288c0 141.4 114.6 256 256 256 90.8 0 171-47.5 216.5-119.5-45-15-93-23.5-142.5-23.5-66.5 0-129.2 21-181.2 59.8L112 344.5l13.8-51.5L209 64C148.2 64 94 99.8 61.7 149.8z"/></svg>'); }

/* Squarespace Icon */
.icon-squarespace::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><path fill="currentColor" d="M186.5 235.8c-24.7-24.7-64.8-24.7-89.5 0L73.2 259.5c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.8c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.7zm66.1-66.1c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.8c-24.7-24.7-64.8-24.7-89.5 0L188.8 56.5c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.7zm66.1 66.1c-24.7-24.7-64.8-24.7-89.5 0l-23.8 23.8c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.8c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.8zm66.1 66.1c24.7 24.7 64.8 24.7 89.5 0l23.8-23.8c24.7-24.7 24.7-64.8 0-89.5l-23.8-23.8c-24.7-24.7-64.8-24.7-89.5 0l-23.8 23.8c-24.7 24.7-24.7 64.8 0 89.5l23.8 23.8z"/></svg>'); }

/* Weebly Icon */
.icon-weebly::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M435.8 123.5c-8.6-12.2-21.8-19.8-37-21.8-17.8-2.3-35.8 2.3-50 13-14.2-10.8-32.2-15.4-50-13-15.2 2-28.4 9.6-37 21.8-8.8 12.5-11 28-6 42.2 8 22.8 28.4 38 55 40 2 .2 4 .2 6 0 26.6-2 47-17.2 55-40 5-14.2 2.8-29.8-6-42.2zM256 235.8c-26.6-2-47-17.2-55-40-5-14.2-2.8-29.8 6-42.2 8.6-12.2 21.8-19.8 37-21.8 17.8-2.3 35.8 2.3 50 13 14.2-10.8 32.2-15.4 50-13 15.2 2 28.4 9.6 37 21.8 8.8 12.5 11 28 6 42.2-8 22.8-28.4 38-55 40-2 .2-4 .2-6 0-26.6-2-47-17.2-55-40zm-163.8 0c-26.6-2-47-17.2-55-40-5-14.2-2.8-29.8 6-42.2 8.6-12.2 21.8-19.8 37-21.8 17.8-2.3 35.8 2.3 50 13 14.2-10.8 32.2-15.4 50-13 15.2 2 28.4 9.6 37 21.8 8.8 12.5 11 28 6 42.2-8 22.8-28.4 38-55 40-2 .2-4 .2-6 0-26.6-2-47-17.2-55-40zm-12 97l47 179h40l-47-179H80zm163.8 0l47 179h40l-47-179h-40zm163.8 0l47 179h40l-47-179h-40z"/></svg>'); }

/* Joomla Icon */
.icon-joomla::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M243.3 154.8c-10.5-10.5-27.6-10.5-38.1 0l-19 19-95.2-95.2c28-34.2 67-57 110.9-65.5C141.2 56.9 98.8 112.8 98.8 176c0 19.7 4.9 38.3 13.5 54.6l-90 90c-15.5-27-24.3-58.5-24.3-92 0-106 86-192 192-192 33.5 0 65 8.6 92 23.7l-30.7 30.7zm-41.4 83.5c10.5 10.5 27.6 10.5 38.1 0l19-19 95.2 95.2c-28 34.2-67 57-110.9 65.5 60.8-43.8 103.2-99.7 103.2-163 0-19.7-4.9-38.3-13.5-54.6l90-90c15.5 27 24.3 58.5 24.3 92 0 106-86 192-192 192-33.5 0-65-8.6-92-23.7l30.7-30.7zm-19-133.6l-30.7-30.7C125 58.9 93.5 50.3 60 50.3c-33.5 0-65 8.6-92 23.7l90 90c-8.6-16.3-13.5-34.9-13.5-54.6 0-63.2 42.4-119.1 103.2-163-43.9 8.5-82.9 31.3-110.9 65.5l95.2 95.2 19-19c10.5-10.5 10.5-27.6 0-38.1zm133.6 209.1l30.7 30.7c27-15.1 58.5-23.7 92-23.7 106 0 192-86 192-192 0-33.5-8.6-65-23.7-92l-90 90c8.6 16.3 13.5 34.9 13.5 54.6 0 63.2-42.4 119.1-103.2 163 43.9-8.5 82.9-31.3 110.9-65.5l-95.2-95.2-19 19c-10.5 10.5-10.5 27.6 0 38.1z"/></svg>'); }

/* BigCommerce Icon (House-like) */
.icon-bigcommerce::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 60 60"><path fill="currentColor" d="M33.72 36.432h8.073c2.296 0 3.75-1.263 3.75-3.3 0-1.913-1.454-3.3-3.75-3.3H33.72c-.268 0-.497.23-.497.46v5.663c.038.268.23.46.497.46zm0 13.048h8.34c2.564 0 4.094-1.3 4.094-3.597 0-2-1.454-3.597-4.094-3.597h-8.34c-.268 0-.497.23-.497.46v6.237c.038.306.23.497.497.497zM63.257.16l-23.875 23.8h3.903c6.084 0 9.68 3.826 9.68 7.997 0 3.3-2.22 5.7-4.6 6.772-.383.153-.383.7.038.842 2.755 1.07 4.706 3.94 4.706 7.308 0 4.744-3.176 8.532-9.336 8.532H26.87c-.268 0-.497-.23-.497-.46V36.93L.164 63.023c-.344.344-.115.957.383.957h63.016c.23 0 .42-.2 .42-.42V.505c.115-.42-.42-.65-.727-.344z"/></svg>'); }

/* WooCommerce Icon (Shopping Bag) */
.icon-woocommerce::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path fill="currentColor" d="M204.848 655.616v149.312c-1.488 21.392-10 38.432-25.648 54.064-15.6 15.648-45.456 24.16-69.616 24.16H74.032c-22.768 0-32.768-11.392-49.808-26.992C10 841.952 1.44 826.304.048 806.4h128V274.496c0-22.72 8.56-42.672 25.552-58.272 17.088-15.696 46.944-24.16 69.712-24.16h476.384c22.72 0 32.72 11.344 49.808 26.992 14.16 14.256 22.688 29.904 24.16 49.808H204.816v78.192c7.072-1.44 12.784-1.44 18.464-1.44h520.512c24.16 0 95.264 12.832 112.352 29.904 17.04 15.648 28.432 31.248 39.824 55.408L1023.92 725.36c0 22.72-9.904 42.624-27.04 58.272-17.04 15.648-26.992 22.768-49.76 22.768H223.312c-5.696 0-11.392 0-18.464-1.488v-75.376h742.304l-128-307.2-614.304.016v233.264zM614.4 76.816c0-35.552 28.48-63.984 64.032-63.984s63.984 28.432 63.984 63.984-28.432 63.984-63.984 63.984S614.4 112.368 614.4 76.816zm-511.952 0c0-35.552 28.432-63.984 63.984-63.984s63.984 28.432 63.984 63.984-28.432 63.984-63.984 63.984-63.984-28.432-63.984-63.984z"/></svg>'); transform: rotate(180deg); /* Flip the icon upright */ transform-origin: center; /* Ensure it rotates around its center */ }

/* Shopify Icon (Stylized S/Arrow) */
.icon-shopify::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M388.3 104.1a4.7 4.7 0 0 0 -4.4-4c-2 0-37.2-.8-37.2-.8s-21.6-20.8-29.6-28.8V503.2L442.8 472S388.7 106.5 388.3 104.1zM288.7 70.5a116.7 116.7 0 0 0 -7.2-17.6C271 32.9 255.4 22 237 22a15 15 0 0 0 -4 .4c-.4-.8-1.2-1.2-1.6-2C223.4 11.6 213 7.6 200.6 8c-24 .8-48 18-67.3 48.8-13.6 21.6-24 48.8-26.8 70.1-27.6 8.4-46.8 14.4-47.2 14.8-14 4.4-14.4 4.8-16 18-1.2 10-38 291.8-38 291.8L307.9 504V65.7a41.7 41.7 0 0 0 -4.4 .4S297.9 67.7 288.7 70.5zM233.4 87.7c-16 4.8-33.6 10.4-50.8 15.6 4.8-18.8 14.4-37.6 25.6-50 4.4-4.4 10.4-9.6 17.2-12.8C232.2 54.9 233.8 74.5 233.4 87.7zM200.6 24.4A27.5 27.5 0 0 1 215 28c-6.4 3.2-12.8 8.4-18.8 14.4-15.2 16.4-26.8 42-31.6 66.5-14.4 4.4-28.8 8.8-42 12.8C131.3 83.3 163.8 25.2 200.6 24.4zM154.2 244.6c1.6 25.6 69.3 31.2 73.3 91.7 2.8 47.6-25.2 80.1-65.7 82.5-48.8 3.2-75.7-25.6-75.7-25.6l10.4-44s26.8 20.4 48.4 18.8c14-.8 19.2-12.4 18.8-20.4-2-33.6-57.2-31.6-60.8-86.9-3.2-46.4 27.2-93.3 94.5-97.7 26-1.6 39.2 4.8 39.2 4.8L221.4 225.4s-17.2-8-37.6-6.4C154.2 221 153.8 239.8 154.2 244.6zM249.4 82.9c0-12-1.6-29.2-7.2-43.6 18.4 3.6 27.2 24 31.2 36.4Q262.6 78.7 249.4 82.9z"/></svg>'); }

/* Magento Icon (Multi-shape) */
.icon-magento::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512"><path fill="currentColor" d="M445.7 127.9V384l-63.4 36.5V164.7L223.8 73.1 65.2 164.7l.4 255.9L2.3 384V128.1L224.2 0l221.5 127.9zM255.6 420.5L224 438.9l-31.8-18.2v-256l-63.3 36.6 .1 255.9 94.9 54.9 95.1-54.9v-256l-63.4-36.6v255.9z"/></svg>'); }

/* TextMagic Icon (Custom SVG based on branding - stylized 'T' with message bubble) */
.icon-textmagic::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M4 2h6v12H4V2zm8 0h2v8h8V8h-2V2h-6v6h-2V2zm0 10h6c1.1 0 2 .9 2 2v6c0 1.1-.9 2-2 2h-6c-1.1 0-2-.9-2-2v-6c0-1.1.9-2 2-2z"/></svg>'); }

/* TinyMCE Icon (Official TinyMCE SVG logo simplified) */
.icon-tiny::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M2 2h20v2H2V2zm4 4h12v12H6V6zm2 2v8h8V8H8z"/></svg>'); }

/* WooCommerce Cart Icon (from earlier thread) */
.woo-cart-icon::before { background-image: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1024 1024"><path fill="currentColor" d="M204.848 655.616v149.312c-1.488 21.392-10 38.432-25.648 54.064-15.6 15.648-45.456 24.16-69.616 24.16H74.032c-22.768 0-32.768-11.392-49.808-26.992C10 841.952 1.44 826.304.048 806.4h128V274.496c0-22.72 8.56-42.672 25.552-58.272 17.088-15.696 46.944-24.16 69.712-24.16h476.384c22.72 0 32.72 11.344 49.808 26.992 14.16 14.256 22.688 29.904 24.16 49.808H204.816v78.192c7.072-1.44 12.784-1.44 18.464-1.44h520.512c24.16 0 95.264 12.832 112.352 29.904 17.04 15.648 28.432 31.248 39.824 55.408L1023.92 725.36c0 22.72-9.904 42.624-27.04 58.272-17.04 15.648-26.992 22.768-49.76 22.768H223.312c-5.696 0-11.392 0-18.464-1.488v-75.376h742.304l-128-307.2-614.304.016v233.264zM614.4 76.816c0-35.552 28.48-63.984 64.032-63.984s63.984 28.432 63.984 63.984-28.432 63.984-63.984 63.984S614.4 112.368 614.4 76.816zm-511.952 0c0-35.552 28.432-63.984 63.984-63.984s63.984 28.432 63.984 63.984-28.432 63.984-63.984 63.984-63.984-28.432-63.984-63.984z"/></svg>'); transform: rotate(180deg); /* Flip the icon upright */ transform-origin: center; /* Ensure it rotates around its center */ }

/* Custom Icon (from earlier thread) */
.custom-icon::before { background-image: url('data:image/svg+xml,<svg width="800px" height="800px" viewBox="0 -51.5 256 256" xmlns="http://www.w3.org/2000/svg" preserveAspectRatio="xMidYMid"><path d="M23.759 0h208.378C245.325 0 256 10.675 256 23.863v79.541c0 13.188-10.675 23.863-23.863 23.863H157.41l10.257 25.118-45.109-25.118H23.863c-13.187 0-23.862-10.675-23.862-23.863V23.863C-.104 10.78 10.57 0 23.759 0z" fill="%239B5C8F"/><path d="M14.578 21.75c1.457-1.978 3.642-3.018 6.556-3.226 5.308-.417 8.326 2.08 9.054 7.492 3.226 21.75 6.764 40.17 10.51 55.259l22.79-43.395c2.082-3.955 4.684-6.036 7.806-6.244 4.579-.312 7.388 2.601 8.533 8.741 2.602 13.84 5.932 25.6 9.886 35.59 2.706-26.432 7.285-45.476 13.737-57.235 1.56-2.914 3.85-4.371 6.868-4.58 2.394-.207 4.579.521 6.556 2.082 1.977 1.561 3.018 3.538 3.226 5.932.104 1.873-.208 3.434-1.04 4.995-4.059 7.493-7.39 20.085-10.095 37.567-2.601 16.963-3.538 30.18-2.914 39.65.209 2.6-.208 4.89-1.248 6.868-1.25 2.289-3.122 3.538-5.516 3.746-2.706.208-5.515-1.04-8.221-3.85-9.678-9.887-17.379-24.664-22.998-44.332-6.765 13.32-11.76 23.31-14.986 29.97-6.14 11.76-11.343 17.796-15.714 18.108-2.81.208-5.203-2.186-7.284-7.18-5.307-13.633-11.031-39.962-17.17-78.986-.417-2.706.207-5.1 1.664-6.972zm223.636 16.338c-3.746-6.556-9.262-10.51-16.65-12.072-1.978-.416-3.85-.624-5.62-.624-9.99 0-18.107 5.203-24.455 15.61-5.412 8.845-8.117 18.627-8.117 29.346 0 8.013 1.665 14.881 4.995 20.605 3.746 6.556 9.262 10.51 16.65 12.071 1.977.417 3.85.625 5.62.625 10.094 0 18.211-5.203 24.455-15.61 5.411-8.95 8.117-18.732 8.117-29.45.104-8.117-1.665-14.882-4.995-20.501zm-13.112 28.826c-1.457 6.868-4.059 11.967-7.91 15.401-3.017 2.706-5.827 3.85-8.428 3.33-2.498-.52-4.58-2.705-6.14-6.764-1.25-3.226-1.873-6.452-1.873-9.47 0-2.601.208-5.203.728-7.596.937-4.267 2.706-8.43 5.515-12.384 3.435-5.1 7.077-7.18 10.823-6.452 2.498.52 4.58 2.706 6.14 6.764 1.249 3.226 1.873 6.452 1.873 9.47 0 2.706-.208 5.307-.728 7.7zm-52.033-28.826c-3.746-6.556-9.366-10.51-16.65-12.072-1.977-.416-3.85-.624-5.62-.624-9.99 0-18.107 5.203-24.455 15.61-5.411 8.845-8.117 18.627-8.117 29.346 0 8.013 1.665 14.881 4.995 20.605 3.746 6.556 9.262 10.51 16.65 12.071 1.978.417 3.85.625 5.62.625 10.094 0 18.211-5.203 24.455-15.61 5.412-8.95 8.117-18.732 8.117-29.45 0-8.117-1.665-14.882-4.995-20.501zm-13.216 28.826c-1.457 6.868-4.059 11.967-7.909 15.401-3.018 2.706-5.828 3.85-8.43 3.33-2.497-.52-4.578-2.705-6.14-6.764-1.248-3.226-1.872-6.452-1.872-9.47 0-2.601.208-5.203.728-7.596.937-4.267 2.706-8.43 5.516-12.384 3.434-5.1 7.076-7.18 10.822-6.452 2.498.52 4.58 2.706 6.14 6.764 1.25 3.226 1.873 6.452 1.873 9.47.105 2.706-.208 5.307-.728 7.7z" fill="%23FFF"/></svg>'); }
css/layout.css
.layout-wrapper {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto !important;
    box-sizing: border-box;
    display: block !important;
    align-items: initial !important;
    padding: 0 !important;
    margin-top: 0 !important;
}

.header {
    width: 100%;
    max-width: 1200px;
    margin: 2 auto !important;
    background-color: #f4f4f4;
    overflow: hidden;
    position: relative;
    box-sizing: border-box;
    padding: 0 !important;
    margin-top: 0 !important;
    margin-bottom: 0 !important;
}

.layout-wrapper .header .header-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto !important;
    padding: 12px 20px;
    background-color: #007BFF;
    color: white;
    border-radius: 8px;
    display: flex !important;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    box-sizing: border-box;
    max-height: 80px;
    overflow: hidden;
}

.layout-wrapper .header .header-content h1 {
    margin: 0 0 5px 0;
    font-size: 20px;
}

.layout-wrapper .header .header-content p {
    margin: 0;
    font-size: 14px;
}

.main-container {
    max-width: 1020px;
    margin: 0 auto !important;
    display: flex;
    gap: 20px;
    padding: 0 20px 20px 0;
    flex-direction: row;
    align-items: flex-start;
    margin-top: 5px;
}

.menu-container {
    padding-left: 0;
    width: 200px;
}

.content-wrapper {
    text-align: left;
    width: 800px;
    margin-top: 0;
    padding-top: 0;
}
css/pages.css
.container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.signup-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    text-align: center;
}

.signup-instructions {
    margin-top: 15px;
    font-size: 0.9em;
    color: #555;
}

.signup-instructions a {
    color: #007BFF;
    text-decoration: none;
}

.signup-instructions a:hover {
    text-decoration: underline;
}

.login-page {
    min-height: 100vh; /* Full viewport height */
    display: flex; /* Center the login form */
    justify-content: center;
    align-items: center;
}

/* Style the login container */
#loginContainer {
    width: 440px; /* Add 40px to account for the shift */
    max-width: 440px; /* Update max-width accordingly */
}


.login-page h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.login-page .form-group {
    margin-bottom: 15px;
}

.login-page .form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 0;
    max-width: 70px;
}

.login-page input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.login-page button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.login-page button:hover {
    background-color: #0056b3;
}

.login-page .toggle-link {
    text-align: center;
    margin-top: 15px;
}

.login-page .toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.login-page .toggle-link a:hover {
    text-decoration: underline;
}

.login-page .custom-login-notice {
    background-color: #f0e68c;
    border: 2px dashed #4682b4;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2);
    font-family: 'Courier New', Courier, monospace;
    color: #2f4f4f;
    transition: transform 0.3s ease-in-out;
    margin-bottom: 30px;
}

.login-page .custom-login-notice .highlight {
    color: #007BFF;
    font-weight: bold;
}

.login-page .custom-login-notice:hover {
    transform: scale(1.02);
}

#my-store .settings-form {
    max-width: 600px;
}

#my-store .email-section input[type="text"] {
    width: 50%;
}

#my-store .widget-checkboxes input[type="checkbox"] {
    width: 10px;
}

/* Signup-specific styles */
.signup-page {
    display: flex;
    justify-content: center;
    align-items: center;
    padding: 20px;
}

.signup-page .options {
    display: flex;
    gap: 15px;
    justify-content: center;
    margin-bottom: 30px;
}

.signup-page .option {
    text-align: center;
    cursor: pointer;
    padding: 10px;
    transition: border 0.3s ease;
}

.signup-page .option.selected {
    border: 3px solid #007BFF;
    border-radius: 5px;
    animation: pulse 1.5s infinite ease-in-out;
}

.signup-page .option img {
    width: 150px;
    height: 200px;
    object-fit: cover;
    border-radius: 5px;
}

.signup-page .option span {
    display: block;
    margin-top: 10px;
    font-size: 16px;
    color: #333;
}

.signup-page .option input[type="radio"] {
    display: none;
}

.signup-page .form-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin: 0 auto;
    width: 100%;
    max-width: 400px;
}

@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.4);
    }
    50% {
        box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }
}
css/signup.css
body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

.signup-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    text-align: center;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
}

.options {
    display: flex;
    gap: 15px; /* Increased gap for better spacing */
    justify-content: center;
    margin-bottom: 30px;
}

.option {
    text-align: center;
    cursor: pointer;
    padding: 10px;
    transition: border 0.3s ease;
}

.option.selected {
    border: 3px solid #007BFF;
    border-radius: 5px;
    animation: pulse 1.5s infinite ease-in-out;
}

.option img {
    width: 150px; /* Fixed width for uniformity */
    height: 200px; /* Fixed height for uniformity */
    object-fit: cover;
    border-radius: 5px;
}

.option span {
    display: block;
    margin-top: 10px;
    font-size: 16px;
    color: #333;
}

.option input[type="radio"] {
    display: none;
}

.form-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin: 0 auto; /* Center the form, removed margin-right */
    width: 100%;
    max-width: 400px; /* Match form-group max-width for alignment */
}

button {
    background-color: #007BFF;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
    max-width: 200px;
}

button:hover {
    background-color: #0056b3;
}

.form-group {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    width: 100%;
    max-width: 400px;
}

.form-group label {
    font-weight: bold;
    flex: 1;
    text-align: right;
    margin-bottom: 0;
}

.form-group .input-container {
    position: relative;
    width: 192px; /* 160px + 20% = 192px */
}

.form-group input {
    width: 100%;
    padding: 8px;
    padding-right: 30px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    box-sizing: border-box;
}

.form-group .toggle-password {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
}

.hidden {
    display: none;
}

/* Pulse animation keyframes */
@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.4);
    }
    50% {
        box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }
}
css/styles.css
body {
    font-family: Arial, sans-serif;
    margin: 0 !important;
    padding: 0 !important;
    background-color: #f4f4f4;
    min-height: 100vh;
    display: block !important;
    align-items: initial !important;
    justify-content: initial !important;
    text-align: initial !important;
}

.layout-wrapper {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto !important;
    box-sizing: border-box;
    display: block !important;
    align-items: initial !important;
    padding: 0 !important;
    margin-top: 0 !important;
}

.container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.signup-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    text-align: center;
}

.header {
    width: 100%;
    max-width: 1200px;
    margin: 2 auto !important;
    background-color: #f4f4f4;
    overflow: hidden;
    position: relative;
    box-sizing: border-box;
    padding: 0 !important;
    margin-top: 0 !important;
}

.layout-wrapper .header .header-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto !important;
    padding: 12px 20px;
    background-color: #007BFF;
    color: white;
    border-radius: 8px;
    display: flex !important;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    box-sizing: border-box;
    max-height: 80px;
    overflow: hidden;
}

.layout-wrapper .header .header-content h1 {
    margin: 0 0 5px 0;
    font-size: 20px;
}

.layout-wrapper .header .header-content p {
    margin: 0;
    font-size: 14px;
}

.main-container {
    max-width: 1200px;
    margin: 0 auto !important;
    display: flex;
    gap: 20px;
    padding: 0 20px 20px 0; /* Updated as per CREQ */
    flex-direction: row;
}

/* /static/styles.css */

/* Existing styles (assumed content; replace with actual if available) */
/* ... */

/* Menu container adjustments */
.menu-container {
    padding-left: 0; /* Remove left padding to align flush with the left edge */
    /* Existing styles for .menu-container */
}

/* Menu adjustments */
.menu {
    padding-left: 5px; /* Shift buttons 5 pixels to the right */
    /* Existing styles for .menu */
}

/* Content wrapper alignment */
.content-wrapper {
    text-align: left; /* Ensure content is left-aligned */
    width: 800px; /* Set a fixed width to prevent layout issues with buttons */
    /* If flexbox is used, you might need:
    display: flex;
    justify-content: flex-start;
    */
    /* Existing styles for .content-wrapper */
}

/* ... */
/* Rest of the existing styles.css content */
.menu button {
    padding: 10px 10px 10px 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    width: 100%;
    max-width: 200px; /* Reverted to 200px from 160px */
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding-right: 30px;
}

.menu button:hover {
    background-color: #0056b3;
}

.menu button[data-submenu][aria-expanded="true"] {
    background-color: #0056b3;
    border-left: 4px solid #fff;
}

.menu button i,
.menu button .svg-icon,
.menu button .icon-group {
    margin-right: 8px;
    vertical-align: middle;
}

.menu button i::before {
    font-family: "Font Awesome 6 Free";
}

.menu button i.fas::before {
    font-weight: 900;
}

.menu button .svg-icon {
    display: inline-block;
    height: 16px;
    width: auto;
}

.menu button .svg-icon svg {
    height: 100%;
    width: auto;
    fill: white;
}

.menu button .icon-group {
    display: inline-flex;
    align-items: center;
    position: relative;
}

.menu button .icon-group .small-icon {
    font-size: 10px;
    position: absolute;
    bottom: 0;
    right: -8px;
    color: white;
}

.menu button .button-content {
    display: flex;
    align-items: center; /* Vertically centers the SVG and text */
    justify-content: flex-start; /* Aligns content to the left */
}

.menu button .caret {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: white;
    font-size: 14px;
}

.menu .btn-admin {
    background-color: #dc3545;
}

.menu .btn-admin:hover {
    background-color: #c82333;
}

.menu .btn-logoff {
    background-color: #dc3545;
}

.menu .btn-logoff:hover {
    background-color: #c82333;
}

.menu button[data-href="/admin"] {
    background-color: #dc3545; /* Added per CREQ to match Log Off button color */
}body {
    font-family: Arial, sans-serif;
    margin: 0 !important;
    padding: 0 !important;
    background-color: #f4f4f4;
    min-height: 100vh;
    display: block !important;
    align-items: initial !important;
    justify-content: initial !important;
    text-align: initial !important;
}

.layout-wrapper {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto !important;
    box-sizing: border-box;
    display: block !important;
    align-items: initial !important;
    padding: 0 !important;
    margin-top: 0 !important;
}

.container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.signup-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    text-align: center;
}

.header {
    width: 100%;
    max-width: 1200px;
    margin: 2 auto !important;
    background-color: #f4f4f4;
    overflow: hidden;
    position: relative;
    box-sizing: border-box;
    padding: 0 !important;
    margin-top: 0 !important;
    margin-bottom: 0 !important; /* Ensure no extra space below header */
}

.layout-wrapper .header .header-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto !important;
    padding: 12px 20px;
    background-color: #007BFF;
    color: white;
    border-radius: 8px;
    display: flex !important;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    box-sizing: border-box;
    max-height: 80px;
    overflow: hidden;
}

.layout-wrapper .header .header-content h1 {
    margin: 0 0 5px 0;
    font-size: 20px;
}

.layout-wrapper .header .header-content p {
    margin: 0;
    font-size: 14px;
}

.main-container {
    max-width: 1020px; /* Adjusted to 200px (menu) + 20px (gap) + 800px (content) */
    margin: 0 auto !important;
    display: flex;
    gap: 20px;
    padding: 0 20px 20px 0;
    flex-direction: row;
    align-items: flex-start; /* Added to align content-wrapper with top of menu-container */
    margin-top: 5px; /* Added to match the 5px gap between buttons */
}

/* Menu container adjustments */
.menu-container {
    padding-left: 0; /* Remove left padding to align flush with the left edge */
    width: 200px; /* Added to ensure fixed width matching the buttons */
}

/* Menu adjustments */
.menu {
    padding-left: 5px; /* Shift buttons 5 pixels to the right */
}

/* Content wrapper alignment */
.content-wrapper {
    text-align: left; /* Ensure content is left-aligned */
    width: 800px; /* Fixed width to prevent layout issues with buttons */
    margin-top: 0; /* Added to remove any extra vertical gap */
    padding-top: 0; /* Added to remove any extra vertical gap */
}

/* Rest of the existing styles.css content */
.menu button {
    padding: 10px 10px 10px 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    width: 100%;
    max-width: 200px; /* Already set to 200px */
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding-right: 30px;
}

.menu button:hover {
    background-color: #0056b3;
}

.menu button[data-submenu][aria-expanded="true"] {
    background-color: #0056b3;
    border-left: 4px solid #fff;
}

.menu button i,
.menu button .svg-icon,
.menu button .icon-group {
    margin-right: 8px;
    vertical-align: middle;
}

.menu button i::before {
    font-family: "Font Awesome 6 Free";
}

.menu button i.fas::before {
    font-weight: 900;
}

.menu button .svg-icon {
    display: inline-block;
    height: 16px;
    width: auto;
}

.menu button .svg-icon svg {
    height: 100%;
    width: auto;
    fill: white;
}

.menu button .icon-group {
    display: inline-flex;
    align-items: center;
    position: relative;
}

.menu button .icon-group .small-icon {
    font-size: 10px;
    position: absolute;
    bottom: 0;
    right: -8px;
    color: white;
}

.menu button .button-content {
    display: flex;
    align-items: center; /* Vertically centers the SVG and text */
    justify-content: flex-start; /* Aligns content to the left */
}

.menu button .caret {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: white;
    font-size: 14px;
}

.menu .btn-admin {
    background-color: #dc3545;
}

.menu .btn-admin:hover {
    background-color: #c82333;
}

.menu .btn-logoff {
    background-color: #dc3545;
}

.menu .btn-logoff:hover {
    background-color: #c82333;
}

.menu button[data-href="/admin"] {
    background-color: #dc3545; /* Added per CREQ to match Log Off button color */
}

.menu button[data-href="/admin"]:hover {
    background-color: #c82333; /* Added per CREQ to match Log Off hover color */
}

.submenu {
    display: none;
    padding-left: 20px;
    padding-bottom: 0; /* Remove extra space at the bottom */
    overflow: visible;
    max-height: 0;
    transition: all 0.3s ease-in-out;
}

.submenu.open {
    display: block; /* Removed !important */
    max-height: 1000px; /* Removed !important */
    height: auto; /* Removed !important */
}

.submenu button {
    display: block !important;
    min-height: 30px !important;
    background-color: #6c757d !important;
}

.submenu button:hover {
    background-color: #5a6268;
}

.submenu button.active {
    background-color: #28a745;
    color: white;
}

.section {
    display: none;
    margin-left: 210px; /* Reverted to 210px (200px + 10px gap) from 170px */
}

.section.active {
    display: block;
}

.form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 400px;
}

.form label {
    font-weight: bold;
}

.form input, .form select {
    padding: 5px;
}

.form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
}

.form button:hover {
    background-color: #0056b3;
}

.signup-instructions {
    margin-top: 15px;
    font-size: 0.9em;
    color: #555;
}

.signup-instructions a {
    color: #007BFF;
    text-decoration: none;
}

.signup-instructions a:hover {
    text-decoration: underline;
}

.settings-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 600px;
}

.settings-form label {
    font-weight: bold;
    margin-bottom: 5px;
}

.settings-form input, 
.settings-form textarea {
    padding: 8px;
    width: 100%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.settings-form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 4px;
}

.settings-form button:hover {
    background-color: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.deals-table th {
    background-color: #f2f2f2;
}

.treeview {
    max-height: 600px;
    overflow-y: auto;
    margin-bottom: 10px;
}

.treeview, .treeview ul, .treeview li {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.treeview .node {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 5px 0;
}

.treeview .toggle {
    cursor: pointer;
    width: 20px;
    text-align: center;
    font-weight: bold;
    flex-shrink: 0;
}

.treeview input[type="checkbox"] {
    width: 16px !important;
    height: 16px !important;
    margin: 0;
    flex-shrink: 0;
}

.treeview .subcategories {
    display: none;
    padding-left: 20px;
}

.treeview .subcategories.open {
    display: block;
}

#toast-container > .toast-success {
    background-color: #28a745;
    border-color: #218838;
}

#toast-container > .toast-error {
    background-color: #dc3545;
    border-color: #c82333;
}

.action-cell {
    display: flex;
    gap: 10px;
    align-items: center;
}

h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    width: 100%;
    max-width: 400px;
}

.form-group label {
    font-weight: bold;
    flex: 1;
    text-align: right;
    margin-bottom: 0;
}

.form-group .input-container {
    position: relative;
    width: 200px;
}

.form-group input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
    padding-right: 30px;
    font-size: 14px;
}

.form-group .toggle-password {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
}

.button-container {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    max-width: 200px;
}

button:hover {
    background-color: #0056b3;
}

.toggle-link {
    text-align: center;
    margin-top: 15px;
}

.toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.toggle-link a:hover {
    text-decoration: underline;
}

.hidden {
    display: none;
}

.toggle-section {
    cursor: pointer;
    font-weight: bold;
    margin: 10px 0;
    background-color: #e9ecef;
    padding: 5px;
    border-radius: 4px;
}

.toggle-content {
    display: none;
}

.toggle-content.open {
    display: block;
}

.page-section, .email-section {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.email-section {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.widget-checkboxes div {
    margin-bottom: 10px;
}

.remove-page-btn, .remove-email-btn {
    padding: 5px 10px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.remove-page-btn:hover, .remove-email-btn:hover {
    background-color: #c82333;
}

.password-container {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-bottom: 15px;
    justify-content: flex-end;
    align-items: center;
}

.password-container input {
    padding: 8px 30px 8px 8px;
    width: 50%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
    font-size: 16px;
}

#my-store .settings-form {
    max-width: 600px;
}

#my-store .email-section input[type="text"] {
    width: 50%;
}

#my-store .widget-checkboxes input[type="checkbox"] {
    width: 10px;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
}

.options {
    display: flex;
    gap: 5px;
    justify-content: center;
    margin-bottom: 30px;
}

.option {
    text-align: center;
    cursor: pointer;
    padding: 10px;
    transition: border 0.3s ease;
}

.option.selected {
    border: 3px solid #007BFF;
    border-radius: 5px;
}

.option img {
    object-fit: cover;
    border-radius: 5px;
}

.option span {
    display: block;
    margin-top: 10px;
    font-size: 16px;
    color: #333;
}

.option input[type="radio"] {
    display: none;
}

.form-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin-right: 100px;
}

/* Loading Overlay */
#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 1);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

/* Multicircle Loader Container */
.multicircle-loader {
    position: relative;
    width: 100px;
    height: 100px;
}

/* Circle Styles */
.multicircle-loader .circle {
    position: absolute;
    border-radius: 50%;
    border: 4px solid transparent;
    animation: spin 1.5s linear infinite;
}

/* Individual Circle Variations */
.circle1 {
    width: 60px;
    height: 60px;
    border-top-color: #ff6f61;
    top: 20px;
    left: 20px;
    animation-delay: 0s;
}

.circle2 {
    width: 45px;
    height: 45px;
    border-top-color: #6bff61;
    top: 27.5px;
    left: 27.5px;
    animation-delay: 0.3s;
}

.circle3 {
    width: 30px;
    height: 30px;
    border-top-color: #61cfff;
    top: 35px;
    left: 35px;
    animation-delay: 0.6s;
}

.circle4 {
    width: 15px;
    height: 15px;
    border-top-color: #ff61ff;
    top: 42.5px;
    left: 42.5px;
    animation-delay: 0.9s;
}

/* Spin Animation */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Login page specific styles */
.login-page {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    padding: 20px;
}

.login-page .container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.login-page h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.login-page .form-group {
    margin-bottom: 15px;
    transform: translateX(-40px);
}

.login-page .form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 0;
    max-width: 70px;
}

.login-page input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.login-page button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.login-page button:hover {
    background-color: #0056b3;
}

.login-page .toggle-link {
    text-align: center;
    margin-top: 15px;
}

.login-page .toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.login-page .toggle-link a:hover {
    text-decoration: underline;
}

.login-page #toast-container > .toast-success {
    background-color: #28a745;
    border-color: #218838;
}

.login-page #toast-container > .toast-error {
    background-color: #dc3545;
    border-color: #c82333;
}

.login-page .custom-login-notice {
    background-color: #f0e68c;
    border: 2px dashed #4682b4;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2);
    font-family: 'Courier New', Courier, monospace;
    color: #2f4f4f;
    transition: transform 0.3s ease-in-out;
    margin-bottom: 30px;
}

.login-page .custom-login-notice .highlight {
    color: #007BFF;
    font-weight: bold;
}

.login-page .custom-login-notice:hover {
    transform: scale(1.02);
}

/* New styles for "My Account" section */
.settings-form {
    max-width: 400px;
    margin: 20px auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.settings-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
}

.settings-form input[type="text"],
.settings-form input[type="url"],
.settings-form input[type="email"],
.settings-form input[type="password"] {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

.settings-form button {
    background-color: #007BFF;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.settings-form button:hover {
    background-color: #0056b3;
}

.password-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
    font-size: 16px;
}

.password-toggle:hover {
    color: #007BFF;
}

.settings-form button i {
    margin-right: 5px;
}

/* Fixed Headers for Orders and Visits Tables */
#orders table thead, #visits table thead {
    position: sticky;
    top: 0;
    background-color: #f8f9fa; /* Light background for visibility */
    z-index: 1;
}

/* Style for Collapsible Toggle Sections */
.toggle-section {
    cursor: pointer;
    padding: 10px;
    background-color: #e9ecef;
    border: 1px solid #ced4da;
    border-radius: 4px;
    margin-bottom: 5px;
    font-weight: bold;
    transition: background-color 0.3s ease;
}

.toggle-section:hover {
    background-color: #dee2e6;
}

/* Collapsible Content Styling */
.toggle-content {
    display: none;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
    max-height: 0;
    padding: 0 10px;
}

.toggle-content.open {
    display: block;
    max-height: 500px; /* Adjust based on content */
    padding: 10px;
}
css/test-svg.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Test SVG Icon</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #f0f0f0;
        }
        svg {
            width: 48px; /* Adjust size for visibility */
            height: 48px;
            fill: #000; /* Set a fill color for visibility */
        }
    </style>
</head>
<body>
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 448 512">
        <!--!Font Awesome Free 6.7.2 by @fontawesome - https://fontawesome.com License - https://fontawesome.com/license/free Copyright 2025 Fonticons, Inc.-->
        <path d="M445.7 127.9V384l-63.4 36.5V164.7L223.8 73.1 65.2 164.7l.4 255.9L2.3 384V128.1L224.2 0l221.5 127.9zM255.6 420.5L224 438.9l-31.8-18.2v-256l-63.3 36.6 .1 255.9 94.9 54.9 95.1-54.9v-256l-63.4-36.6v255.9z"/>
    </svg>
</body>
</html>
css/utilities.css
.section {
    display: none;
    margin-left: 210px;
}

.section.active {
    display: block;
}

.hidden {
    display: none;
}

.toggle-section {
    cursor: pointer;
    font-weight: bold;
    margin: 10px 0;
    background-color: #e9ecef;
    padding: 5px;
    border-radius: 4px;
}

.toggle-content {
    display: none;
}

.toggle-content.open {
    display: block;
}

.toggle-link {
    text-align: center;
    margin-top: 15px;
}

.toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.toggle-link a:hover {
    text-decoration: underline;
}

#toast-container > .toast-success {
    background-color: #28a745;
    border-color: #218838;
}

#toast-container > .toast-error {
    background-color: #dc3545;
    border-color: #c82333;
}

.action-cell {
    display: flex;
    gap: 10px;
    align-items: center;
}

.form-group {
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    width: 100%;
    max-width: 400px;
}

.form-group label {
    font-weight: bold;
    flex: 1;
    text-align: right;
    margin-bottom: 0;
}

.form-group .input-container {
    position: relative;
    width: 200px;
}

.form-group input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
    padding-right: 30px;
    font-size: 14px;
}

.form-group .toggle-password {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
}

.password-container {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-bottom: 15px;
    justify-content: flex-end;
    align-items: center;
}

.password-container input {
    padding: 8px 30px 8px 8px;
    width: 50%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
    font-size: 16px;
}

.password-toggle:hover {
    color: #007BFF;
}

#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 1);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

.multicircle-loader {
    position: relative;
    width: 100px;
    height: 100px;
}

.multicircle-loader .circle {
    position: absolute;
    border-radius: 50%;
    border: 4px solid transparent;
    animation: spin 1.5s linear infinite;
}

.circle1 {
    width: 60px;
    height: 60px;
    border-top-color: #ff6f61;
    top: 20px;
    left: 20px;
    animation-delay: 0s;
}

.circle2 {
    width: 45px;
    height: 45px;
    border-top-color: #6bff61;
    top: 27.5px;
    left: 27.5px;
    animation-delay: 0.3s;
}

.circle3 {
    width: 30px;
    height: 30px;
    border-top-color: #61cfff;
    top: 35px;
    left: 35px;
    animation-delay: 0.6s;
}

.circle4 {
    width: 15px;
    height: 15px;
    border-top-color: #ff61ff;
    top: 42.5px;
    left: 42.5px;
    animation-delay: 0.9s;
}

@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

#orders table thead, #visits table thead {
    position: sticky;
    top: 0;
    background-color: #f8f9fa;
    z-index: 1;
}

.toggle-section {
    cursor: pointer;
    padding: 10px;
    background-color: #e9ecef;
    border: 1px solid #ced4da;
    border-radius: 4px;
    margin-bottom: 5px;
    font-weight: bold;
    transition: background-color 0.3s ease;
}

.toggle-section:hover {
    background-color: #dee2e6;
}

.toggle-content {
    display: none;
    overflow: hidden;
    transition: max-height 0.3s ease, padding 0.3s ease;
    max-height: 0;
    padding: 0 10px;
}

.toggle-content.open {
    display: block;
    max-height: 500px;
    padding: 10px;
}
error/200.md
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Rendered Markdown</title>
    <style>
        table { border-collapse: collapse; width: 100%; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
        th { background-color: #f2f2f2; }
    </style>
</head>
<body>
    {content}
</body>
</html>
error/403.md
# 403 - Forbidden

We're sorry, but you do not have permission to access this resource.

**Details:**
- {error_message}

Please contact support if you believe this is an error.
error/404.md
# 404 - Not Found

We're sorry, but the requested resource could not be found.

**Details:**
- {error_message}

Please check the URL or try again later.
error/500.md
# 500 - Internal Server Error

We're sorry, but an unexpected error occurred while processing your request.

**Details:**
- {error_message}

Our team has been notified. Please try again later.
js/admin-page.js
// admin-page.js
function initializeAdmin(pageType) {
    console.log('initializeAdmin - Initializing admin page with type: ' + pageType);
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('initializeAdmin - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = window.decodeJWT(token);
    if (!decoded || !decoded.permissions || !decoded.permissions.includes('admin')) {
        console.error('initializeAdmin - Invalid token or no admin permission, redirecting to /');
        toastr.error('Permission denied: Admin access required');
        window.location.href = '/';
        return;
    }

    console.log('initializeAdmin - Setting up navigation');
    setupNavigation();
    updateMenu();

    console.log('initializeAdmin - Loading user settings');
    if (typeof loadSettings === 'function') {
        loadSettings().then(settings => {
            const contactName = settings?.contact_name || 'User';
            const userContactNameSpan = document.getElementById('user-contact-name');
            if (userContactNameSpan) {
                userContactNameSpan.textContent = contactName;
                console.log('initializeAdmin - Updated contact name in welcome section:', contactName);
            } else {
                console.warn('initializeAdmin - user-contact-name span not found');
            }
        }).catch(error => {
            console.error('initializeAdmin - Error loading settings:', error.message);
            toastr.error('Failed to load user settings');
            const userContactNameSpan = document.getElementById('user-contact-name');
            if (userConif (userContactNameSpan) userContactNameSpan.textContent = 'User';userContactNameSpan.textContent = 'User';
        });
    } else {
        console.error('initializeAdmin - loadSettings function not found');
        toastr.error('Settings loader unavailable');
        const userContactNameSpan = document.getElementById('user-contact-name');
        if (userContactNameSpan) userContactNameSpan.textContent = 'User';
    }

    console.log('initializeAdmin - Loading initial data');
    loadInitialData();
    setupEventListeners();
    loadAffiliates();
    loadSiteSettings();
    loadApiKeys();

    hideLoadingOverlay();
    console.log('Admin page initialized');
}

// Updates the menu dynamically based on permissions
function updateMenu() {
    console.log('updateMenu - Updating menu');
    const menu = document.getElementById('menu');
    const userId = localStorage.getItem('userId') || '';
    if (menu) {
        menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
        menu.innerHTML += `
            <button data-section="info">
                <span class="button-content"><i class="fas fa-home"></i> Dashboard</span>
            </button>
            <button data-section="user_management" data-role="admin">
                <span class="button-content"><i class="fas fa-users"></i> Admins</span>
            </button>
            <button data-section="user_management" data-role="partner">
                <span class="button-content"><i class="fas fa-handshake"></i> Partners</span>
            </button>
            <button data-section="user_management" data-role="community">
                <span class="button-content"><i class="fas fa-users"></i> Communities</span>
            </button>
            <button data-section="user_management" data-role="merchant">
                <span class="button-content"><i class="fas fa-store"></i> Merchants</span>
            </button>
            <button data-section="affiliates">
                <span class="button-content"><i class="fas fa-link"></i> Affiliates</span>
            </button>
            <button data-section="site_settings">
                <span class="button-content"><i class="fas fa-cogs"></i> Site Settings</span>
            </button>
            <button data-section="api_keys">
                <span class="button-content"><i class="fas fa-key"></i> API Keys</span>
            </button>
        `;
        // Add navigation buttons to other role pages
        if (window.userPermissions.includes('community')) {
            menu.innerHTML += `
                <button data-href="/" data-role="community" style="background-color: #007bff;">
                    <span class="button-content"><i class="fas fa-users"></i> Community Dashboard</span>
                </button>
            `;
        }
        if (window.userPermissions.includes('merchant')) {
            menu.innerHTML += `
                <button data-href="/" data-role="merchant" style="background-color: #007bff;">
                    <span class="button-content"><i class="fas fa-store"></i> Merchant Dashboard</span>
                </button>
            `;
        }
        if (window.userPermissions.includes('wixpro')) {
            menu.innerHTML += `
                <button data-href="/" data-role="partner" style="background-color: #007bff;">
                    <span class="button-content"><i class="fas fa-handshake"></i> Partner Dashboard</span>
                </button>
            `;
        }
        menu.innerHTML += `
            <button id="logOffBtn" style="background-color: #dc3545;">
                <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
            </button>
        `;
        console.log('updateMenu - Menu updated');

        if (typeof window.siteNavigation?.initializeNavigation === 'function') {
            window.siteNavigation.initializeNavigation();
            console.log('updateMenu - initializeNavigation called to fix submenu hiding');
        } else {
            console.error('updateMenu - initializeNavigation function not found');
        }
    } else {
        console.error('updateMenu - Menu element not found');
    }
}

function setupNavigation() {
    console.log('setupNavigation - Setting up navigation');
    if (typeof window.siteNavigation?.initializeNavigation === 'function') {
        window.siteNavigation.initializeNavigation();
    }

    const attachListeners = () => {
        const userManagementButtons = document.querySelectorAll('#userManagement button[data-section="user_management"]');
        console.log('setupNavigation - Found userManagement buttons:', userManagementButtons.length);
        userManagementButtons.forEach(button => {
            button.removeEventListener('click', handleUserManagementClick);
            button.addEventListener('click', handleUserManagementClick);
            console.log('setupNavigation - Attached click listener to button:', {
                section: button.dataset.section,
                role: button.dataset.role
            });
        });

        const otherButtons = document.querySelectorAll('.menu button[data-section]:not([data-section="user_management"])');
        otherButtons.forEach(button => {
            button.removeEventListener('click', handleOtherClick);
            button.addEventListener('click', handleOtherClick);
            console.log('setupNavigation - Attached click listener to other button:', {
                section: button.dataset.section,
                submenu: button.dataset.submenu
            });
        });

        // Handler for testScripts buttons
        const testScriptButtons = document.querySelectorAll('#testScripts button[data-href]');
        console.log('setupNavigation - Found testScript buttons:', testScriptButtons.length);
        testScriptButtons.forEach(button => {
            button.removeEventListener('click', handleTestScriptClick);
            button.addEventListener('click', handleTestScriptClick);
            console.log('setupNavigation - Attached click listener to testScript button:', {
                href: button.dataset.href
            });
        });
    };

    function handleUserManagementClick(event) {
        event.preventDefault();
        event.stopPropagation();
        const button = event.currentTarget;
        const sectionId = button.getAttribute('data-section');
        const role = button.getAttribute('data-role');

        console.log(`handleUserManagementClick - Button clicked: sectionId=${sectionId}, role=${role}`);
        if (sectionId === 'user_management' && role) {
            document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
            const section = document.getElementById(sectionId);
            if (section) {
                section.style.display = 'block';
                const titleSpan = document.getElementById('user_role_title');
                const iconSpan = document.getElementById('user_role_icon');
                const title = button.querySelector('.button-content').textContent.trim();
                const iconElement = button.querySelector('.button-content i[class*="icon-"]');
                let iconClass = iconElement ? Array.from(iconElement.classList).find(cls => cls.startsWith('icon-')) : `icon-${role}`;
                if (titleSpan && iconSpan) {
                    titleSpan.textContent = title;
                    iconSpan.className = `menu-size ${iconClass}`;
                }
                loadUserData(role);
            }
        }
    }

    function handleOtherClick(event) {
        event.preventDefault();
        event.stopPropagation();
        const button = event.currentTarget;
        const sectionId = button.getAttribute('data-section');
        const submenuId = button.getAttribute('data-submenu');

        console.log(`handleOtherClick - Button clicked: sectionId=${sectionId}, submenuId=${submenuId}`);
        if (sectionId) {
            document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
            const section = document.getElementById(sectionId);
            if (section) {
                section.style.display = 'block';
                console.log(`handleOtherClick - Section ${sectionId} shown`);
                if (sectionId === 'api_keys') {
                    const form = document.getElementById('api-keys-form');
                    form.style.display = 'none';
                    document.getElementById('api-keys-icons').style.display = 'flex';
                }
            }
        }
    }

    async function handleTestScriptClick(event) {
        event.preventDefault();
        event.stopPropagation();
        const button = event.currentTarget;
        const href = button.getAttribute('data-href');
        const currentToken = localStorage.getItem('authToken');

        console.log(`handleTestScriptClick - Button clicked: href=${href}, currentToken=${currentToken ? '[present]' : 'null'}`);
        if (href) {
            const roleMap = {
                '/partner': 'wixpro',
                '/community': 'community',
                '/merchant': 'merchant'
            };
            const role = roleMap[href];
            if (role) {
                console.log(`handleTestScriptClick - Setting role to ${role}`);
                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/set-role`, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ role: role }),
                        credentials: 'include' // Ensure cookies are sent and received
                    });
                    if (!response.ok) {
                        const errorData = await response.json();
                        throw new Error(errorData.message || 'Failed to set role');
                    }
                    const data = await response.json();
                    console.log(`handleTestScriptClick - Role set successfully:`, data);
                    const newToken = data.token || currentToken;
                    if (newToken && newToken !== currentToken) {
                        console.log(`handleTestScriptClick - Updating localStorage with new token: ${newToken}`);
                        localStorage.setItem('authToken', newToken);
                    }
                    toastr.success(`Role set to ${role}`);
                    console.log(`handleTestScriptClick - Redirecting to / with token: ${localStorage.getItem('authToken') || 'null'}`);
                    window.location.href = '/';
                } catch (error) {
                    console.error(`handleTestScriptClick - Error setting role ${role}:`, error.message);
                    toastr.error(`Failed to set role: ${error.message}`);
                }
            } else {
                console.warn(`handleTestScriptClick - No role mapping for href: ${href}`);
            }
        }
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOMContentLoaded - Attaching navigation listeners');
            attachListeners();
        });
    } else {
        console.log('Document already loaded - Attaching navigation listeners immediately');
        attachListeners();
    }
}

function loadInitialData() {
    console.log('loadInitialData - Loading initial data');
    authenticatedFetch(`${window.apiUrl}/categories`)
        .then(response => response.json())
        .then(categories => {
            const categoryId = categories[0]?.id || 'default';
            return authenticatedFetch(`${window.apiUrl}/deals?category_id=${categoryId}`);
        })
        .then(response => response.json())
        .then(data => {
            console.log('loadInitialData - Deals fetched:', data);
            const dealList = document.getElementById('dealList');
            if (dealList) {
                dealList.innerHTML = data.map(deal => `
                    <tr>
                        <td>${deal.category}</td>
                        <td>${deal.title}</td>
                        <td><a href="${deal.url}" target="_blank">Link</a></td>
                        <td>${deal.price}</td>
                        <td>${deal.original}</td>
                        <td>${deal.discount}</td>
                        <td><img src="${deal.image}" alt="Product Image" style="width: 50px;"></td>
                        <td>${deal.quantity}</td>
                    </tr>
                `).join('');
            }
        })
        .catch(error => {
            console.error('loadInitialData - Failed to load deal listings:', error);
            toastr.error('Failed to load deal listings');
        });
}

function setupEventListeners() {
    const saveSettingsButton = document.querySelector('button[data-action="saveSettings"]');
    if (saveSettingsButton) {
        saveSettingsButton.addEventListener('click', function() {
            const userId = document.getElementById('userId')?.value || '';
            const contactName = document.getElementById('contactName')?.value || '';
            const websiteUrl = document.getElementById('websiteUrl')?.value || '';
            const emailAddress = document.getElementById('emailAddress')?.value || '';

            console.log('setupEventListeners - Saving settings for user:', userId);
            authenticatedFetch(`${window.apiUrl}/settings/user`, {
                method: 'PATCH',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ contact_name: contactName, website_url: websiteUrl, email_address: emailAddress })
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to save settings');
                return response.json();
            })
            .then(data => {
                console.log('setupEventListeners - Settings saved:', data);
                toastr.success('Settings updated successfully');
            })
            .catch(error => {
                console.error('setupEventListeners - Error saving settings:', error);
                toastr.error('Failed to save settings');
            });
        });
    }

    const apiKeysForm = document.getElementById('api-keys-form');
    if (apiKeysForm) {
        apiKeysForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const keyType = apiKeysForm.dataset.keyType;
            const fields = {};
            Array.from(apiKeysForm.querySelectorAll('input')).forEach(input => {
                fields[input.name] = input.value;
            });
            try {
                const response = await authenticatedFetch(`${window.apiUrl}/settings/api_key/${keyType}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(fields)
                });
                if (!response.ok) throw new Error('Failed to update API key');
                toastr.success(`API key ${keyType} updated successfully`);
                loadApiKeys();
            } catch (error) {
                console.error('setupEventListeners - Error updating API key:', error);
                toastr.error('Failed to update API key');
            });
        });
    }

    const affiliateForm = document.getElementById('affiliate-form');
    if (affiliateForm) {
        apiKeysForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const keyType = affiliateForm.dataset.keyType;
            const fields = {};
            Array.from(affiliateForm.querySelectorAll('input')).forEach(input => {
                fields[input.name] = input.value;
            });
            try {
                const response = await authenticatedFetch(`${window.apiUrl}/settings/affiliate_key/${keyType}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(fields)
                });
                if (!response.ok) throw new Error(`Failed to patch affiliate: ${response.status}`);
                toastr.success(`Affiliate settings for ${keyType} updated successfully`);
                loadAffiliates();
            } catch (error) {
                console.error('setupEventListeners - Error updating affiliate:', error);
                toastr.error('Failed to update affiliate');
            });
        });
    }

    const siteSettingsForm = document.getElementById('site-settings-form');
    if (siteSettingsForm) {
        siteSettingsForm.addEventListener('submit', async (e) => {
            e.preventDefault();
            const keyType = siteSettingsForm.dataset.keyType;
            const fields = {};
            Array.from(siteSettingsForm.querySelectorAll('input')).forEach(input => {
                fields[input.name] = input.value;
            });
            try {
                const response = await authenticatedFetch(`${window.apiUrl}/settings/settings_key/${keyType}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(fields)
                });
                if (!response.ok) throw new Error(`Failed to patch site settings: ${response.status}`);
                toastr.success(`Site settings for ${keyType} updated successfully`);
                loadSiteSettings();
            } catch (error) {
                console.error('setupEventListeners - Error updating site settings:', error);
                toastr.error('Failed to update site settings');
            });
        });
    }
}

async function loadAffiliates() {
    console.log('loadAffiliates - Loading affiliate programs');
    try {
        const response = await authenticatedFetch(`${window.apiUrl}/settings/affiliate_key`);
        if (!response.ok) throw new Error(`Failed to fetch affiliates: ${response.status}`);
        const data = await response.json();
        const iconsContainer = document.getElementById('affiliate-icons');
        const fieldsContainer = document.getElementById('affiliate-fields');
        const form = document.getElementById('affiliate-form');
        if (!iconsContainer || !fieldsContainer || !form) return;

        iconsContainer.innerHTML = '';
        data.settings.forEach(setting => {
            const icon = document.createElement('i');
            icon.className = setting.icon;
            icon.title = setting.comment;
            icon.dataset.keyType = setting.key_type;
            icon.style.cursor = 'pointer';
            icon.style.width = '48px';
            icon.style.height = '48px';
            icon.style.fontSize = '48px';
            icon.style.color = '#C0C0C0';
            icon.addEventListener('click', () => {
                Array.from(iconsContainer.children).forEach(i => i.style.color = '#C0C0C0');
                icon.style.color = 'currentColor';
                displayAffiliateFields(setting, fieldsContainer, form);
            });
            iconsContainer.appendChild(icon);
        });
    } catch (error) {
        console.error('loadAffiliates - Error loading affiliates:', error.message);
        toastr.error(`Error loading affiliates: ${error.message}`);
    }
}

function displayAffiliateFields(setting, fieldsContainer, form) {
    console.log('displayAffiliateFields - Displaying fields for:', setting.key_type);
    fieldsContainer.innerHTML = '';
    form.style.display = 'block';
    form.dataset.keyType = setting.key_type;

    const keySettingsContainer = document.createElement('div');
    keySettingsContainer.className = 'affiliate-key-settings';
    keySettingsContainer.style.display = 'block';
    fieldsContainer.appendChild(keySettingsContainer);

    const readmeContentContainer = document.createElement('div');
    readmeContentContainer.id = 'affiliate-readme-content';
    readmeContentContainer.style.display = 'none';
    fieldsContainer.appendChild(readmeContentContainer);

    const selectedIcon = document.createElement('i');
    selectedIcon.className = `selected-setting-icon ${setting.icon}`;
    selectedIcon.style.fontSize = '16px';
    selectedIcon.style.color = 'currentColor';
    selectedIcon.style.marginRight = '10px';
    selectedIcon.style.verticalAlign = 'middle';
    fieldsContainer.insertBefore(selectedIcon, keySettingsContainer);

    const heading = document.createElement('h3');
    heading.textContent = setting.comment || 'Affiliate Settings';
    heading.className = 'affiliate-comment-heading';
    heading.style.display = 'inline-block';
    heading.style.verticalAlign = 'middle';
    fieldsContainer.insertBefore(heading, keySettingsContainer);

    const apiLink = setting.doc_link?.find(link => link.title === 'api')?.link;
    if (apiLink) {
        const apiIcon = document.createElement('a');
        apiIcon.href = apiLink;
        apiIcon.className = 'aff Latinos-api-link';
        apiIcon.style.marginLeft = '10px';
        apiIcon.style.display = 'inline-block';
        apiIcon.style.verticalAlign = 'middle';
        apiIcon.style.color = 'currentColor';
        apiIcon.innerHTML = '<i class="fas fa-link" style="font-size: 16px;"></i>';
        apiIcon.target = '_blank';
        fieldsContainer.insertBefore(apiIcon, keySettingsContainer);
    }

    const signupLink = setting.doc_link?.find(link => link.title === 'signup')?.link;
    if (signupLink) {
        const signupIcon = document.createElement('a');
        signupIcon.href = signupLink;
        signupIcon.className = 'affiliate-signup-link';
        signupIcon.style.marginLeft = '10px';
        signupIcon.style.display = 'inline-block';
        signupIcon.style.verticalAlign = 'middle';
        signupIcon.style.color = 'currentColor';
        signupIcon.innerHTML = '<i class="fas fa-user-plus" style="font-size: 16px;"></i>';
        signupIcon.target = '_blank';
        fieldsContainer.insertBefore(signupIcon, keySettingsContainer);
    }

    const readmeLink = setting.doc_link?.find(link => link.title === 'readme')?.link;
    const readmeIcon = document.createElement('a');
    readmeIcon.href = '#';
    readmeIcon.className = 'affiliate-readme-link';
    readmeIcon.style.marginLeft = '10px';
    readmeIcon.style.display = 'inline-block';
    readmeIcon.style.verticalAlign = 'middle';
    readmeIcon.style.color = 'currentColor';
    readmeIcon.innerHTML = '<i class="fas fa-book" style="font-size: 16px;"></i>';
    readmeIcon.title = setting.comment || 'View Documentation';

    const keysIcon = document.createElement('a');
    keysIcon.href = '#';
    keysIcon.className = 'affiliate-keys-link';
    keysIcon.style.marginLeft = '10px';
    keysIcon.style.display = 'none';
    keysIcon.style.verticalAlign = 'middle';
    keysIcon.style.color = 'currentColor';
    keysIcon.innerHTML = '<i class="fas fa-key" style="font-size: 16px;"></i>';

    readmeIcon.addEventListener('click', async (e) => {
        e.preventDefault();
        keySettingsContainer.style.display = 'none';
        readmeContentContainer.style.display = 'block';
        form.querySelector('button[type="submit"]').style.display = 'none';
        readmeIcon.style.display = 'none';
        keysIcon.style.display = 'inline-block';
        if (!window.markdownCache[readmeLink]) {
            await renderMdPage(readmeLink, 'affiliate-readme-content');
            window.markdownCache[readmeLink] = readmeContentContainer.innerHTML;
        } else {
            readmeContentContainer.innerHTML = window.markdownCache[readmeLink];
        }
    });

    keysIcon.addEventListener('click', (e) => {
        e.preventDefault();
        keySettingsContainer.style.display = 'block';
        readmeContentContainer.style.display = 'none';
        form.querySelector('button[type="submit"]').style.display = 'block';
        keysIcon.style.display = 'none';
        readmeIcon.style.display = 'inline-block';
    });

    if (readmeLink) {
        fieldsContainer.insertBefore(readmeIcon, keySettingsContainer);
    }
    fieldsContainer.insertBefore(keysIcon, keySettingsContainer);

    const description = document.createElement('p');
    description.textContent = setting.description || '';
    description.className = 'affiliate-description';
    description.style.marginBottom = '15px';
    keySettingsContainer.appendChild(description);

    Object.entries(setting.fields).forEach(([name, value]) => {
        const div = document.createElement('div');
        div.style.marginBottom = '10px';
        div.innerHTML = `
            <label for="${name}">${name}:</label>
            <input type="text" id="${name}" name="${name}" value="${value}" style="width: 300px;">
        `;
        keySettingsContainer.appendChild(div);
    });

    document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
    document.getElementById('affiliates').style.display = 'block';
}

async function loadSiteSettings() {
    console.log('loadSiteSettings - Loading site settings');
    try {
        const response = await authenticatedFetch(`${window.apiUrl}/settings/settings_key`);
        if (!response.ok) throw new Error(`Failed to fetch site settings: ${response.status}`);
        const data = await response.json();
        console.log('loadSiteSettings - Site settings fetched:', data);
        const iconsContainer = document.getElementById('site-settings-icons');
        const fieldsContainer = document.getElementById('site-settings-fields');
        const form = document.getElementById('site-settings-form');
        if (!iconsContainer || !fieldsContainer || !form) {
            console.warn('loadSiteSettings - Required DOM elements not found:', {
                iconsContainer: !!iconsContainer,
                fieldsContainer: !!fieldsContainer,
                form: !!form
            });
            return;
        }

        iconsContainer.innerHTML = '';
        data.settings.forEach(setting => {
            const icon = document.createElement('i');
            icon.className = setting.icon;
            icon.title = setting.comment;
            icon.dataset.keyType = setting.key_type;
            icon.style.cursor = 'pointer';
            icon.style.width = '48px';
            icon.style.height = '48px';
            icon.style.fontSize = '48px';
            icon.style.color = '#C0C0C0';
            icon.addEventListener('click', () => {
                Array.from(iconsContainer.children).forEach(i => i.style.color = '#C0C0C0');
                icon.style.color = 'currentColor';
                displaySiteSettingsFields(setting, fieldsContainer, form);
            });
            iconsContainer.appendChild(icon);
        });
    } catch (error) {
        console.error('loadSiteSettings - Error loading site settings:', error.message);
        toastr.error(`Error loading site settings: ${error.message}`);
    }
}

function displaySiteSettingsFields(setting, fieldsContainer, form) {
    console.log('displaySiteSettingsFields - Displaying fields for:', setting.key_type);
    fieldsContainer.innerHTML = '';
    form.style.display = 'block';
    form.dataset.keyType = setting.key_type;

    const selectedIcon = document.createElement('i');
    selectedIcon.className = `selected-setting-icon ${setting.icon}`;
    selectedIcon.style.fontSize = '16px';
    selectedIcon.style.color = 'currentColor';
    selectedIcon.style.marginRight = '10px';
    selectedIcon.style.verticalAlign = 'middle';
    fieldsContainer.appendChild(selectedIcon);

    const heading = document.createElement('h3');
    heading.textContent = setting.comment || 'Site Settings';
    heading.className = 'site-settings-comment-heading';
    heading.style.display = 'inline-block';
    heading.style.verticalAlign = 'middle';
    fieldsContainer.appendChild(heading);

    const apiLink = setting.doc_link?.find(link => link.title === 'api')?.link;
    if (apiLink) {
        const apiIcon = document.createElement('a');
        apiIcon.href = apiLink;
        apiIcon.className = 'site-settings-api-link';
        apiIcon.style.marginLeft = '10px';
        apiIcon.style.display = 'inline-block';
        apiIcon.style.verticalAlign = 'middle';
        apiIcon.style.color = 'currentColor';
        apiIcon.innerHTML = '<i class="fas fa-link" style="font-size: 16px;"></i>';
        apiIcon.target = '_blank';
        fieldsContainer.appendChild(apiIcon);
    }

    const description = document.createElement('p');
    description.textContent = setting.description || '';
    description.className = 'site-settings-description';
    description.style.marginBottom = '15px';
    fieldsContainer.appendChild(description);

    Object.entries(setting.fields).forEach(([name, value]) => {
        const div = document.createElement('div');
        div.style.marginBottom = '10px';
        div.innerHTML = `
            <label for="${name}">${name}:</label>
            <input type="text" id="${name}" name="${name}" value="${value}" style="width: 300px;">
        `;
        fieldsContainer.appendChild(div);
    });

    document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
    document.getElementById('site_settings').style.display = 'block';
}

async function loadApiKeys() {
    console.log('loadApiKeys - Loading API keys');
    try {
        const response = await authenticatedFetch(`${window.apiUrl}/settings/api_key`);
        if (!response.ok) throw new Error(`Failed to fetch API keys: ${response.status}`);
        const data = await response.json();
        console.log('loadApiKeys - API keys fetched:', data);
        const iconsContainer = document.getElementById('api-keys-icons');
        const fieldsContainer = document.getElementById('api-keys-fields');
        const form = document.getElementById('api-keys-form');
        if (!iconsContainer || !fieldsContainer || !form) {
            console.warn('loadApiKeys - Required DOM elements not found:', {
                iconsContainer: !!iconsContainer,
                fieldsContainer: !!fieldsContainer,
                form: !!form
            });
            return;
        }

        iconsContainer.innerHTML = '';
        data.settings.forEach(setting => {
            const icon = document.createElement('i');
            icon.className = setting.icon || `icon-${setting.key_type}`;
            icon.title = setting.comment || setting.key_type;
            icon.dataset.key = setting.key_type;
            icon.style.cursor = 'pointer';
            icon.style.width = '48px';
            icon.style.height = '48px';
            icon.style.fontSize = '48px';
            icon.style.color = '#C0C0C0';
            icon.addEventListener('click', () => {
                Array.from(iconsContainer.children).forEach(i => i.style.color = '#C0C0C0');
                icon.style.color = 'currentColor';
                displayApiKeyFields(setting, fieldsContainer, form);
            });
            iconsContainer.appendChild(icon);
        });
    } catch (error) {
        console.error('loadApiKeys - Error loading API keys:', error.message);
        toastr.error(`Error loading API keys: ${error.message}`);
    }
}

function displayApiKeyFields(setting, fieldsContainer, form) {
    console.log('displayApiKeyFields - Displaying fields for:', setting.key_type);
    fieldsContainer.innerHTML = '';
    form.style.display = 'block';
    form.dataset.keyType = setting.key_type;

    const keySettingsContainer = document.createElement('div');
    keySettingsContainer.className = 'api-keys-settings';
    keySettingsContainer.style.display = 'block';
    fieldsContainer.appendChild(keySettingsContainer);

    const mdContentContainer = document.createElement('div');
    mdContentContainer.id = 'api-keys-md-content';
    mdContentContainer.style.display = 'none';
    fieldsContainer.appendChild(mdContentContainer);

    const selectedIcon = document.createElement('i');
    selectedIcon.className = `selected-setting-icon ${setting.icon || 'fas fa-key'}`;
    selectedIcon.style.fontSize = '16px';
    selectedIcon.style.color = 'currentColor';
    selectedIcon.style.marginRight = '10px';
    selectedIcon.style.verticalAlign = 'middle';
    fieldsContainer.insertBefore(selectedIcon, keySettingsContainer);

    const heading = document.createElement('h3');
    heading.textContent = setting.comment || setting.key_type || 'API Key Settings';
    heading.className = 'api-keys-comment-heading';
    heading.style.display = 'inline-block';
    heading.style.verticalAlign = 'middle';
    fieldsContainer.insertBefore(heading, keySettingsContainer);

    const mdLink = document.createElement('a');
    mdLink.href = '#';
    mdLink.className = 'api-keys-md-link';
    mdLink.style.marginLeft = '10px';
    mdLink.style.display = 'inline-block';
    mdLink.style.verticalAlign = 'middle';
    mdLink.style.color = 'currentColor';
    mdLink.innerHTML = '<i class="fas fa-book" style="font-size: 16px;"></i>';
    mdLink.title = setting.comment || 'View Documentation';

    const keysLink = document.createElement('a');
    keysLink.href = '#';
    keysLink.className = 'api-keys-keys-link';
    keysLink.style.marginLeft = '10px';
    keysLink.style.display = 'none';
    keysLink.style.verticalAlign = 'middle';
    keysLink.style.color = 'currentColor';
    keysLink.innerHTML = '<i class="fas fa-key" style="font-size: 16px;"></i>';

    mdLink.addEventListener('click', async (e) => {
        e.preventDefault();
        keySettingsContainer.style.display = 'none';
        mdContentContainer.style.display = 'block';
        form.querySelector('button[type="submit"]').style.display = 'none';
        mdLink.style.display = 'none';
        keysLink.style.display = 'inline-block';
        const readmePath = setting.readme_path || `/static/docs/api-keys/${setting.key_type}.md`;
        if (!window.markdownCache[readmePath]) {
            await renderMdPage(readmePath, 'api-keys-md-content');
            window.markdownCache[readmePath] = mdContentContainer.innerHTML;
        } else {
            mdContentContainer.innerHTML = window.markdownCache[readmePath];
        }
    });

    keysLink.addEventListener('click', (e) => {
        e.preventDefault();
        keySettingsContainer.style.display = 'block';
        mdContentContainer.style.display = 'none';
        form.querySelector('button[type="submit"]').style.display = 'block';
        keysLink.style.display = 'none';
        mdLink.style.display = 'inline-block';
    });

    fieldsContainer.insertBefore(mdLink, keySettingsContainer);
    fieldsContainer.insertBefore(keysLink, keySettingsContainer);

    const description = document.createElement('p');
    description.textContent = setting.description || '';
    description.className = 'api-keys-description';
    description.style.marginBottom = '15px';
    keySettingsContainer.appendChild(description);

    Object.entries(setting.fields).forEach(([name, value]) => {
        const div = document.createElement('div');
        div.style.marginBottom = '10px';
        div.innerHTML = `
            <label for="${name}">${name}:</label>
            <input type="text" id="${name}" name="${name}" value="${value}" style="width: 300px;">
        `;
        keySettingsContainer.appendChild(div);
    });

    const saveButton = form.querySelector('button[type="submit"]');
    saveButton.style.display = 'block';

    document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
    document.getElementById('api_keys').style.display = 'block';
}

function loadUserData(role) {
    console.log(`loadUserData - Fetching users for role: ${role}`);
    const permissionLists = {
        'admin': ['admin', 'validated', 'debug'],
        'partner': ['wixpro', 'validated', 'verified'],
        'community': ['community', 'validated'],
        'merchant': ['merchant', 'validated', 'verified']
    };
    const allowedPermissions = permissionLists[role] || [];

    authenticatedFetch(`${window.apiUrl}/users/${role}`)
        .then(response => {
            if (!response.ok) throw new Error(`Failed to fetch users for ${role}: ${response.status}`);
            return response.json();
        })
        .then(data => {
            console.log(`loadUserData - Users fetched for role ${role}:`, data);
            const userList = document.getElementById('user_list');
            if (userList) {
                userList.innerHTML = data.users.map(user => {
                    const fields = user.fields.reduce((acc, field) => {
                        acc[field.field_name] = field.field_value;
                        return acc;
                    }, {});
                    const userPermissions = Array.isArray(fields.permissions) ? fields.permissions : [];
                    const permissionsHtml = allowedPermissions.map(perm => `
                        <label style="margin-right: 10px;">
                            <input type="checkbox" 
                                   name="permission-${user.USERid}-${perm}" 
                                   ${userPermissions.includes(perm) ? 'checked' : ''} 
                                   onchange="updatePermission('${user.USERid}', '${perm}', this.checked, '${role}')">
                            ${perm}
                        </label>
                    `).join('');
                    let actions = `<button onclick="modifyPermissions('${user.USERid}', '${role}')">Modify Permissions</button>`;
                    return `
                        <tr data-userid="${user.USERid}">
                            <td>${user.USERid}</td>
                            <td>${fields.contact_name || ''}</td>
                            <td>${fields.website_url || ''}</td>
                            <td>${fields.email_address || ''}</td>
                            <td>${fields.phone_number || ''}</td>
                            <td>${permissionsHtml}</td>
                            <td>${actions}</td>
                        </tr>
                    `;
                }).join('');
            }
        })
        .catch(error => {
            console.error(`loadUserData - Error fetching users for ${role}:`, error.message);
            toastr.error(`Failed to load users for ${role}`);
            const userList = document.getElementById('user_list');
            if (userList) userList.innerHTML = '<tr><td colspan="7">Error loading data</td></tr>';
        });
}

function updatePermission(userId, permission, isChecked, role) {
    console.log(`updatePermission - Updating permission ${permission} for user ${userId} (role: ${role}): ${isChecked ? 'add' : 'remove'}`);
    const method = isChecked ? 'PATCH' : 'DELETE';
    authenticatedFetch(`${window.apiUrl}/permission`, {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ USERid: userId, permission: permission })
    })
    .then(response => {
        if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log(`updatePermission - Success:`, data);
        toastr.success(data.message);
        if (!isChecked && permission === role) {
            const userRow = document.querySelector(`#user_list tr[data-userid="${userId}"]`);
            if (userRow) userRow.remove();
        }
    })
    .catch(error => {
        console.error(`updatePermission - Error:`, error.message);
        toastr.error(`Failed to update permission: ${error.message}`);
        const checkbox = document.querySelector(`input[name="permission-${userId}-${permission}"]`);
        if (checkbox) checkbox.checked = !isChecked;
    });
}

function modifyPermissions(userId, role) {
    console.log(`modifyPermissions - Modifying permissions for user ${userId} with role ${role}`);
    toastr.info(`Additional permission modification for ${userId} (role: ${role}) not yet implemented`);
}

// Export functions
window.initializeAdmin = initializeAdmin;
window.loadInitialData = loadInitialData;
window.setupEventListeners = setupEventListeners;
window.loadAffiliates = loadAffiliates;
window.displayAffiliateFields = displayAffiliateFields;
window.loadSiteSettings = loadSiteSettings;
window.displaySiteSettingsFields = displaySiteSettingsFields;
window.loadUserData = loadUserData;
window.updatePermission = updatePermission;
window.modifyPermissions = modifyPermissions;
window.loadApiKeys = loadApiKeys;
window.displayApiKeyFields = displayApiKeyFields;
window.updateMenu = updateMenu;
js/amd-admin-page.js
// admin-page.js
function initializeAdmin(pageType) {
    console.log('initializeAdmin - Initializing admin page with type: ' + pageType);
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('initializeAdmin - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token); // Add permission check for robustness
    if (!decoded || !decoded.permissions || !decoded.permissions.includes('admin')) {
        console.error('initializeAdmin - Invalid token or no admin permission, redirecting to /');
        toastr.error('Permission denied: Admin access required');
        window.location.href = '/';
        return;
    }

    // Load initial content
    setupNavigation();

    // Fetch and display contact_name in the welcome section
    if (typeof loadSettings === 'function') {
        loadSettings().then(settings => {
            const contactName = settings?.contact_name || 'User'; // Use optional chaining and fallback
            const userContactNameSpan = document.getElementById('user-contact-name');
            if (userContactNameSpan) {
                userContactNameSpan.textContent = contactName;
                console.log('initializeAdmin - Updated contact name in welcome section:', contactName);
            } else {
                console.warn('initializeAdmin - user-contact-name span not found');
            }
        }).catch(error => {
            console.error('initializeAdmin - Error loading settings:', error.message);
            toastr.error('Failed to load user settings');
            // Set default name on error
            const userContactNameSpan = document.getElementById('user-contact-name');
            if (userContactNameSpan) {
                userContactNameSpan.textContent = 'User';
            }
        });
    } else {
        console.error('initializeAdmin - loadSettings function not found');
        toastr.error('Settings loader unavailable');
        // Set default name if loadSettings is missing
        const userContactNameSpan = document.getElementById('user-contact-name');
        if (userContactNameSpan) {
            userContactNameSpan.textContent = 'User';
        }
    }

    loadInitialData();
    setupEventListeners();
    loadAffiliates(); // Load affiliate programs dynamically
    loadSiteSettings(); // Load site settings dynamically

    // Ensure loading overlay is hidden
    hideLoadingOverlay();
    console.log('Admin page initialized');
}

function setupNavigation() {
    console.log('setupNavigation - Setting up navigation');
    // Delegate to site-navigation.js's initializeNavigation if available
    if (typeof window.siteNavigation?.initializeNavigation === 'function') {
        window.siteNavigation.initializeNavigation();
    }

    // Ensure DOM is ready before attaching listeners
    const attachListeners = () => {
        // Select all buttons in the userManagement submenu
        const userManagementButtons = document.querySelectorAll('#userManagement button[data-section="user_management"]');
        console.log('setupNavigation - Found userManagement buttons:', userManagementButtons.length);

        userManagementButtons.forEach(button => {
            // Remove any existing listeners to prevent duplicates
            button.removeEventListener('click', handleUserManagementClick);
            button.addEventListener('click', handleUserManagementClick);
            console.log('setupNavigation - Attached click listener to button:', {
                section: button.dataset.section,
                role: button.dataset.role
            });
        });

        // Handle other menu buttons
        const otherButtons = document.querySelectorAll('.menu button[data-section]:not([data-section="user_management"])');
        otherButtons.forEach(button => {
            button.removeEventListener('click', handleOtherClick);
            button.addEventListener('click', handleOtherClick);
            console.log('setupNavigation - Attached click listener to other button:', {
                section: button.dataset.section,
                submenu: button.dataset.submenu
            });
        });
    };

    // Handle userManagement button clicks
    function handleUserManagementClick(event) {
        event.preventDefault();
        event.stopPropagation();
        const button = event.currentTarget;
        const sectionId = button.getAttribute('data-section');
        const role = button.getAttribute('data-role');

        console.log(`handleUserManagementClick - Button clicked: sectionId=${sectionId}, role=${role}`);

        if (sectionId === 'user_management' && role) {
            // Hide all sections
            document.querySelectorAll('.section').forEach(section => {
                section.style.display = 'none';
            });

            // Show the user_management section
            const section = document.getElementById(sectionId);
            if (section) {
                section.style.display = 'block';
                console.log(`handleUserManagementClick - Section ${sectionId} shown`);

                // Update the title and icon
                const titleSpan = document.getElementById('user_role_title');
                const iconSpan = document.getElementById('user_role_icon');
                const title = button.querySelector('.button-content').textContent.trim();
                // Find the icon element (either <span class="menu-size"> or <i class="icon-...">) inside .button-content
                const buttonContent = button.querySelector('.button-content');
                const iconElement = buttonContent.querySelector('.menu-size') || buttonContent.querySelector('i[class*="icon-"]');
                let iconClass = '';
                if (iconElement) {
                    iconClass = Array.from(iconElement.classList).find(cls => cls.startsWith('icon-')) || '';
                    console.log(`handleUserManagementClick - Found icon class: ${iconClass}`);
                } else {
                    console.warn('handleUserManagementClick - Icon element not found in button, using default');
                    iconClass = `icon-${role}`; // Fallback to role-based icon
                }
                if (titleSpan && iconSpan) {
                    titleSpan.textContent = title;
                    iconSpan.className = `menu-size ${iconClass}`;
                    console.log(`handleUserManagementClick - Updated title to ${title} and icon to ${iconClass}`);
                } else {
                    console.warn('handleUserManagementClick - Title or icon span not found');
                }

                // Load user data
                loadUserData(role);
            } else {
                console.warn(`handleUserManagementClick - Section ${sectionId} not found`);
            }
        }
    }

    // Handle other button clicks (e.g., submenu toggles)
    function handleOtherClick(event) {
        event.preventDefault();
        event.stopPropagation();
        const button = event.currentTarget;
        const sectionId = button.getAttribute('data-section');
        const submenuId = button.getAttribute('data-submenu');

        console.log(`handleOtherClick - Button clicked: sectionId=${sectionId}, submenuId=${submenuId}`);

        // Let site-navigation.js handle submenu toggling and section display
        // No need to duplicate logic here since site-navigation.js already handles it
        // Just ensure the section is shown if needed
        if (sectionId && sectionId !== 'user_management') {
            document.querySelectorAll('.section').forEach(section => {
                section.style.display = 'none';
            });
            const section = document.getElementById(sectionId);
            if (section) {
                section.style.display = 'block';
                console.log(`handleOtherClick - Section ${sectionId} shown`);
            } else {
                console.warn(`handleOtherClick - Section ${sectionId} not found`);
            }
        }
    }

    // Attach listeners after DOM is ready
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', () => {
            console.log('DOMContentLoaded - Attaching navigation listeners');
            attachListeners();
        });
    } else {
        console.log('Document already loaded - Attaching navigation listeners immediately');
        attachListeners();
    }
}

function loadInitialData() {
    console.log('loadInitialData - Loading initial data');
    // First, fetch categories to get a valid category_id
    authenticatedFetch(`${window.apiUrl}/categories`)
        .then(response => response.json())
        .then(categories => {
            const categoryId = categories[0]?.id || 'default'; // Use the first category or a default
            return authenticatedFetch(`${window.apiUrl}/deals?category_id=${categoryId}`);
        })
        .then(response => response.json())
        .then(data => {
            console.log('loadInitialData - Deals fetched:', data);
            const dealList = document.getElementById('dealList');
            if (dealList) {
                dealList.innerHTML = data.map(deal => `
                    <tr>
                        <td>${deal.category}</td>
                        <td>${deal.title}</td>
                        <td><a href="${deal.url}" target="_blank">Link</a></td>
                        <td>${deal.price}</td>
                        <td>${deal.original}</td>
                        <td>${deal.discount}</td>
                        <td><img src="${deal.image}" alt="Product Image" style="width: 50px;"></td>
                        <td>${deal.quantity}</td>
                    </tr>
                `).join('');
            }
        })
        .catch(error => {
            console.error('loadInitialData - Failed to load deal listings:', error);
            toastr.error('Failed to load deal listings');
        });
}

function setupEventListeners() {
    const saveSettingsButton = document.querySelector('button[data-action="saveSettings"]');
    if (saveSettingsButton) {
        saveSettingsButton.addEventListener('click', function() {
            const userId = document.getElementById('userId')?.value || '';
            const contactName = document.getElementById('contactName')?.value || '';
            const websiteUrl = document.getElementById('websiteUrl')?.value || '';
            const emailAddress = document.getElementById('emailAddress')?.value || '';

            console.log('setupEventListeners - Saving settings for user:', userId);
            authenticatedFetch(`${window.apiUrl}/settings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, contactName, websiteUrl, emailAddress })
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to save settings');
                return response.json();
            })
            .then(data => {
                console.log('setupEventListeners - Settings saved:', data);
                toastr.success('Settings updated successfully');
            })
            .catch(error => {
                console.error('setupEventListeners - Error saving settings:', error);
                toastr.error('Failed to save settings');
            });
        });
    } else {
        console.warn('setupEventListeners - Save settings button not found');
    }
}

async function loadAffiliates() {
    console.log('loadAffiliates - Loading affiliate programs');
    try {
        const response = await authenticatedFetch('https://clubmadeira.io/settings/affiliate_key');
        if (!response.ok) throw new Error(`Failed to fetch affiliates: ${response.status}`);
        const data = await response.json();
        console.log('loadAffiliates - Affiliates fetched:', JSON.stringify(data));

        const iconsContainer = document.getElementById('affiliate-icons');
        const fieldsContainer = document.getElementById('affiliate-fields');
        const form = document.getElementById('affiliate-form');
        if (!iconsContainer || !fieldsContainer || !form) {
            console.warn('loadAffiliates - Required DOM elements not found');
            return;
        }

        // Track the currently selected key_type
        const selectedKeyType = form.dataset.selectedKeyType || null;

        iconsContainer.innerHTML = '';
        data.settings.forEach(setting => {
            const icon = document.createElement('i');
            icon.className = setting.icon;
            icon.title = setting.comment;
            icon.dataset.keyType = setting.key_type;
            icon.style.cursor = 'pointer';
            icon.style.width = '48px';
            icon.style.height = '48px';
            icon.style.fontSize = '48px';
            // Set color based on whether this icon is selected
            icon.style.color = (selectedKeyType === setting.key_type) ? 'currentColor' : '#C0C0C0';
            icon.addEventListener('click', () => {
                // Update selected key_type
                form.dataset.selectedKeyType = setting.key_type;
                // Reset all icons to unselected color
                Array.from(iconsContainer.children).forEach(i => i.style.color = '#C0C0C0');
                // Set clicked icon to currentColor
                icon.style.color = 'currentColor';
                displayAffiliateFields(setting, fieldsContainer, form);
            });
            iconsContainer.appendChild(icon);
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const keyType = form.dataset.keyType;
            const fields = {};
            Array.from(fieldsContainer.querySelectorAll('input')).forEach(input => {
                fields[input.name] = input.value;
            });
            try {
                const patchResponse = await authenticatedFetch(`https://clubmadeira.io/settings/affiliate_key/${keyType}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(fields)
                });
                if (!patchResponse.ok) throw new Error(`Failed to patch affiliate: ${patchResponse.status}`);
                toastr.success(`Affiliate settings for ${keyType} updated successfully`);
                loadAffiliates();
            } catch (error) {
                console.error('loadAffiliates - Error patching affiliate:', error.message);
                toastr.error(`Error updating affiliate: ${error.message}`);
            }
        });

        console.log('loadAffiliates - Affiliates initialized');
    } catch (error) {
        console.error('loadAffiliates - Error loading affiliates:', error.message);
        toastr.error(`Error loading affiliates: ${error.message}`);
    }
}

// Initialize Markdown cache
window.markdownCache = window.markdownCache || {};

function displayAffiliateFields(setting, fieldsContainer, form) {
    console.log('displayAffiliateFields - Displaying fields for:', setting.key_type);
    fieldsContainer.innerHTML = '';
    form.style.display = 'block';
    form.dataset.keyType = setting.key_type;

    // Create containers for key settings and Markdown content
    const keySettingsContainer = document.createElement('div');
    keySettingsContainer.className = 'affiliate-key-settings';
    keySettingsContainer.style.display = 'block';
    fieldsContainer.appendChild(keySettingsContainer);

    const readmeContentContainer = document.createElement('div');
    readmeContentContainer.id = 'affiliate-readme-content';
    readmeContentContainer.style.display = 'none';
    fieldsContainer.appendChild(readmeContentContainer);

    // Add selected setting icon
    const selectedIcon = document.createElement('i');
    selectedIcon.className = setting.icon;
    selectedIcon.classList.add('selected-setting-icon');
    selectedIcon.style.fontSize = '16px';
    selectedIcon.style.color = 'currentColor';
    selectedIcon.style.marginRight = '10px';
    selectedIcon.style.verticalAlign = 'middle';
    fieldsContainer.insertBefore(selectedIcon, fieldsContainer.firstChild);

    // Add heading with comment and URL icons
    const heading = document.createElement('h3');
    heading.textContent = setting.comment || 'Affiliate Settings';
    heading.className = 'affiliate-comment-heading';
    heading.style.display = 'inline-block';
    heading.style.verticalAlign = 'middle';
    fieldsContainer.insertBefore(heading, keySettingsContainer);

    // Add description
    const description = document.createElement('p');
    description.textContent = setting.description || '';
    description.className = 'affiliate-description';
    description.style.marginBottom = '15px';
    keySettingsContainer.appendChild(description);

    // Add URL icons
    const apiLink = setting.doc_link.find(link => link.title === 'api')?.link;
    if (apiLink) {
        const apiIcon = document.createElement('a');
        apiIcon.href = apiLink;
        apiIcon.className = 'affiliate-api-link';
        apiIcon.style.marginLeft = '10px';
        apiIcon.style.display = 'inline-block';
        apiIcon.style.verticalAlign = 'middle';
        apiIcon.style.color = 'currentColor';
        apiIcon.innerHTML = '<i class="fas fa-link" style="font-size: 16px;"></i>';
        apiIcon.target = '_blank';
        fieldsContainer.insertBefore(apiIcon, keySettingsContainer);
    }

    const signupLink = setting.doc_link.find(link => link.title === 'signup')?.link;
    if (signupLink) {
        const signupIcon = document.createElement('a');
        signupIcon.href = signupLink;
        signupIcon.className = 'affiliate-signup-link';
        signupIcon.style.marginLeft = '10px';
        signupIcon.style.display = 'inline-block';
        signupIcon.style.verticalAlign = 'middle';
        signupIcon.style.color = 'currentColor';
        signupIcon.innerHTML = '<i class="fas fa-user-plus" style="font-size: 16px;"></i>';
        signupIcon.target = '_blank';
        fieldsContainer.insertBefore(signupIcon, keySettingsContainer);
    }

    const readmeLink = setting.doc_link.find(link => link.title === 'readme')?.link;
    if (readmeLink) {
        const readmeIcon = document.createElement('a');
        readmeIcon.href = '#'; // Prevent default navigation
        readmeIcon.className = 'affiliate-readme-link';
        readmeIcon.style.marginLeft = '10px';
        readmeIcon.style.display = 'inline-block';
        readmeIcon.style.verticalAlign = 'middle';
        readmeIcon.style.color = 'currentColor';
        readmeIcon.innerHTML = '<i class="fas fa-book" style="font-size: 16px;"></i>';
        readmeIcon.addEventListener('click', async (e) => {
            e.preventDefault();
            // Hide key settings and show Markdown
            keySettingsContainer.style.display = 'none';
            readmeContentContainer.style.display = 'block';
            // Show the "Keys" link
            const keysLink = fieldsContainer.querySelector('.affiliate-keys-link');
            if (keysLink) keysLink.style.display = 'inline-block';
            // Load Markdown content if not cached
            if (!window.markdownCache[readmeLink]) {
                await renderMdPage(readmeLink, 'affiliate-readme-content');
                window.markdownCache[readmeLink] = readmeContentContainer.innerHTML;
            } else {
                readmeContentContainer.innerHTML = window.markdownCache[readmeLink];
                console.log('displayAffiliateFields - Loaded Markdown from cache for:', readmeLink);
            }
        });
        fieldsContainer.insertBefore(readmeIcon, keySettingsContainer);
    }

    // Add "Keys" link
    const keysIcon = document.createElement('a');
    keysIcon.href = '#';
    keysIcon.className = 'affiliate-keys-link';
    keysIcon.style.marginLeft = '10px';
    keysIcon.style.display = 'none'; // Hidden by default
    keysIcon.style.verticalAlign = 'middle';
    keysIcon.style.color = 'currentColor';
    keysIcon.innerHTML = '<i class="fas fa-key" style="font-size: 16px;"></i>';
    keysIcon.addEventListener('click', (e) => {
        e.preventDefault();
        // Show key settings and hide Markdown
        keySettingsContainer.style.display = 'block';
        readmeContentContainer.style.display = 'none';
        keysIcon.style.display = 'none';
    });
    fieldsContainer.insertBefore(keysIcon, keySettingsContainer);

    // Add input fields to key settings container
    Object.entries(setting.fields).forEach(([name, value]) => {
        const div = document.createElement('div');
        div.style.marginBottom = '10px';
        div.innerHTML = `
            <label for="${name}">${name}:</label>
            <input type="text" id="${name}" name="${name}" value="${value}" style="width: 300px;">
        `;
        keySettingsContainer.appendChild(div);
    });

    // Hide other sections and show affiliates section
    document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
    document.getElementById('affiliates').style.display = 'block';
}

async function loadSiteSettings() {
    console.log('loadSiteSettings - Loading site settings');
    try {
        const response = await authenticatedFetch('https://clubmadeira.io/settings/settings_key');
        if (!response.ok) throw new Error(`Failed to fetch site settings: ${response.status}`);
        const data = await response.json();
        console.log('loadSiteSettings - Site settings fetched:', JSON.stringify(data));

        const iconsContainer = document.getElementById('site-settings-icons');
        const fieldsContainer = document.getElementById('site-settings-fields');
        const form = document.getElementById('site-settings-form');
        if (!iconsContainer || !fieldsContainer || !form) {
            console.warn('loadSiteSettings - Required DOM elements not found');
            return;
        }

        // Track the currently selected key_type
        const selectedKeyType = form.dataset.selectedKeyType || null;

        iconsContainer.innerHTML = '';
        data.settings.forEach(setting => {
            const icon = document.createElement('i');
            icon.className = setting.icon;
            icon.title = setting.comment;
            icon.dataset.keyType = setting.key_type;
            icon.style.cursor = 'pointer';
            icon.style.width = '48px';
            icon.style.height = '48px';
            icon.style.fontSize = '48px';
            // Set color based on whether this icon is selected
            icon.style.color = (selectedKeyType === setting.key_type) ? 'currentColor' : '#C0C0C0';
            icon.addEventListener('click', () => {
                // Update selected key_type
                form.dataset.selectedKeyType = setting.key_type;
                // Reset all icons to unselected color
                Array.from(iconsContainer.children).forEach(i => i.style.color = '#C0C0C0');
                // Set clicked icon to currentColor
                icon.style.color = 'currentColor';
                displaySiteSettingsFields(setting, fieldsContainer, form);
            });
            iconsContainer.appendChild(icon);
        });

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const keyType = form.dataset.keyType;
            const fields = {};
            Array.from(fieldsContainer.querySelectorAll('input')).forEach(input => {
                fields[input.name] = input.value;
            });
            try {
                const patchResponse = await authenticatedFetch(`https://clubmadeira.io/settings/settings_key/${keyType}`, {
                    method: 'PATCH',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(fields)
                });
                if (!patchResponse.ok) throw new Error(`Failed to patch site settings: ${patchResponse.status}`);
                toastr.success(`Site settings for ${keyType} updated successfully`);
                loadSiteSettings();
            } catch (error) {
                console.error('loadSiteSettings - Error patching site settings:', error.message);
                toastr.error(`Error updating site settings: ${error.message}`);
            }
        });

        console.log('loadSiteSettings - Site settings initialized');
    } catch (error) {
        console.error('loadSiteSettings - Error loading site settings:', error.message);
        toastr.error(`Error loading site settings: ${error.message}`);
    }
}

function displaySiteSettingsFields(setting, fieldsContainer, form) {
    console.log('displaySiteSettingsFields - Displaying fields for:', setting.key_type);
    fieldsContainer.innerHTML = '';
    form.style.display = 'block';
    form.dataset.keyType = setting.key_type;

    // Add selected setting icon
    const selectedIcon = document.createElement('i');
    selectedIcon.className = setting.icon;
    selectedIcon.classList.add('selected-setting-icon');
    selectedIcon.style.fontSize = '16px';
    selectedIcon.style.color = 'currentColor';
    selectedIcon.style.marginRight = '10px';
    selectedIcon.style.verticalAlign = 'middle';
    fieldsContainer.appendChild(selectedIcon);

    // Add heading with comment and URL icon
    const heading = document.createElement('h3');
    heading.textContent = setting.comment || 'Site Settings';
    heading.className = 'site-settings-comment-heading';
    heading.style.display = 'inline-block';
    heading.style.verticalAlign = 'middle';
    fieldsContainer.appendChild(heading);

    // Add API URL icon
    const apiLink = setting.doc_link.find(link => link.title === 'api')?.link;
    if (apiLink) {
        const apiIcon = document.createElement('a');
        apiIcon.href = apiLink;
        apiIcon.className = 'site-settings-api-link';
        apiIcon.style.marginLeft = '10px';
        apiIcon.style.display = 'inline-block';
        apiIcon.style.verticalAlign = 'middle';
        apiIcon.style.color = 'currentColor';
        apiIcon.innerHTML = '<i class="fas fa-link" style="font-size: 16px;"></i>';
        apiIcon.target = '_blank';
        fieldsContainer.appendChild(apiIcon);
    }

    // Add description
    const description = document.createElement('p');
    description.textContent = setting.description || '';
    description.className = 'site-settings-description';
    description.style.marginBottom = '15px';
    fieldsContainer.appendChild(description);

    // Add input fields
    Object.entries(setting.fields).forEach(([name, value]) => {
        const div = document.createElement('div');
        div.style.marginBottom = '10px';
        div.innerHTML = `
            <label for="${name}">${name}:</label>
            <input type="text" id="${name}" name="${name}" value="${value}" style="width: 300px;">
        `;
        fieldsContainer.appendChild(div);
    });

    // Hide other sections and show site settings section
    document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
    document.getElementById('site_settings').style.display = 'block';
}

function loadUserData(role) {
    console.log(`loadUserData - Fetching users for role: ${role}`);
    // Define role-specific permission lists
    const permissionLists = {
        'admin': ['admin', 'validated', 'debug'],
        'partner': ['partner', 'validated', 'verified'], // Updated from wixpro to partner
        'community': ['community', 'validated'],
        'merchant': ['merchant', 'validated', 'verified']
    };
    const allowedPermissions = permissionLists[role] || [];

    authenticatedFetch(`https://clubmadeira.io/users/${role}`)
        .then(response => {
            if (!response.ok) throw new Error(`Failed to fetch users for ${role}: ${response.status}`);
            return response.json();
        })
        .then(data => {
            console.log(`loadUserData - Users fetched for ${role}:`, data);
            const userList = document.getElementById('user_list');
            if (userList) {
                userList.innerHTML = data.users.map(user => {
                    const fields = user.fields.reduce((acc, field) => {
                        acc[field.field_name] = field.field_value;
                        return acc;
                    }, {});
                    const userPermissions = Array.isArray(fields.permissions) ? fields.permissions : [];
                    // Generate checkboxes for role-specific permissions
                    const permissionsHtml = allowedPermissions.map(perm => `
                        <label style="margin-right: 10px;">
                            <input type="checkbox" 
                                   name="permission-${user.USERid}-${perm}" 
                                   ${userPermissions.includes(perm) ? 'checked' : ''} 
                                   onchange="updatePermission('${user.USERid}', '${perm}', this.checked, '${role}')">
                            ${perm}
                        </label>
                    `).join('');
                    // Role-specific actions (placeholder)
                    let actions = `<button onclick="modifyPermissions('${user.USERid}', '${role}')">Modify Permissions</button>`;
                    return `
                        <tr data-userid="${user.USERid}">
                            <td>${user.USERid}</td>
                            <td>${fields.contact_name || ''}</td>
                            <td>${fields.website_url || ''}</td>
                            <td>${fields.email_address || ''}</td>
                            <td>${fields.phone_number || ''}</td>
                            <td>${permissionsHtml}</td>
                            <td>${actions}</td>
                        </tr>
                    `;
                }).join('');
                console.log('loadUserData - User list populated');
            } else {
                console.error('loadUserData - user_list element not found');
            }
        })
        .catch(error => {
            console.error(`loadUserData - Error fetching users for ${role}:`, error.message);
            toastr.error(`Failed to load users for ${role}`);
            const userList = document.getElementById('user_list');
            if (userList) userList.innerHTML = '<tr><td colspan="7">Error loading data</td></tr>';
        });
}

function updatePermission(userId, permission, isChecked, role) {
    console.log(`updatePermission - Updating permission ${permission} for user ${userId} (role: ${role}): ${isChecked ? 'add' : 'remove'}`);
    const method = isChecked ? 'PATCH' : 'DELETE';
    authenticatedFetch('https://clubmadeira.io/permission', {
        method: method,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ USERid: userId, permission: permission })
    })
    .then(response => {
        if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
        return response.json();
    })
    .then(data => {
        console.log(`updatePermission - Success:`, data);
        toastr.success(data.message);
        // If removing the role's defining permission, remove the user from the list
        if (!isChecked && permission === role) {
            const userRow = document.querySelector(`#user_list tr[data-userid="${userId}"]`);
            if (userRow) {
                userRow.remove();
                console.log(`updatePermission - Removed user ${userId} from ${role} list`);
            }
        }
    })
    .catch(error => {
        console.error(`updatePermission - Error:`, error.message);
        toastr.error(`Failed to update permission: ${error.message}`);
        // Revert checkbox state on error
        const checkbox = document.querySelector(`input[name="permission-${userId}-${permission}"]`);
        if (checkbox) checkbox.checked = !isChecked;
    });
}

// Placeholder for permission modification
function modifyPermissions(userId, role) {
    console.log(`modifyPermissions - Modifying permissions for user ${userId} with role ${role}`);
    toastr.info(`Additional permission modification for ${userId} (role: ${role}) not yet implemented`);
}

// Export for use in other scripts
window.initializeAdmin = initializeAdmin;
window.loadInitialData = loadInitialData;
window.setupEventListeners = setupEventListeners;
window.loadAffiliates = loadAffiliates;
window.displayAffiliateFields = displayAffiliateFields;
window.loadSiteSettings = loadSiteSettings;
window.displaySiteSettingsFields = displaySiteSettingsFields;
window.loadUserData = loadUserData;
window.updatePermission = updatePermission;
window.modifyPermissions = modifyPermissions;
js/category-management.js
// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
        checkbox.addEventListener('change', () => saveCategories(localStorage.getItem('userId'))); // Added save listener
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/categories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context - Removed as now handled in createTreeNode
        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/categories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/categories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}
js/common.js
// common.js
// Purpose: Provides core shared utilities for all pages, including Toastr configuration and Markdown rendering.

// Guard against multiple inclusions
if (!window.commonInitialized) {
    window.commonInitialized = true;

    // Initialize markdown cache
    window.markdownCache = window.markdownCache || {};

    // Configures Toastr for consistent toast notifications across the application
    function setupToastr() {
        console.log('setupToastr - Initiating Toastr configuration');
        if (typeof toastr === 'undefined') {
            console.error('setupToastr - Toastr library not loaded');
            return;
        }

        // Override Toastr methods to log messages to the console
        (function() {
            const originalSuccess = toastr.success;
            const originalError = toastr.error;
            const originalInfo = toastr.info;
            const originalWarning = toastr.warning;

            toastr.success = function(message, title, options) {
                console.log(`Toastr Success: ${title ? title + ' - ' : ''}${message}`);
                return originalSuccess.call(toastr, message, title, options);
            };
            toastr.error = function(message, title, options) {
                console.log(`Toastr Error: ${title ? title + ' - ' : ''}${message}`);
                return originalError.call(toastr, message, title, options);
            };
            toastr.info = function(message, title, options) {
                console.log(`Toastr Info: ${title ? title + ' - ' : ''}${message}`);
                return originalInfo.call(toastr, message, title, options);
            };
            toastr.warning = function(message, title, options) {
                console.log(`Toastr Warning: ${title ? title + ' - ' : ''}${message}`);
                return originalWarning.call(toastr, message, title, options);
            };
        })();

        // Set Toastr options
        toastr.options = {
            closeButton: true,
            progressBar: true,
            positionClass: 'toast-top-right',
            timeOut: 5000,
            showMethod: 'slideDown',
            hideMethod: 'slideUp'
        };

        console.log('setupToastr - Toastr options configured:', JSON.stringify(toastr.options));
        console.log('setupToastr - Configuration completed');
    }

    // Function to wait for marked library to load
    function waitForMarked() {
        return new Promise((resolve, reject) => {
            const maxAttempts = 50;
            const delay = 100;
            let attempts = 0;

            function check() {
                if (typeof marked !== 'undefined') {
                    console.log('waitForMarked - marked library is now loaded');
                    resolve();
                } else if (attempts < maxAttempts) {
                    attempts++;
                    console.log(`waitForMarked - Attempt ${attempts}: marked not loaded yet, retrying in ${delay}ms`);
                    setTimeout(check, delay);
                } else {
                    console.error('waitForMarked - Max attempts reached, marked still not loaded');
                    reject(new Error('marked library not loaded after maximum attempts'));
                }
            }
            check();
        });
    }

    // Function to fetch and render Markdown content using the /utility/render_md endpoint
    async function renderMdPage(mdPath, targetElementId) {
        try {
            // Wait for marked to be loaded
            await waitForMarked();

            // Use the /utility/render_md endpoint to fetch and render markdown
            const renderUrl = `/render-md${mdPath}`;
            console.log(`render md page - Fetching Markdown from: ${renderUrl}`);

            // Fetch the rendered markdown content
            const response = await fetch(renderUrl);
            if (!response.ok) {
                throw new Error(`Failed to fetch MD content: ${response.status} ${response.statusText}`);
            }
            const htmlContent = await response.text();
            console.log(`render md page - Markdown content fetched and rendered: ${htmlContent.substring(0, 100)}...`);

            // Insert the HTML into the specified DOM element
            const targetElement = document.getElementById(targetElementId);
            if (targetElement) {
                targetElement.innerHTML = htmlContent;
                console.log('render md page - Markdown rendered successfully into:', targetElementId);
            } else {
                console.error(`render md page - Target element with ID "${targetElementId}" not found`);
            }
        } catch (error) {
            console.error('render md page - Error rendering MD page:', error.message);
            const targetElement = document.getElementById(targetElementId);
            if (targetElement) {
                targetElement.innerHTML = '<p>Sorry, the content could not be loaded: ' + error.message + '</p>';
            }
        }
    }

    // Initialize Toastr when the DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
        setupToastr();
    });

    // Expose functions globally for manual invocation
    window.setupToastr = setupToastr;
    window.renderMdPage = renderMdPage;
}
js/community-page.js
// community-page.js
// Purpose: Manages page-specific functionality for the /community page.

// Initializes the community page with permission checks.
function initializeCommunity() {
    console.log('initializeCommunity - Initializing community page');
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('initializeCommunity - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeCommunity - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    console.log('initializeCommunity - User permissions:', window.userPermissions); // Added logging
    // Allow 'community' or 'admin' permissions, matching page-load.js config
    if (!window.userPermissions.some(perm => ['community', 'admin'].includes(perm))) {
        toastr.error('Permission denied: Community or Admin permission required');
        console.error('initializeCommunity - No community or admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    // Use userId from token if not in localStorage
    let userId = localStorage.getItem('userId') || decoded.userId;
    if (!userId) {
        toastr.error('User ID not found in session or token, redirecting to login');
        console.error('initializeCommunity - No userId found in localStorage or token');
        window.location.href = '/';
        return;
    }
    // Ensure userId is stored in localStorage for consistency
    localStorage.setItem('userId', userId);
    const userIdInput = document.getElementById('userId');
    if (userIdInput) {
        userIdInput.value = userId;
    } else {
        console.warn('initializeCommunity - userId input not found');
    }

    console.log('initializeCommunity - Setting up navigation and event listeners'); // Added logging
    // Set up navigation and event listeners to fix button functionality
    setupNavigation(); // From site-navigation.js
    attachEventListeners(); // From page-load.js

    // Load initial data
    waitForTinyMCE(() => initializeTinyMCE('#aboutCommunity, #stylingDetails, #page1Content'));
    loadVisits();
    loadOrders();
    console.log('initializeCommunity - Calling loadCategories with userId:', userId); // Added logging
    loadCategories(userId, false); // Added for treeview

    // Fetch and display contact_name in the welcome section
    if (typeof loadSettings === 'function') {
        loadSettings().then(settings => {
            const contactName = settings.contact_name || 'User';
            const welcomeMessage = document.getElementById('welcome-message');
            if (welcomeMessage) {
                const userContactNameSpan = document.getElementById('user-contact-name');
                if (userContactNameSpan) {
                    userContactNameSpan.textContent = contactName;
                    console.log('initializeCommunity - Updated contact name in welcome section:', contactName);
                } else {
                    console.warn('initializeCommunity - user-contact-name span not found in welcome-message');
                }
            } else {
                console.warn('initializeCommunity - welcome-message element not found');
            }
        }).catch(error => {
            console.error('initializeCommunity - Error loading settings for contact name:', error.message);
            toastr.error('Error loading user settings');
        });
    } else {
        console.error('initializeCommunity - loadSettings function not found');
    }

    // Set up collapsible sections for Orders and Visits
    setupCollapsibleSections();

    // Set up provider icon listeners for the "My Web Site" section
    console.log('initializeCommunity - Calling setupProviderIconListeners');
    // Ensure the DOM is fully loaded before setting up listeners
    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', setupProviderIconListeners);
    } else {
        setupProviderIconListeners();
    }

    // Set up shared "Change Password" logic
    if (typeof setupChangePassword === 'function') {
        setupChangePassword(); // From user-management.js
        console.log('initializeCommunity - Change Password logic initialized');
    } else {
        console.error('initializeCommunity - setupChangePassword function not found');
    }

    // Hide loading overlay after initialization
    hideLoadingOverlay(); // From page-load.js
    console.log('initializeCommunity - Community page initialized successfully');
}

// Updates the menu dynamically based on permissions.
function updateMenu() {
    console.log('updateMenu - Updating menu');
    const menu = document.getElementById('menu');
    const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
    if (menu) {
        menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
        menu.innerHTML += `
            <button data-section="info">
                <span class="button-content"><i class="fas fa-home"></i> Dashboard</span>
            </button>
            <button data-submenu="my_website_submenu" data-section="my_website_intro_section">
                <span class="button-content"><i class="fas fa-globe"></i> My Web Site</span>
                <i class="fas fa-caret-right caret"></i>
            </button>
            <div id="my_website_submenu" class="submenu">
                <button data-section="wix">
                    <span class="button-content"><span class="icon-wix menu-size"></span> Wix</span>
                </button>
                <button data-section="wordpress">
                    <span class="button-content"><span class="icon-wordpress menu-size"></span> WordPress</span>
                </button>
                <button data-section="squarespace">
                    <span class="button-content"><span class="icon-squarespace menu-size"></span> Squarespace</span>
                </button>
                <button data-section="weebly">
                    <span class="button-content"><span class="icon-weebly menu-size"></span> Weebly</span>
                </button>
                <button data-section="joomla">
                    <span class="button-content"><span class="icon-joomla menu-size"></span> Joomla</span>
                </button>
                <button data-section="no_website">
                    <span class="button-content"><i class="fas fa-question-circle menu-size"></i> I Don’t Have a Website Yet</span>
                </button>
            </div>
            <button data-section="categories">
                <span class="button-content"><i class="fas fa-list"></i> My Categories</span>
            </button>
            <button data-submenu="referrals_submenu" data-section="referrals_intro_section">
                <span class="button-content">
                    <span class="icon-community menu-size"></span> My Referrals
                </span>
                <i class="fas fa-caret-right caret"></i>
            </button>
            <div id="referrals_submenu" class="submenu">
                <button data-section="visits">
                    <span class="button-content"><i class="fas fa-eye"></i> Visits</span>
                </button>
                <button data-section="orders">
                    <span class="button-content"><i class="fas fa-shopping-cart"></i> Orders</span>
                </button>
            </div>
            <button data-submenu="my-account-submenu" data-section="my-account">
                <span class="button-content"><i class="fas fa-cog"></i> My Account</span>
                <i class="fas fa-caret-right caret"></i>
            </button>
            <div id="my-account-submenu" class="submenu">
                <button data-section="contact_details">
                    <span class="button-content"><i class="fas fa-address-book"></i> Contact</span>
                </button>
                <button data-section="change-password">
                    <span class="button-content"><i class="fas fa-key"></i> Change Password</span>
                </button>
            </div>
        `;
        if (window.userPermissions.includes('admin')) {
            menu.innerHTML += `
                <button data-href="/" data-role="admin" style="background-color: #dc3545;">
                    <span class="button-content"><i class="fas fa-arrow-left"></i> Back to Admin</span>
                </button>
            `;
        }
        menu.innerHTML += `
            <button id="logOffBtn" style="background-color: #dc3545;">
                <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
            </button>
        `;
        console.log('updateMenu - Menu updated');

        // Ensure submenu visibility is handled correctly
        if (typeof window.siteNavigation?.initializeNavigation === 'function') {
            window.siteNavigation.initializeNavigation(); // From site-navigation.js to fix submenu hiding
            console.log('updateMenu - initializeNavigation called to fix submenu hiding');
        } else {
            console.error('updateMenu - initializeNavigation function not found');
        }
    } else {
        console.error('updateMenu - Menu element not found');
    }
}

async function loadClientApiSettings() {
    console.log('loadClientApiSettings - Loading client API settings');
    if (typeof authenticatedFetch !== 'function') {
        console.error('loadClientApiSettings - authenticatedFetch is not defined');
        toastr.error('Authentication function not available');
        return [];
    }
    try {
        const response = await authenticatedFetch('https://clubmadeira.io/settings/client_api');
        if (!response.ok) throw new Error(`Failed to fetch client API settings: ${response.status}`);
        const data = await response.json();
        console.log('loadClientApiSettings - Client API settings fetched:', JSON.stringify(data));
        return data.settings;
    } catch (error) {
        console.error('loadClientApiSettings - Error loading client API settings:', error.message);
        toastr.error(`Error loading client API settings: ${error.message}`);
        return [];
    }
}

function displayClientApiSettings(setting, fieldsContainer) {
    console.log('displayClientApiSettings - Displaying settings for:', setting.key_type);
    fieldsContainer.innerHTML = '';

    // Add selected setting icon
    const selectedIcon = document.createElement('i');
    selectedIcon.className = `selected-setting-icon ${setting.icon}`;
    selectedIcon.style.fontSize = '16px';
    selectedIcon.style.color = 'currentColor';
    selectedIcon.style.marginRight = '10px';
    selectedIcon.style.verticalAlign = 'middle';
    fieldsContainer.appendChild(selectedIcon);

    // Add heading with comment
    const heading = document.createElement('h3');
    heading.textContent = setting.comment || 'Client API Settings';
    heading.className = 'client-api-comment-heading';
    heading.style.display = 'inline-block';
    heading.style.verticalAlign = 'middle';
    fieldsContainer.appendChild(heading);

    // Add URL icons
    const apiLink = setting.doc_link.find(link => link.title === 'api')?.link;
    if (apiLink) {
        const apiIcon = document.createElement('a');
        apiIcon.href = apiLink;
        apiIcon.className = 'client-api-link';
        apiIcon.style.marginLeft = '10px';
        apiIcon.style.display = 'inline-block';
        apiIcon.style.verticalAlign = 'middle';
        apiIcon.style.color = 'currentColor';
        apiIcon.innerHTML = '<i class="fas fa-link" style="font-size: 16px;"></i>';
        apiIcon.target = '_blank';
        fieldsContainer.appendChild(apiIcon);
    }

    const signupLink = setting.doc_link.find(link => link.title === 'signup')?.link;
    if (signupLink) {
        const signupIcon = document.createElement('a');
        signupIcon.href = signupLink;
        signupIcon.className = 'client-api-signup-link';
        signupIcon.style.marginLeft = '10px';
        signupIcon.style.display = 'inline-block';
        signupIcon.style.verticalAlign = 'middle';
        signupIcon.style.color = 'currentColor';
        signupIcon.innerHTML = '<i class="fas fa-user-plus" style="font-size: 16px;"></i>';
        signupIcon.target = '_blank';
        fieldsContainer.appendChild(signupIcon);
    }

    const readmeLink = setting.doc_link.find(link => link.title === 'readme')?.link;
    if (readmeLink) {
        const readmeIcon = document.createElement('a');
        readmeIcon.href = '#';
        readmeIcon.className = 'client-api-readme-link';
        readmeIcon.style.marginLeft = '10px';
        readmeIcon.style.display = 'inline-block';
        readmeIcon.style.verticalAlign = 'middle';
        readmeIcon.style.color = 'currentColor';
        readmeIcon.innerHTML = '<i class="fas fa-book" style="font-size: 16px;"></i>';
        fieldsContainer.appendChild(readmeIcon);

        // Create a div for Markdown content
        const mdContentContainer = document.createElement('div');
        mdContentContainer.id = `md-content-${setting.key_type}`;
        mdContentContainer.className = 'client-api-md-content';
        mdContentContainer.style.display = 'none'; // Initially hidden
        mdContentContainer.style.marginTop = '15px';
        fieldsContainer.appendChild(mdContentContainer);

        readmeIcon.addEventListener('click', async (e) => {
            e.preventDefault();
            console.log('displayClientApiSettings - Readme icon clicked for:', setting.key_type);
            if (mdContentContainer.style.display === 'none') {
                // Load Markdown content if not already loaded
                if (!mdContentContainer.innerHTML) {
                    await renderMdPage(readmeLink, `md-content-${setting.key_type}`);
                }
                mdContentContainer.style.display = 'block';
                readmeIcon.innerHTML = '<i class="fas fa-book-open" style="font-size: 16px;"></i>'; // Change icon to indicate open state
            } else {
                mdContentContainer.style.display = 'none';
                readmeIcon.innerHTML = '<i class="fas fa-book" style="font-size: 16px;"></i>'; // Revert icon
            }
        });
    }

    // Add description
    const description = document.createElement('p');
    description.textContent = setting.fields._description || 'No description available.';
    description.className = 'client-api-description';
    description.style.marginBottom = '15px';
    fieldsContainer.appendChild(description);
}

function setupProviderIconListeners() {
    console.log('setupProviderIconListeners - Setting up provider icon listeners');
    const providerIconsContainer = document.getElementById('website-provider-icons');
    if (!providerIconsContainer) {
        console.warn('setupProviderIconListeners - Provider icons container not found - ID: website-provider-icons');
        return;
    }
    const providerIcons = providerIconsContainer.querySelectorAll('i');
    if (providerIcons.length === 0) {
        console.warn('setupProviderIconListeners - No provider icons found in container');
        return;
    }

    console.log('setupProviderIconListeners - Found provider icons:', providerIcons.length);

    // Fetch client API settings once and store them
    loadClientApiSettings().then(settings => {
        console.log('setupProviderIconListeners - Client API settings loaded:', settings);
        if (!settings || settings.length === 0) {
            console.warn('setupProviderIconListeners - No client API settings available');
            return;
        }

        const settingsMap = {};
        settings.forEach(setting => {
            settingsMap[setting.key_type] = setting;
        });

        providerIcons.forEach((icon, index) => {
            console.log(`setupProviderIconListeners - Attaching listener to icon ${index}:`, icon.className);
            icon.addEventListener('click', function() {
                console.log('setupProviderIconListeners - Icon clicked:', icon.className);
                // Reset all icons to unselected color
                providerIcons.forEach(i => i.style.color = '#C0C0C0');
                // Set clicked icon to currentColor
                this.style.color = 'currentColor';
                const sectionId = this.getAttribute('data-section');
                console.log('setupProviderIconListeners - Section ID:', sectionId);
                if (sectionId && typeof window.siteNavigation?.showSection === 'function') {
                    window.siteNavigation.showSection(sectionId);
                    console.log('setupProviderIconListeners - Section shown:', sectionId);
                    // Display API settings if not "no_website"
                    if (sectionId !== 'no_website') {
                        const setting = settingsMap[sectionId];
                        if (setting) {
                            console.log('setupProviderIconListeners - Setting found:', setting);
                            const fieldsContainer = document.getElementById('client-api-settings');
                            if (fieldsContainer) {
                                displayClientApiSettings(setting, fieldsContainer);
                                console.log('setupProviderIconListeners - Displayed settings for:', sectionId);
                            } else {
                                console.warn('setupProviderIconListeners - Client API settings container not found');
                            }
                        } else {
                            console.warn('setupProviderIconListeners - No settings found for key_type:', sectionId);
                        }
                    } else {
                        // For "no_website", clear the settings container
                        const fieldsContainer = document.getElementById('client-api-settings');
                        if (fieldsContainer) {
                            fieldsContainer.innerHTML = '';
                            console.log('setupProviderIconListeners - Cleared settings container for no_website');
                        }
                    }
                } else {
                    console.error('setupProviderIconListeners - siteNavigation.showSection not available or sectionId missing');
                }
            });
        });
    }).catch(error => {
        console.error('setupProviderIconListeners - Failed to load client API settings:', error);
        toastr.error('Failed to load provider settings');
    });
}

async function loadVisits() {
    console.log('loadVisits - Loading visits');
    const userId = document.getElementById('userId')?.value || '';
    if (!userId) {
        console.error('loadVisits - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadVisits - Fetching visits - URL:', `${window.apiUrl}/${userId}/visits`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/visits`);
        if (!response.ok) throw new Error(`Failed to fetch visits: ${response.status}`);
        const data = await response.json();
        console.log('loadVisits - Visits fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const visitsThisMonth = [];
            const visitsLastMonth = [];
            const visitsEarlier = [];
            data.visits.forEach(visit => {
                const visitDate = new Date(visit.timestamp);
                if (visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth) {
                    visitsThisMonth.push(visit);
                } else if ((visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth - 1) ||
                          (visitDate.getFullYear() === thisYear - 1 && thisMonth === 0 && visitDate.getMonth() === 11)) {
                    visitsLastMonth.push(visit);
                } else {
                    visitsEarlier.push(visit);
                }
            });
            updateVisitsTable('visitsListThisMonth', visitsThisMonth);
            updateVisitsTable('visitsListLastMonth', visitsLastMonth);
            updateVisitsTable('visitsListEarlier', visitsEarlier);
            console.log('loadVisits - Visits loaded - Counts:', { 
                thisMonth: visitsThisMonth.length, 
                lastMonth: visitsLastMonth.length, 
                earlier: visitsEarlier.length 
            });
        }
    } catch (error) {
        console.error('loadVisits - Error loading visits:', error.message, error.stack);
        toastr.error(`Error loading visits: ${error.message}`);
    }
}

function updateVisitsTable(tableId, visits) {
    console.log('updateVisitsTable - Updating table - Table ID:', tableId, 'Visits:', visits.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = visits.length === 0 ? '<tr><td colspan="2">No visits found</td></tr>' : '';
        visits.forEach(visit => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${visit.page || 'N/A'}</td><td>${visit.timestamp || 'N/A'}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateVisitsTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateVisitsTable - Table element not found - ID:', tableId);
    }
}

async function loadOrders() {
    console.log('loadOrders - Loading orders');
    const userId = document.getElementById('userId')?.value || '';
    if (!userId) {
        console.error('loadOrders - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadOrders - Fetching orders - URL:', `${window.apiUrl}/${userId}/orders`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/orders`);
        if (!response.ok) throw new Error(`Failed to fetch orders: ${response.status}`);
        const data = await response.json();
        console.log('loadOrders - Orders fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const ordersThisMonth = [];
            const ordersLastMonth = [];
            const ordersEarlier = [];
            data.orders.forEach(order => {
                const orderDate = new Date(order.timestamp);
                if (orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth) {
                    ordersThisMonth.push(order);
                } else if ((orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth - 1) ||
                          (orderDate.getFullYear() === thisYear - 1 && thisMonth === 0 && orderDate.getMonth() === 11)) {
                    ordersLastMonth.push(order);
                } else {
                    ordersEarlier.push(order);
                }
            });
            updateOrdersTable('ordersListThisMonth', ordersThisMonth);
            updateOrdersTable('ordersListLastMonth', ordersLastMonth);
            updateOrdersTable('ordersListEarlier', ordersEarlier);
            console.log('loadOrders - Orders loaded - Counts:', { 
                thisMonth: ordersThisMonth.length, 
                lastMonth: ordersLastMonth.length, 
                earlier: ordersEarlier.length 
            });
        }
    } catch (error) {
        console.error('loadOrders - Error loading orders:', error.message, error.stack);
        toastr.error(`Error loading orders: ${error.message}`);
    }
}

function updateOrdersTable(tableId, orders) {
    console.log('updateOrdersTable - Updating table - Table ID:', tableId, 'Orders:', orders.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = orders.length === 0 ? '<tr><td colspan="4">No orders found</td></tr>' : '';
        orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${order.orderId || 'N/A'}</td><td>${order.buyer || 'N/A'}</td><td>$${order.total || '0.00'}</td><td>${order.timestamp || 'N/A'}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateOrdersTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateOrdersTable - Table element not found - ID:', tableId);
    }
}

function setupCollapsibleSections() {
    console.log('setupCollapsibleSections - Setting up collapsible sections');
    const toggleSections = document.querySelectorAll('.toggle-section');
    toggleSections.forEach(section => {
        section.addEventListener('click', () => {
            const targetId = section.getAttribute('data-toggle');
            const targetContent = document.getElementById(targetId);
            if (targetContent) {
                const isOpen = targetContent.classList.contains('open');
                // Close all sections in the same group
                const parentSection = section.closest('.section');
                if (parentSection) {
                    parentSection.querySelectorAll('.toggle-content.open').forEach(content => {
                        content.classList.remove('open');
                        content.style.display = 'none';
                    });
                }
                // Toggle the clicked section
                if (!isOpen) {
                    targetContent.classList.add('open');
                    targetContent.style.display = 'block';
                }
                console.log('setupCollapsibleSections - Toggled section:', targetId, 'Is open:', !isOpen);
            } else {
                console.warn('setupCollapsibleSections - Target content not found for ID:', targetId);
            }
        });
    });
}

function waitForTinyMCE(callback) {
    console.log('waitForTinyMCE - Checking if TinyMCE is loaded');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('waitForTinyMCE - TinyMCE is loaded, executing callback');
        callback();
    } else {
        console.log('waitForTinyMCE - Waiting for TinyMCE to load...');
        const script = document.querySelector('script[src*="tinymce.min.js"]');
        if (script) {
            script.onload = () => {
                console.log('waitForTinyMCE - TinyMCE script loaded');
                callback();
            };
            script.onerror = () => console.error('waitForTinyMCE - TinyMCE failed to load');
        } else {
            setTimeout(() => waitForTinyMCE(callback), 100);
        }
    }
}

// Export for use in other scripts
window.initializeCommunity = initializeCommunity;
window.loadVisits = loadVisits;
window.updateVisitsTable = updateVisitsTable;
window.loadOrders = loadOrders;
window.updateOrdersTable = updateOrdersTable;
window.setupCollapsibleSections = setupCollapsibleSections;
window.setupProviderIconListeners = setupProviderIconListeners;
window.waitForTinyMCE = waitForTinyMCE;
window.loadClientApiSettings = loadClientApiSettings;
window.displayClientApiSettings = displayClientApiSettings;
js/marked.min.js
/**
 * marked v15.0.7 - a markdown parser
 * Copyright (c) 2011-2025, Christopher Jeffrey. (MIT Licensed)
 * https://github.com/markedjs/marked
 */
!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t((e="undefined"!=typeof globalThis?globalThis:e||self).marked={})}(this,(function(e){"use strict";function t(){return{async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null}}function n(t){e.defaults=t}e.defaults={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};const s={exec:()=>null};function r(e,t=""){let n="string"==typeof e?e:e.source;const s={replace:(e,t)=>{let r="string"==typeof t?t:t.source;return r=r.replace(i.caret,"$1"),n=n.replace(e,r),s},getRegex:()=>new RegExp(n,t)};return s}const i={codeRemoveIndent:/^(?: {1,4}| {0,3}\t)/gm,outputLinkReplace:/\\([\[\]])/g,indentCodeCompensation:/^(\s+)(?:```)/,beginningSpace:/^\s+/,endingHash:/#$/,startingSpaceChar:/^ /,endingSpaceChar:/ $/,nonSpaceChar:/[^ ]/,newLineCharGlobal:/\n/g,tabCharGlobal:/\t/g,multipleSpaceGlobal:/\s+/g,blankLine:/^[ \t]*$/,doubleBlankLine:/\n[ \t]*\n[ \t]*$/,blockquoteStart:/^ {0,3}>/,blockquoteSetextReplace:/\n {0,3}((?:=+|-+) *)(?=\n|$)/g,blockquoteSetextReplace2:/^ {0,3}>[ \t]?/gm,listReplaceTabs:/^\t+/,listReplaceNesting:/^ {1,4}(?=( {4})*[^ ])/g,listIsTask:/^\[[ xX]\] /,listReplaceTask:/^\[[ xX]\] +/,anyLine:/\n.*\n/,hrefBrackets:/^<(.*)>$/,tableDelimiter:/[:|]/,tableAlignChars:/^\||\| *$/g,tableRowBlankLine:/\n[ \t]*$/,tableAlignRight:/^ *-+: *$/,tableAlignCenter:/^ *:-+: *$/,tableAlignLeft:/^ *:-+ *$/,startATag:/^<a /i,endATag:/^<\/a>/i,startPreScriptTag:/^<(pre|code|kbd|script)(\s|>)/i,endPreScriptTag:/^<\/(pre|code|kbd|script)(\s|>)/i,startAngleBracket:/^</,endAngleBracket:/>$/,pedanticHrefTitle:/^([^'"]*[^\s])\s+(['"])(.*)\2/,unicodeAlphaNumeric:/[\p{L}\p{N}]/u,escapeTest:/[&<>"']/,escapeReplace:/[&<>"']/g,escapeTestNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/,escapeReplaceNoEncode:/[<>"']|&(?!(#\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\w+);)/g,unescapeTest:/&(#(?:\d+)|(?:#x[0-9A-Fa-f]+)|(?:\w+));?/gi,caret:/(^|[^\[])\^/g,percentDecode:/%25/g,findPipe:/\|/g,splitPipe:/ \|/,slashPipe:/\\\|/g,carriageReturn:/\r\n|\r/g,spaceLine:/^ +$/gm,notSpaceStart:/^\S*/,endingNewline:/\n$/,listItemRegex:e=>new RegExp(`^( {0,3}${e})((?:[\t ][^\\n]*)?(?:\\n|$))`),nextBulletRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}(?:[*+-]|\\d{1,9}[.)])((?:[ \t][^\\n]*)?(?:\\n|$))`),hrRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\* *){3,})(?:\\n+|$)`),fencesBeginRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}(?:\`\`\`|~~~)`),headingBeginRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}#`),htmlBeginRegex:e=>new RegExp(`^ {0,${Math.min(3,e-1)}}<(?:[a-z].*>|!--)`,"i")},l=/^ {0,3}((?:-[\t ]*){3,}|(?:_[ \t]*){3,}|(?:\*[ \t]*){3,})(?:\n+|$)/,o=/(?:[*+-]|\d{1,9}[.)])/,a=/^(?!bull |blockCode|fences|blockquote|heading|html|table)((?:.|\n(?!\s*?\n|bull |blockCode|fences|blockquote|heading|html|table))+?)\n {0,3}(=+|-+) *(?:\n+|$)/,c=r(a).replace(/bull/g,o).replace(/blockCode/g,/(?: {4}| {0,3}\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).replace(/\|table/g,"").getRegex(),h=r(a).replace(/bull/g,o).replace(/blockCode/g,/(?: {4}| {0,3}\t)/).replace(/fences/g,/ {0,3}(?:`{3,}|~{3,})/).replace(/blockquote/g,/ {0,3}>/).replace(/heading/g,/ {0,3}#{1,6}/).replace(/html/g,/ {0,3}<[^\n>]+>\n/).replace(/table/g,/ {0,3}\|?(?:[:\- ]*\|)+[\:\- ]*\n/).getRegex(),p=/^([^\n]+(?:\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\n)[^\n]+)*)/,u=/(?!\s*\])(?:\\.|[^\[\]\\])+/,g=r(/^ {0,3}\[(label)\]: *(?:\n[ \t]*)?([^<\s][^\s]*|<.*?>)(?:(?: +(?:\n[ \t]*)?| *\n[ \t]*)(title))? *(?:\n+|$)/).replace("label",u).replace("title",/(?:"(?:\\"?|[^"\\])*"|'[^'\n]*(?:\n[^'\n]+)*\n?'|\([^()]*\))/).getRegex(),k=r(/^( {0,3}bull)([ \t][^\n]+?)?(?:\n|$)/).replace(/bull/g,o).getRegex(),d="address|article|aside|base|basefont|blockquote|body|caption|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option|p|param|search|section|summary|table|tbody|td|tfoot|th|thead|title|tr|track|ul",f=/<!--(?:-?>|[\s\S]*?(?:-->|$))/,x=r("^ {0,3}(?:<(script|pre|style|textarea)[\\s>][\\s\\S]*?(?:</\\1>[^\\n]*\\n+|$)|comment[^\\n]*(\\n+|$)|<\\?[\\s\\S]*?(?:\\?>\\n*|$)|<![A-Z][\\s\\S]*?(?:>\\n*|$)|<!\\[CDATA\\[[\\s\\S]*?(?:\\]\\]>\\n*|$)|</?(tag)(?: +|\\n|/?>)[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|<(?!script|pre|style|textarea)([a-z][\\w-]*)(?:attribute)*? */?>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$)|</(?!script|pre|style|textarea)[a-z][\\w-]*\\s*>(?=[ \\t]*(?:\\n|$))[\\s\\S]*?(?:(?:\\n[ \t]*)+\\n|$))","i").replace("comment",f).replace("tag",d).replace("attribute",/ +[a-zA-Z:_][\w.:-]*(?: *= *"[^"\n]*"| *= *'[^'\n]*'| *= *[^\s"'=<>`]+)?/).getRegex(),b=r(p).replace("hr",l).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("|table","").replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",d).getRegex(),w={blockquote:r(/^( {0,3}> ?(paragraph|[^\n]*)(?:\n|$))+/).replace("paragraph",b).getRegex(),code:/^((?: {4}| {0,3}\t)[^\n]+(?:\n(?:[ \t]*(?:\n|$))*)?)+/,def:g,fences:/^ {0,3}(`{3,}(?=[^`\n]*(?:\n|$))|~{3,})([^\n]*)(?:\n|$)(?:|([\s\S]*?)(?:\n|$))(?: {0,3}\1[~`]* *(?=\n|$)|$)/,heading:/^ {0,3}(#{1,6})(?=\s|$)(.*)(?:\n+|$)/,hr:l,html:x,lheading:c,list:k,newline:/^(?:[ \t]*(?:\n|$))+/,paragraph:b,table:s,text:/^[^\n]+/},m=r("^ *([^\\n ].*)\\n {0,3}((?:\\| *)?:?-+:? *(?:\\| *:?-+:? *)*(?:\\| *)?)(?:\\n((?:(?! *\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\n|$))*)\\n*|$)").replace("hr",l).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("blockquote"," {0,3}>").replace("code","(?: {4}| {0,3}\t)[^\\n]").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",d).getRegex(),y={...w,lheading:h,table:m,paragraph:r(p).replace("hr",l).replace("heading"," {0,3}#{1,6}(?:\\s|$)").replace("|lheading","").replace("table",m).replace("blockquote"," {0,3}>").replace("fences"," {0,3}(?:`{3,}(?=[^`\\n]*\\n)|~{3,})[^\\n]*\\n").replace("list"," {0,3}(?:[*+-]|1[.)]) ").replace("html","</?(?:tag)(?: +|\\n|/?>)|<(?:script|pre|style|textarea|!--)").replace("tag",d).getRegex()},$={...w,html:r("^ *(?:comment *(?:\\n|\\s*$)|<(tag)[\\s\\S]+?</\\1> *(?:\\n{2,}|\\s*$)|<tag(?:\"[^\"]*\"|'[^']*'|\\s[^'\"/>\\s]*)*?/?> *(?:\\n{2,}|\\s*$))").replace("comment",f).replace(/tag/g,"(?!(?:a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)\\b)\\w+(?!:|[^\\w\\s@]*@)\\b").getRegex(),def:/^ *\[([^\]]+)\]: *<?([^\s>]+)>?(?: +(["(][^\n]+[")]))? *(?:\n+|$)/,heading:/^(#{1,6})(.*)(?:\n+|$)/,fences:s,lheading:/^(.+?)\n {0,3}(=+|-+) *(?:\n+|$)/,paragraph:r(p).replace("hr",l).replace("heading"," *#{1,6} *[^\n]").replace("lheading",c).replace("|table","").replace("blockquote"," {0,3}>").replace("|fences","").replace("|list","").replace("|html","").replace("|tag","").getRegex()},R=/^( {2,}|\\)\n(?!\s*$)/,S=/[\p{P}\p{S}]/u,T=/[\s\p{P}\p{S}]/u,z=/[^\s\p{P}\p{S}]/u,A=r(/^((?![*_])punctSpace)/,"u").replace(/punctSpace/g,T).getRegex(),_=/(?!~)[\p{P}\p{S}]/u,P=/^(?:\*+(?:((?!\*)punct)|[^\s*]))|^_+(?:((?!_)punct)|([^\s_]))/,I=r(P,"u").replace(/punct/g,S).getRegex(),L=r(P,"u").replace(/punct/g,_).getRegex(),B="^[^_*]*?__[^_*]*?\\*[^_*]*?(?=__)|[^*]+(?=[^*])|(?!\\*)punct(\\*+)(?=[\\s]|$)|notPunctSpace(\\*+)(?!\\*)(?=punctSpace|$)|(?!\\*)punctSpace(\\*+)(?=notPunctSpace)|[\\s](\\*+)(?!\\*)(?=punct)|(?!\\*)punct(\\*+)(?!\\*)(?=punct)|notPunctSpace(\\*+)(?=notPunctSpace)",C=r(B,"gu").replace(/notPunctSpace/g,z).replace(/punctSpace/g,T).replace(/punct/g,S).getRegex(),q=r(B,"gu").replace(/notPunctSpace/g,/(?:[^\s\p{P}\p{S}]|~)/u).replace(/punctSpace/g,/(?!~)[\s\p{P}\p{S}]/u).replace(/punct/g,_).getRegex(),E=r("^[^_*]*?\\*\\*[^_*]*?_[^_*]*?(?=\\*\\*)|[^_]+(?=[^_])|(?!_)punct(_+)(?=[\\s]|$)|notPunctSpace(_+)(?!_)(?=punctSpace|$)|(?!_)punctSpace(_+)(?=notPunctSpace)|[\\s](_+)(?!_)(?=punct)|(?!_)punct(_+)(?!_)(?=punct)","gu").replace(/notPunctSpace/g,z).replace(/punctSpace/g,T).replace(/punct/g,S).getRegex(),Z=r(/\\(punct)/,"gu").replace(/punct/g,S).getRegex(),v=r(/^<(scheme:[^\s\x00-\x1f<>]*|email)>/).replace("scheme",/[a-zA-Z][a-zA-Z0-9+.-]{1,31}/).replace("email",/[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/).getRegex(),D=r(f).replace("(?:--\x3e|$)","--\x3e").getRegex(),M=r("^comment|^</[a-zA-Z][\\w:-]*\\s*>|^<[a-zA-Z][\\w-]*(?:attribute)*?\\s*/?>|^<\\?[\\s\\S]*?\\?>|^<![a-zA-Z]+\\s[\\s\\S]*?>|^<!\\[CDATA\\[[\\s\\S]*?\\]\\]>").replace("comment",D).replace("attribute",/\s+[a-zA-Z:_][\w.:-]*(?:\s*=\s*"[^"]*"|\s*=\s*'[^']*'|\s*=\s*[^\s"'=<>`]+)?/).getRegex(),O=/(?:\[(?:\\.|[^\[\]\\])*\]|\\.|`[^`]*`|[^\[\]\\`])*?/,Q=r(/^!?\[(label)\]\(\s*(href)(?:\s+(title))?\s*\)/).replace("label",O).replace("href",/<(?:\\.|[^\n<>\\])+>|[^\s\x00-\x1f]*/).replace("title",/"(?:\\"?|[^"\\])*"|'(?:\\'?|[^'\\])*'|\((?:\\\)?|[^)\\])*\)/).getRegex(),j=r(/^!?\[(label)\]\[(ref)\]/).replace("label",O).replace("ref",u).getRegex(),N=r(/^!?\[(ref)\](?:\[\])?/).replace("ref",u).getRegex(),G={_backpedal:s,anyPunctuation:Z,autolink:v,blockSkip:/\[[^[\]]*?\]\((?:\\.|[^\\\(\)]|\((?:\\.|[^\\\(\)])*\))*\)|`[^`]*?`|<[^<>]*?>/g,br:R,code:/^(`+)([^`]|[^`][\s\S]*?[^`])\1(?!`)/,del:s,emStrongLDelim:I,emStrongRDelimAst:C,emStrongRDelimUnd:E,escape:/^\\([!"#$%&'()*+,\-./:;<=>?@\[\]\\^_`{|}~])/,link:Q,nolink:N,punctuation:A,reflink:j,reflinkSearch:r("reflink|nolink(?!\\()","g").replace("reflink",j).replace("nolink",N).getRegex(),tag:M,text:/^(`+|[^`])(?:(?= {2,}\n)|[\s\S]*?(?:(?=[\\<!\[`*_]|\b_|$)|[^ ](?= {2,}\n)))/,url:s},H={...G,link:r(/^!?\[(label)\]\((.*?)\)/).replace("label",O).getRegex(),reflink:r(/^!?\[(label)\]\s*\[([^\]]*)\]/).replace("label",O).getRegex()},X={...G,emStrongRDelimAst:q,emStrongLDelim:L,url:r(/^((?:ftp|https?):\/\/|www\.)(?:[a-zA-Z0-9\-]+\.?)+[^\s<]*|^email/,"i").replace("email",/[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/).getRegex(),_backpedal:/(?:[^?!.,:;*_'"~()&]+|\([^)]*\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'"~)]+(?!$))+/,del:/^(~~?)(?=[^\s~])((?:\\.|[^\\])*?(?:\\.|[^\s~\\]))\1(?=[^~]|$)/,text:/^([`~]+|[^`~])(?:(?= {2,}\n)|(?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)|[\s\S]*?(?:(?=[\\<!\[`*~_]|\b_|https?:\/\/|ftp:\/\/|www\.|$)|[^ ](?= {2,}\n)|[^a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-](?=[a-zA-Z0-9.!#$%&'*+\/=?_`{\|}~-]+@)))/},F={...X,br:r(R).replace("{2,}","*").getRegex(),text:r(X.text).replace("\\b_","\\b_| {2,}\\n").replace(/\{2,\}/g,"*").getRegex()},U={normal:w,gfm:y,pedantic:$},J={normal:G,gfm:X,breaks:F,pedantic:H},K={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},V=e=>K[e];function W(e,t){if(t){if(i.escapeTest.test(e))return e.replace(i.escapeReplace,V)}else if(i.escapeTestNoEncode.test(e))return e.replace(i.escapeReplaceNoEncode,V);return e}function Y(e){try{e=encodeURI(e).replace(i.percentDecode,"%")}catch{return null}return e}function ee(e,t){const n=e.replace(i.findPipe,((e,t,n)=>{let s=!1,r=t;for(;--r>=0&&"\\"===n[r];)s=!s;return s?"|":" |"})).split(i.splitPipe);let s=0;if(n[0].trim()||n.shift(),n.length>0&&!n.at(-1)?.trim()&&n.pop(),t)if(n.length>t)n.splice(t);else for(;n.length<t;)n.push("");for(;s<n.length;s++)n[s]=n[s].trim().replace(i.slashPipe,"|");return n}function te(e,t,n){const s=e.length;if(0===s)return"";let r=0;for(;r<s;){if(e.charAt(s-r-1)!==t)break;r++}return e.slice(0,s-r)}function ne(e,t,n,s,r){const i=t.href,l=t.title||null,o=e[1].replace(r.other.outputLinkReplace,"$1");if("!"!==e[0].charAt(0)){s.state.inLink=!0;const e={type:"link",raw:n,href:i,title:l,text:o,tokens:s.inlineTokens(o)};return s.state.inLink=!1,e}return{type:"image",raw:n,href:i,title:l,text:o}}class se{options;rules;lexer;constructor(t){this.options=t||e.defaults}space(e){const t=this.rules.block.newline.exec(e);if(t&&t[0].length>0)return{type:"space",raw:t[0]}}code(e){const t=this.rules.block.code.exec(e);if(t){const e=t[0].replace(this.rules.other.codeRemoveIndent,"");return{type:"code",raw:t[0],codeBlockStyle:"indented",text:this.options.pedantic?e:te(e,"\n")}}}fences(e){const t=this.rules.block.fences.exec(e);if(t){const e=t[0],n=function(e,t,n){const s=e.match(n.other.indentCodeCompensation);if(null===s)return t;const r=s[1];return t.split("\n").map((e=>{const t=e.match(n.other.beginningSpace);if(null===t)return e;const[s]=t;return s.length>=r.length?e.slice(r.length):e})).join("\n")}(e,t[3]||"",this.rules);return{type:"code",raw:e,lang:t[2]?t[2].trim().replace(this.rules.inline.anyPunctuation,"$1"):t[2],text:n}}}heading(e){const t=this.rules.block.heading.exec(e);if(t){let e=t[2].trim();if(this.rules.other.endingHash.test(e)){const t=te(e,"#");this.options.pedantic?e=t.trim():t&&!this.rules.other.endingSpaceChar.test(t)||(e=t.trim())}return{type:"heading",raw:t[0],depth:t[1].length,text:e,tokens:this.lexer.inline(e)}}}hr(e){const t=this.rules.block.hr.exec(e);if(t)return{type:"hr",raw:te(t[0],"\n")}}blockquote(e){const t=this.rules.block.blockquote.exec(e);if(t){let e=te(t[0],"\n").split("\n"),n="",s="";const r=[];for(;e.length>0;){let t=!1;const i=[];let l;for(l=0;l<e.length;l++)if(this.rules.other.blockquoteStart.test(e[l]))i.push(e[l]),t=!0;else{if(t)break;i.push(e[l])}e=e.slice(l);const o=i.join("\n"),a=o.replace(this.rules.other.blockquoteSetextReplace,"\n    $1").replace(this.rules.other.blockquoteSetextReplace2,"");n=n?`${n}\n${o}`:o,s=s?`${s}\n${a}`:a;const c=this.lexer.state.top;if(this.lexer.state.top=!0,this.lexer.blockTokens(a,r,!0),this.lexer.state.top=c,0===e.length)break;const h=r.at(-1);if("code"===h?.type)break;if("blockquote"===h?.type){const t=h,i=t.raw+"\n"+e.join("\n"),l=this.blockquote(i);r[r.length-1]=l,n=n.substring(0,n.length-t.raw.length)+l.raw,s=s.substring(0,s.length-t.text.length)+l.text;break}if("list"!==h?.type);else{const t=h,i=t.raw+"\n"+e.join("\n"),l=this.list(i);r[r.length-1]=l,n=n.substring(0,n.length-h.raw.length)+l.raw,s=s.substring(0,s.length-t.raw.length)+l.raw,e=i.substring(r.at(-1).raw.length).split("\n")}}return{type:"blockquote",raw:n,tokens:r,text:s}}}list(e){let t=this.rules.block.list.exec(e);if(t){let n=t[1].trim();const s=n.length>1,r={type:"list",raw:"",ordered:s,start:s?+n.slice(0,-1):"",loose:!1,items:[]};n=s?`\\d{1,9}\\${n.slice(-1)}`:`\\${n}`,this.options.pedantic&&(n=s?n:"[*+-]");const i=this.rules.other.listItemRegex(n);let l=!1;for(;e;){let n=!1,s="",o="";if(!(t=i.exec(e)))break;if(this.rules.block.hr.test(e))break;s=t[0],e=e.substring(s.length);let a=t[2].split("\n",1)[0].replace(this.rules.other.listReplaceTabs,(e=>" ".repeat(3*e.length))),c=e.split("\n",1)[0],h=!a.trim(),p=0;if(this.options.pedantic?(p=2,o=a.trimStart()):h?p=t[1].length+1:(p=t[2].search(this.rules.other.nonSpaceChar),p=p>4?1:p,o=a.slice(p),p+=t[1].length),h&&this.rules.other.blankLine.test(c)&&(s+=c+"\n",e=e.substring(c.length+1),n=!0),!n){const t=this.rules.other.nextBulletRegex(p),n=this.rules.other.hrRegex(p),r=this.rules.other.fencesBeginRegex(p),i=this.rules.other.headingBeginRegex(p),l=this.rules.other.htmlBeginRegex(p);for(;e;){const u=e.split("\n",1)[0];let g;if(c=u,this.options.pedantic?(c=c.replace(this.rules.other.listReplaceNesting,"  "),g=c):g=c.replace(this.rules.other.tabCharGlobal,"    "),r.test(c))break;if(i.test(c))break;if(l.test(c))break;if(t.test(c))break;if(n.test(c))break;if(g.search(this.rules.other.nonSpaceChar)>=p||!c.trim())o+="\n"+g.slice(p);else{if(h)break;if(a.replace(this.rules.other.tabCharGlobal,"    ").search(this.rules.other.nonSpaceChar)>=4)break;if(r.test(a))break;if(i.test(a))break;if(n.test(a))break;o+="\n"+c}h||c.trim()||(h=!0),s+=u+"\n",e=e.substring(u.length+1),a=g.slice(p)}}r.loose||(l?r.loose=!0:this.rules.other.doubleBlankLine.test(s)&&(l=!0));let u,g=null;this.options.gfm&&(g=this.rules.other.listIsTask.exec(o),g&&(u="[ ] "!==g[0],o=o.replace(this.rules.other.listReplaceTask,""))),r.items.push({type:"list_item",raw:s,task:!!g,checked:u,loose:!1,text:o,tokens:[]}),r.raw+=s}const o=r.items.at(-1);if(!o)return;o.raw=o.raw.trimEnd(),o.text=o.text.trimEnd(),r.raw=r.raw.trimEnd();for(let e=0;e<r.items.length;e++)if(this.lexer.state.top=!1,r.items[e].tokens=this.lexer.blockTokens(r.items[e].text,[]),!r.loose){const t=r.items[e].tokens.filter((e=>"space"===e.type)),n=t.length>0&&t.some((e=>this.rules.other.anyLine.test(e.raw)));r.loose=n}if(r.loose)for(let e=0;e<r.items.length;e++)r.items[e].loose=!0;return r}}html(e){const t=this.rules.block.html.exec(e);if(t){return{type:"html",block:!0,raw:t[0],pre:"pre"===t[1]||"script"===t[1]||"style"===t[1],text:t[0]}}}def(e){const t=this.rules.block.def.exec(e);if(t){const e=t[1].toLowerCase().replace(this.rules.other.multipleSpaceGlobal," "),n=t[2]?t[2].replace(this.rules.other.hrefBrackets,"$1").replace(this.rules.inline.anyPunctuation,"$1"):"",s=t[3]?t[3].substring(1,t[3].length-1).replace(this.rules.inline.anyPunctuation,"$1"):t[3];return{type:"def",tag:e,raw:t[0],href:n,title:s}}}table(e){const t=this.rules.block.table.exec(e);if(!t)return;if(!this.rules.other.tableDelimiter.test(t[2]))return;const n=ee(t[1]),s=t[2].replace(this.rules.other.tableAlignChars,"").split("|"),r=t[3]?.trim()?t[3].replace(this.rules.other.tableRowBlankLine,"").split("\n"):[],i={type:"table",raw:t[0],header:[],align:[],rows:[]};if(n.length===s.length){for(const e of s)this.rules.other.tableAlignRight.test(e)?i.align.push("right"):this.rules.other.tableAlignCenter.test(e)?i.align.push("center"):this.rules.other.tableAlignLeft.test(e)?i.align.push("left"):i.align.push(null);for(let e=0;e<n.length;e++)i.header.push({text:n[e],tokens:this.lexer.inline(n[e]),header:!0,align:i.align[e]});for(const e of r)i.rows.push(ee(e,i.header.length).map(((e,t)=>({text:e,tokens:this.lexer.inline(e),header:!1,align:i.align[t]}))));return i}}lheading(e){const t=this.rules.block.lheading.exec(e);if(t)return{type:"heading",raw:t[0],depth:"="===t[2].charAt(0)?1:2,text:t[1],tokens:this.lexer.inline(t[1])}}paragraph(e){const t=this.rules.block.paragraph.exec(e);if(t){const e="\n"===t[1].charAt(t[1].length-1)?t[1].slice(0,-1):t[1];return{type:"paragraph",raw:t[0],text:e,tokens:this.lexer.inline(e)}}}text(e){const t=this.rules.block.text.exec(e);if(t)return{type:"text",raw:t[0],text:t[0],tokens:this.lexer.inline(t[0])}}escape(e){const t=this.rules.inline.escape.exec(e);if(t)return{type:"escape",raw:t[0],text:t[1]}}tag(e){const t=this.rules.inline.tag.exec(e);if(t)return!this.lexer.state.inLink&&this.rules.other.startATag.test(t[0])?this.lexer.state.inLink=!0:this.lexer.state.inLink&&this.rules.other.endATag.test(t[0])&&(this.lexer.state.inLink=!1),!this.lexer.state.inRawBlock&&this.rules.other.startPreScriptTag.test(t[0])?this.lexer.state.inRawBlock=!0:this.lexer.state.inRawBlock&&this.rules.other.endPreScriptTag.test(t[0])&&(this.lexer.state.inRawBlock=!1),{type:"html",raw:t[0],inLink:this.lexer.state.inLink,inRawBlock:this.lexer.state.inRawBlock,block:!1,text:t[0]}}link(e){const t=this.rules.inline.link.exec(e);if(t){const e=t[2].trim();if(!this.options.pedantic&&this.rules.other.startAngleBracket.test(e)){if(!this.rules.other.endAngleBracket.test(e))return;const t=te(e.slice(0,-1),"\\");if((e.length-t.length)%2==0)return}else{const e=function(e,t){if(-1===e.indexOf(t[1]))return-1;let n=0;for(let s=0;s<e.length;s++)if("\\"===e[s])s++;else if(e[s]===t[0])n++;else if(e[s]===t[1]&&(n--,n<0))return s;return-1}(t[2],"()");if(e>-1){const n=(0===t[0].indexOf("!")?5:4)+t[1].length+e;t[2]=t[2].substring(0,e),t[0]=t[0].substring(0,n).trim(),t[3]=""}}let n=t[2],s="";if(this.options.pedantic){const e=this.rules.other.pedanticHrefTitle.exec(n);e&&(n=e[1],s=e[3])}else s=t[3]?t[3].slice(1,-1):"";return n=n.trim(),this.rules.other.startAngleBracket.test(n)&&(n=this.options.pedantic&&!this.rules.other.endAngleBracket.test(e)?n.slice(1):n.slice(1,-1)),ne(t,{href:n?n.replace(this.rules.inline.anyPunctuation,"$1"):n,title:s?s.replace(this.rules.inline.anyPunctuation,"$1"):s},t[0],this.lexer,this.rules)}}reflink(e,t){let n;if((n=this.rules.inline.reflink.exec(e))||(n=this.rules.inline.nolink.exec(e))){const e=t[(n[2]||n[1]).replace(this.rules.other.multipleSpaceGlobal," ").toLowerCase()];if(!e){const e=n[0].charAt(0);return{type:"text",raw:e,text:e}}return ne(n,e,n[0],this.lexer,this.rules)}}emStrong(e,t,n=""){let s=this.rules.inline.emStrongLDelim.exec(e);if(!s)return;if(s[3]&&n.match(this.rules.other.unicodeAlphaNumeric))return;if(!(s[1]||s[2]||"")||!n||this.rules.inline.punctuation.exec(n)){const n=[...s[0]].length-1;let r,i,l=n,o=0;const a="*"===s[0][0]?this.rules.inline.emStrongRDelimAst:this.rules.inline.emStrongRDelimUnd;for(a.lastIndex=0,t=t.slice(-1*e.length+n);null!=(s=a.exec(t));){if(r=s[1]||s[2]||s[3]||s[4]||s[5]||s[6],!r)continue;if(i=[...r].length,s[3]||s[4]){l+=i;continue}if((s[5]||s[6])&&n%3&&!((n+i)%3)){o+=i;continue}if(l-=i,l>0)continue;i=Math.min(i,i+l+o);const t=[...s[0]][0].length,a=e.slice(0,n+s.index+t+i);if(Math.min(n,i)%2){const e=a.slice(1,-1);return{type:"em",raw:a,text:e,tokens:this.lexer.inlineTokens(e)}}const c=a.slice(2,-2);return{type:"strong",raw:a,text:c,tokens:this.lexer.inlineTokens(c)}}}}codespan(e){const t=this.rules.inline.code.exec(e);if(t){let e=t[2].replace(this.rules.other.newLineCharGlobal," ");const n=this.rules.other.nonSpaceChar.test(e),s=this.rules.other.startingSpaceChar.test(e)&&this.rules.other.endingSpaceChar.test(e);return n&&s&&(e=e.substring(1,e.length-1)),{type:"codespan",raw:t[0],text:e}}}br(e){const t=this.rules.inline.br.exec(e);if(t)return{type:"br",raw:t[0]}}del(e){const t=this.rules.inline.del.exec(e);if(t)return{type:"del",raw:t[0],text:t[2],tokens:this.lexer.inlineTokens(t[2])}}autolink(e){const t=this.rules.inline.autolink.exec(e);if(t){let e,n;return"@"===t[2]?(e=t[1],n="mailto:"+e):(e=t[1],n=e),{type:"link",raw:t[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}url(e){let t;if(t=this.rules.inline.url.exec(e)){let e,n;if("@"===t[2])e=t[0],n="mailto:"+e;else{let s;do{s=t[0],t[0]=this.rules.inline._backpedal.exec(t[0])?.[0]??""}while(s!==t[0]);e=t[0],n="www."===t[1]?"http://"+t[0]:t[0]}return{type:"link",raw:t[0],text:e,href:n,tokens:[{type:"text",raw:e,text:e}]}}}inlineText(e){const t=this.rules.inline.text.exec(e);if(t){const e=this.lexer.state.inRawBlock;return{type:"text",raw:t[0],text:t[0],escaped:e}}}}class re{tokens;options;state;tokenizer;inlineQueue;constructor(t){this.tokens=[],this.tokens.links=Object.create(null),this.options=t||e.defaults,this.options.tokenizer=this.options.tokenizer||new se,this.tokenizer=this.options.tokenizer,this.tokenizer.options=this.options,this.tokenizer.lexer=this,this.inlineQueue=[],this.state={inLink:!1,inRawBlock:!1,top:!0};const n={other:i,block:U.normal,inline:J.normal};this.options.pedantic?(n.block=U.pedantic,n.inline=J.pedantic):this.options.gfm&&(n.block=U.gfm,this.options.breaks?n.inline=J.breaks:n.inline=J.gfm),this.tokenizer.rules=n}static get rules(){return{block:U,inline:J}}static lex(e,t){return new re(t).lex(e)}static lexInline(e,t){return new re(t).inlineTokens(e)}lex(e){e=e.replace(i.carriageReturn,"\n"),this.blockTokens(e,this.tokens);for(let e=0;e<this.inlineQueue.length;e++){const t=this.inlineQueue[e];this.inlineTokens(t.src,t.tokens)}return this.inlineQueue=[],this.tokens}blockTokens(e,t=[],n=!1){for(this.options.pedantic&&(e=e.replace(i.tabCharGlobal,"    ").replace(i.spaceLine,""));e;){let s;if(this.options.extensions?.block?.some((n=>!!(s=n.call({lexer:this},e,t))&&(e=e.substring(s.raw.length),t.push(s),!0))))continue;if(s=this.tokenizer.space(e)){e=e.substring(s.raw.length);const n=t.at(-1);1===s.raw.length&&void 0!==n?n.raw+="\n":t.push(s);continue}if(s=this.tokenizer.code(e)){e=e.substring(s.raw.length);const n=t.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+s.raw,n.text+="\n"+s.text,this.inlineQueue.at(-1).src=n.text):t.push(s);continue}if(s=this.tokenizer.fences(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.heading(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.hr(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.blockquote(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.list(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.html(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.def(e)){e=e.substring(s.raw.length);const n=t.at(-1);"paragraph"===n?.type||"text"===n?.type?(n.raw+="\n"+s.raw,n.text+="\n"+s.raw,this.inlineQueue.at(-1).src=n.text):this.tokens.links[s.tag]||(this.tokens.links[s.tag]={href:s.href,title:s.title});continue}if(s=this.tokenizer.table(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.lheading(e)){e=e.substring(s.raw.length),t.push(s);continue}let r=e;if(this.options.extensions?.startBlock){let t=1/0;const n=e.slice(1);let s;this.options.extensions.startBlock.forEach((e=>{s=e.call({lexer:this},n),"number"==typeof s&&s>=0&&(t=Math.min(t,s))})),t<1/0&&t>=0&&(r=e.substring(0,t+1))}if(this.state.top&&(s=this.tokenizer.paragraph(r))){const i=t.at(-1);n&&"paragraph"===i?.type?(i.raw+="\n"+s.raw,i.text+="\n"+s.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=i.text):t.push(s),n=r.length!==e.length,e=e.substring(s.raw.length)}else if(s=this.tokenizer.text(e)){e=e.substring(s.raw.length);const n=t.at(-1);"text"===n?.type?(n.raw+="\n"+s.raw,n.text+="\n"+s.text,this.inlineQueue.pop(),this.inlineQueue.at(-1).src=n.text):t.push(s)}else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return this.state.top=!0,t}inline(e,t=[]){return this.inlineQueue.push({src:e,tokens:t}),t}inlineTokens(e,t=[]){let n=e,s=null;if(this.tokens.links){const e=Object.keys(this.tokens.links);if(e.length>0)for(;null!=(s=this.tokenizer.rules.inline.reflinkSearch.exec(n));)e.includes(s[0].slice(s[0].lastIndexOf("[")+1,-1))&&(n=n.slice(0,s.index)+"["+"a".repeat(s[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex))}for(;null!=(s=this.tokenizer.rules.inline.blockSkip.exec(n));)n=n.slice(0,s.index)+"["+"a".repeat(s[0].length-2)+"]"+n.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);for(;null!=(s=this.tokenizer.rules.inline.anyPunctuation.exec(n));)n=n.slice(0,s.index)+"++"+n.slice(this.tokenizer.rules.inline.anyPunctuation.lastIndex);let r=!1,i="";for(;e;){let s;if(r||(i=""),r=!1,this.options.extensions?.inline?.some((n=>!!(s=n.call({lexer:this},e,t))&&(e=e.substring(s.raw.length),t.push(s),!0))))continue;if(s=this.tokenizer.escape(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.tag(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.link(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.reflink(e,this.tokens.links)){e=e.substring(s.raw.length);const n=t.at(-1);"text"===s.type&&"text"===n?.type?(n.raw+=s.raw,n.text+=s.text):t.push(s);continue}if(s=this.tokenizer.emStrong(e,n,i)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.codespan(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.br(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.del(e)){e=e.substring(s.raw.length),t.push(s);continue}if(s=this.tokenizer.autolink(e)){e=e.substring(s.raw.length),t.push(s);continue}if(!this.state.inLink&&(s=this.tokenizer.url(e))){e=e.substring(s.raw.length),t.push(s);continue}let l=e;if(this.options.extensions?.startInline){let t=1/0;const n=e.slice(1);let s;this.options.extensions.startInline.forEach((e=>{s=e.call({lexer:this},n),"number"==typeof s&&s>=0&&(t=Math.min(t,s))})),t<1/0&&t>=0&&(l=e.substring(0,t+1))}if(s=this.tokenizer.inlineText(l)){e=e.substring(s.raw.length),"_"!==s.raw.slice(-1)&&(i=s.raw.slice(-1)),r=!0;const n=t.at(-1);"text"===n?.type?(n.raw+=s.raw,n.text+=s.text):t.push(s)}else if(e){const t="Infinite loop on byte: "+e.charCodeAt(0);if(this.options.silent){console.error(t);break}throw new Error(t)}}return t}}class ie{options;parser;constructor(t){this.options=t||e.defaults}space(e){return""}code({text:e,lang:t,escaped:n}){const s=(t||"").match(i.notSpaceStart)?.[0],r=e.replace(i.endingNewline,"")+"\n";return s?'<pre><code class="language-'+W(s)+'">'+(n?r:W(r,!0))+"</code></pre>\n":"<pre><code>"+(n?r:W(r,!0))+"</code></pre>\n"}blockquote({tokens:e}){return`<blockquote>\n${this.parser.parse(e)}</blockquote>\n`}html({text:e}){return e}heading({tokens:e,depth:t}){return`<h${t}>${this.parser.parseInline(e)}</h${t}>\n`}hr(e){return"<hr>\n"}list(e){const t=e.ordered,n=e.start;let s="";for(let t=0;t<e.items.length;t++){const n=e.items[t];s+=this.listitem(n)}const r=t?"ol":"ul";return"<"+r+(t&&1!==n?' start="'+n+'"':"")+">\n"+s+"</"+r+">\n"}listitem(e){let t="";if(e.task){const n=this.checkbox({checked:!!e.checked});e.loose?"paragraph"===e.tokens[0]?.type?(e.tokens[0].text=n+" "+e.tokens[0].text,e.tokens[0].tokens&&e.tokens[0].tokens.length>0&&"text"===e.tokens[0].tokens[0].type&&(e.tokens[0].tokens[0].text=n+" "+W(e.tokens[0].tokens[0].text),e.tokens[0].tokens[0].escaped=!0)):e.tokens.unshift({type:"text",raw:n+" ",text:n+" ",escaped:!0}):t+=n+" "}return t+=this.parser.parse(e.tokens,!!e.loose),`<li>${t}</li>\n`}checkbox({checked:e}){return"<input "+(e?'checked="" ':"")+'disabled="" type="checkbox">'}paragraph({tokens:e}){return`<p>${this.parser.parseInline(e)}</p>\n`}table(e){let t="",n="";for(let t=0;t<e.header.length;t++)n+=this.tablecell(e.header[t]);t+=this.tablerow({text:n});let s="";for(let t=0;t<e.rows.length;t++){const r=e.rows[t];n="";for(let e=0;e<r.length;e++)n+=this.tablecell(r[e]);s+=this.tablerow({text:n})}return s&&(s=`<tbody>${s}</tbody>`),"<table>\n<thead>\n"+t+"</thead>\n"+s+"</table>\n"}tablerow({text:e}){return`<tr>\n${e}</tr>\n`}tablecell(e){const t=this.parser.parseInline(e.tokens),n=e.header?"th":"td";return(e.align?`<${n} align="${e.align}">`:`<${n}>`)+t+`</${n}>\n`}strong({tokens:e}){return`<strong>${this.parser.parseInline(e)}</strong>`}em({tokens:e}){return`<em>${this.parser.parseInline(e)}</em>`}codespan({text:e}){return`<code>${W(e,!0)}</code>`}br(e){return"<br>"}del({tokens:e}){return`<del>${this.parser.parseInline(e)}</del>`}link({href:e,title:t,tokens:n}){const s=this.parser.parseInline(n),r=Y(e);if(null===r)return s;let i='<a href="'+(e=r)+'"';return t&&(i+=' title="'+W(t)+'"'),i+=">"+s+"</a>",i}image({href:e,title:t,text:n}){const s=Y(e);if(null===s)return W(n);let r=`<img src="${e=s}" alt="${n}"`;return t&&(r+=` title="${W(t)}"`),r+=">",r}text(e){return"tokens"in e&&e.tokens?this.parser.parseInline(e.tokens):"escaped"in e&&e.escaped?e.text:W(e.text)}}class le{strong({text:e}){return e}em({text:e}){return e}codespan({text:e}){return e}del({text:e}){return e}html({text:e}){return e}text({text:e}){return e}link({text:e}){return""+e}image({text:e}){return""+e}br(){return""}}class oe{options;renderer;textRenderer;constructor(t){this.options=t||e.defaults,this.options.renderer=this.options.renderer||new ie,this.renderer=this.options.renderer,this.renderer.options=this.options,this.renderer.parser=this,this.textRenderer=new le}static parse(e,t){return new oe(t).parse(e)}static parseInline(e,t){return new oe(t).parseInline(e)}parse(e,t=!0){let n="";for(let s=0;s<e.length;s++){const r=e[s];if(this.options.extensions?.renderers?.[r.type]){const e=r,t=this.options.extensions.renderers[e.type].call({parser:this},e);if(!1!==t||!["space","hr","heading","code","table","blockquote","list","html","paragraph","text"].includes(e.type)){n+=t||"";continue}}const i=r;switch(i.type){case"space":n+=this.renderer.space(i);continue;case"hr":n+=this.renderer.hr(i);continue;case"heading":n+=this.renderer.heading(i);continue;case"code":n+=this.renderer.code(i);continue;case"table":n+=this.renderer.table(i);continue;case"blockquote":n+=this.renderer.blockquote(i);continue;case"list":n+=this.renderer.list(i);continue;case"html":n+=this.renderer.html(i);continue;case"paragraph":n+=this.renderer.paragraph(i);continue;case"text":{let r=i,l=this.renderer.text(r);for(;s+1<e.length&&"text"===e[s+1].type;)r=e[++s],l+="\n"+this.renderer.text(r);n+=t?this.renderer.paragraph({type:"paragraph",raw:l,text:l,tokens:[{type:"text",raw:l,text:l,escaped:!0}]}):l;continue}default:{const e='Token with "'+i.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}parseInline(e,t=this.renderer){let n="";for(let s=0;s<e.length;s++){const r=e[s];if(this.options.extensions?.renderers?.[r.type]){const e=this.options.extensions.renderers[r.type].call({parser:this},r);if(!1!==e||!["escape","html","link","image","strong","em","codespan","br","del","text"].includes(r.type)){n+=e||"";continue}}const i=r;switch(i.type){case"escape":case"text":n+=t.text(i);break;case"html":n+=t.html(i);break;case"link":n+=t.link(i);break;case"image":n+=t.image(i);break;case"strong":n+=t.strong(i);break;case"em":n+=t.em(i);break;case"codespan":n+=t.codespan(i);break;case"br":n+=t.br(i);break;case"del":n+=t.del(i);break;default:{const e='Token with "'+i.type+'" type was not found.';if(this.options.silent)return console.error(e),"";throw new Error(e)}}}return n}}class ae{options;block;constructor(t){this.options=t||e.defaults}static passThroughHooks=new Set(["preprocess","postprocess","processAllTokens"]);preprocess(e){return e}postprocess(e){return e}processAllTokens(e){return e}provideLexer(){return this.block?re.lex:re.lexInline}provideParser(){return this.block?oe.parse:oe.parseInline}}class ce{defaults={async:!1,breaks:!1,extensions:null,gfm:!0,hooks:null,pedantic:!1,renderer:null,silent:!1,tokenizer:null,walkTokens:null};options=this.setOptions;parse=this.parseMarkdown(!0);parseInline=this.parseMarkdown(!1);Parser=oe;Renderer=ie;TextRenderer=le;Lexer=re;Tokenizer=se;Hooks=ae;constructor(...e){this.use(...e)}walkTokens(e,t){let n=[];for(const s of e)switch(n=n.concat(t.call(this,s)),s.type){case"table":{const e=s;for(const s of e.header)n=n.concat(this.walkTokens(s.tokens,t));for(const s of e.rows)for(const e of s)n=n.concat(this.walkTokens(e.tokens,t));break}case"list":{const e=s;n=n.concat(this.walkTokens(e.items,t));break}default:{const e=s;this.defaults.extensions?.childTokens?.[e.type]?this.defaults.extensions.childTokens[e.type].forEach((s=>{const r=e[s].flat(1/0);n=n.concat(this.walkTokens(r,t))})):e.tokens&&(n=n.concat(this.walkTokens(e.tokens,t)))}}return n}use(...e){const t=this.defaults.extensions||{renderers:{},childTokens:{}};return e.forEach((e=>{const n={...e};if(n.async=this.defaults.async||n.async||!1,e.extensions&&(e.extensions.forEach((e=>{if(!e.name)throw new Error("extension name required");if("renderer"in e){const n=t.renderers[e.name];t.renderers[e.name]=n?function(...t){let s=e.renderer.apply(this,t);return!1===s&&(s=n.apply(this,t)),s}:e.renderer}if("tokenizer"in e){if(!e.level||"block"!==e.level&&"inline"!==e.level)throw new Error("extension level must be 'block' or 'inline'");const n=t[e.level];n?n.unshift(e.tokenizer):t[e.level]=[e.tokenizer],e.start&&("block"===e.level?t.startBlock?t.startBlock.push(e.start):t.startBlock=[e.start]:"inline"===e.level&&(t.startInline?t.startInline.push(e.start):t.startInline=[e.start]))}"childTokens"in e&&e.childTokens&&(t.childTokens[e.name]=e.childTokens)})),n.extensions=t),e.renderer){const t=this.defaults.renderer||new ie(this.defaults);for(const n in e.renderer){if(!(n in t))throw new Error(`renderer '${n}' does not exist`);if(["options","parser"].includes(n))continue;const s=n,r=e.renderer[s],i=t[s];t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n||""}}n.renderer=t}if(e.tokenizer){const t=this.defaults.tokenizer||new se(this.defaults);for(const n in e.tokenizer){if(!(n in t))throw new Error(`tokenizer '${n}' does not exist`);if(["options","rules","lexer"].includes(n))continue;const s=n,r=e.tokenizer[s],i=t[s];t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n}}n.tokenizer=t}if(e.hooks){const t=this.defaults.hooks||new ae;for(const n in e.hooks){if(!(n in t))throw new Error(`hook '${n}' does not exist`);if(["options","block"].includes(n))continue;const s=n,r=e.hooks[s],i=t[s];ae.passThroughHooks.has(n)?t[s]=e=>{if(this.defaults.async)return Promise.resolve(r.call(t,e)).then((e=>i.call(t,e)));const n=r.call(t,e);return i.call(t,n)}:t[s]=(...e)=>{let n=r.apply(t,e);return!1===n&&(n=i.apply(t,e)),n}}n.hooks=t}if(e.walkTokens){const t=this.defaults.walkTokens,s=e.walkTokens;n.walkTokens=function(e){let n=[];return n.push(s.call(this,e)),t&&(n=n.concat(t.call(this,e))),n}}this.defaults={...this.defaults,...n}})),this}setOptions(e){return this.defaults={...this.defaults,...e},this}lexer(e,t){return re.lex(e,t??this.defaults)}parser(e,t){return oe.parse(e,t??this.defaults)}parseMarkdown(e){return(t,n)=>{const s={...n},r={...this.defaults,...s},i=this.onError(!!r.silent,!!r.async);if(!0===this.defaults.async&&!1===s.async)return i(new Error("marked(): The async option was set to true by an extension. Remove async: false from the parse options object to return a Promise."));if(null==t)return i(new Error("marked(): input parameter is undefined or null"));if("string"!=typeof t)return i(new Error("marked(): input parameter is of type "+Object.prototype.toString.call(t)+", string expected"));r.hooks&&(r.hooks.options=r,r.hooks.block=e);const l=r.hooks?r.hooks.provideLexer():e?re.lex:re.lexInline,o=r.hooks?r.hooks.provideParser():e?oe.parse:oe.parseInline;if(r.async)return Promise.resolve(r.hooks?r.hooks.preprocess(t):t).then((e=>l(e,r))).then((e=>r.hooks?r.hooks.processAllTokens(e):e)).then((e=>r.walkTokens?Promise.all(this.walkTokens(e,r.walkTokens)).then((()=>e)):e)).then((e=>o(e,r))).then((e=>r.hooks?r.hooks.postprocess(e):e)).catch(i);try{r.hooks&&(t=r.hooks.preprocess(t));let e=l(t,r);r.hooks&&(e=r.hooks.processAllTokens(e)),r.walkTokens&&this.walkTokens(e,r.walkTokens);let n=o(e,r);return r.hooks&&(n=r.hooks.postprocess(n)),n}catch(e){return i(e)}}}onError(e,t){return n=>{if(n.message+="\nPlease report this to https://github.com/markedjs/marked.",e){const e="<p>An error occurred:</p><pre>"+W(n.message+"",!0)+"</pre>";return t?Promise.resolve(e):e}if(t)return Promise.reject(n);throw n}}}const he=new ce;function pe(e,t){return he.parse(e,t)}pe.options=pe.setOptions=function(e){return he.setOptions(e),pe.defaults=he.defaults,n(pe.defaults),pe},pe.getDefaults=t,pe.defaults=e.defaults,pe.use=function(...e){return he.use(...e),pe.defaults=he.defaults,n(pe.defaults),pe},pe.walkTokens=function(e,t){return he.walkTokens(e,t)},pe.parseInline=he.parseInline,pe.Parser=oe,pe.parser=oe.parse,pe.Renderer=ie,pe.TextRenderer=le,pe.Lexer=re,pe.lexer=re.lex,pe.Tokenizer=se,pe.Hooks=ae,pe.parse=pe;const ue=pe.options,ge=pe.setOptions,ke=pe.use,de=pe.walkTokens,fe=pe.parseInline,xe=pe,be=oe.parse,we=re.lex;e.Hooks=ae,e.Lexer=re,e.Marked=ce,e.Parser=oe,e.Renderer=ie,e.TextRenderer=le,e.Tokenizer=se,e.getDefaults=t,e.lexer=we,e.marked=pe,e.options=ue,e.parse=xe,e.parseInline=fe,e.parser=be,e.setOptions=ge,e.use=ke,e.walkTokens=de}));

js/merchant-page.js
try {
    // Initializes the merchant page with permission checks.
    function initializeMerchant() {
        console.log('initializeMerchant - Initializing merchant page');
        const token = localStorage.getItem('authToken');
        const userId = localStorage.getItem('userId');
        if (!token) {
            console.error('initializeMerchant - No token found, redirecting to /');
            window.location.href = '/';
            return;
        }
        const decoded = decodeJWT(token);
        if (!decoded) {
            console.error('initializeMerchant - Invalid token, redirecting to /');
            window.location.href = '/';
            return;
        }
        window.userPermissions = decoded.permissions || [];
        console.log('initializeMerchant - User permissions:', window.userPermissions); // Added logging
        if (!window.userPermissions.includes('merchant') && !window.userPermissions.includes('admin')) {
            toastr.error('Permission denied: Merchant or Admin permission required');
            console.error('initializeMerchant - No merchant/admin permission, redirecting to /');
            window.location.href = '/';
            return;
        }
        const userIdInput = document.getElementById('userId');
        if (userIdInput && userId) {
            userIdInput.value = userId;
        } else if (!userId) {
            console.warn('initializeMerchant - No userId found in localStorage');
        } else {
            console.warn('initializeMerchant - userId input element not found');
        }

        // Set up navigation and event listeners
        console.log('initializeMerchant - Setting up navigation'); // Added logging
        setupNavigation(); // From site-navigation.js
        updateMenu(); // Call the new updateMenu function to set up navigation buttons
        checkAdminPermission();        
        window.siteNavigation.showSection('info'); // Updated to match actual section ID

        // Ensure DOM is loaded before calling loadProducts
        console.log('initializeMerchant - Loading products'); // Added logging
        if (document.readyState === 'complete') {
            loadProducts(); // Load merchant products immediately if DOM is ready
        } else {
            document.addEventListener('DOMContentLoaded', loadProducts); // Wait for DOM to load
        }

        loadStoreRequest(); // Load store request data
        loadApiKeys(); // Load API keys
        loadDocumentationMenu(); // Load documentation submenu items

        // Fetch and display contact_name from /settings/user
        console.log('initializeMerchant - Loading user settings'); // Added logging
        loadUserSettings().then(settings => {
            const contactName = settings.contact_name || 'User';
            const welcomeMessage = document.getElementById('welcome-message');
            if (welcomeMessage) {
                const userContactNameSpan = document.getElementById('user-contact-name');
                if (userContactNameSpan) {
                    userContactNameSpan.textContent = contactName;
                    console.log('initializeMerchant - Updated contact name in info section:', contactName);
                } else {
                    console.warn('initializeMerchant - user-contact-name span not found in welcome-message');
                }
            } else {
                console.warn('initializeMerchant - welcome-message element not found');
            }
        }).catch(error => {
            console.error('initializeMerchant - Error loading settings for contact name:', error.message);
            toastr.error('Error loading user settings');
        });

        attachEventListeners(); // From page-load.js

        // Call shared "Change Password" logic
        if (typeof setupChangePassword === 'function') {
            setupChangePassword(); // From user-management.js
            console.log('initializeMerchant - Change Password logic initialized');
        } else {
            console.error('initializeMerchant - setupChangePassword function not found');
        }

        // Hide loading overlay after initialization
        hideLoadingOverlay(); // From page-load.js
        console.log('initializeMerchant - Merchant page initialized successfully');
    }

    // Updates the menu dynamically based on permissions
    function updateMenu() {
        console.log('updateMenu - Updating menu');
        const menu = document.getElementById('menu');
        const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
        if (menu) {
            menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
            menu.innerHTML += `
                <button data-section="info">
                    <span class="button-content"><i class="fas fa-home"></i> Dashboard</span>
                </button>
                <button data-section="my-products">
                    <span class="button-content"><i class="fas fa-box"></i> My Products</span>
                </button>
                <button data-section="store-request">
                    <span class="button-content"><i class="fas fa-store"></i> My Store Request</span>
                </button>
                <button data-submenu="documentation-submenu" data-section="documentation-content">
                    <span class="button-content"><i class="fas fa-book"></i> Documentation</span>
                    <i class="fas fa-caret-right caret"></i>
                </button>
                <div id="documentation-submenu" class="submenu">
                    <!-- Populated by loadDocumentationMenu -->
                </div>
                <button data-section="api-keys">
                    <span class="button-content"><i class="fas fa-key"></i> API Keys</span>
                </button>
                <button data-section="my-account">
                    <span class="button-content"><i class="fas fa-cog"></i> My Account</span>
                </button>
            `;
            // Add navigation buttons to other role pages
            if (window.userPermissions.includes('admin')) {
                menu.innerHTML += `
                    <button data-href="/" data-role="admin" style="background-color: #dc3545;">
                        <span class="button-content"><i class="fas fa-arrow-left"></i> Back to Admin</span>
                    </button>
                `;
            }
            if (window.userPermissions.includes('community')) {
                menu.innerHTML += `
                    <button data-href="/" data-role="community" style="background-color: #007bff;">
                        <span class="button-content"><i class="fas fa-users"></i> Community Dashboard</span>
                    </button>
                `;
            }
            if (window.userPermissions.includes('wixpro')) {
                menu.innerHTML += `
                    <button data-href="/" data-role="partner" style="background-color: #007bff;">
                        <span class="button-content"><i class="fas fa-handshake"></i> Partner Dashboard</span>
                    </button>
                `;
            }
            menu.innerHTML += `
                <button id="logOffBtn" style="background-color: #dc3545;">
                    <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
                </button>
            `;
            console.log('updateMenu - Menu updated');

            // Ensure submenu visibility is handled correctly
            if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                window.siteNavigation.initializeNavigation();
                console.log('updateMenu - initializeNavigation called to fix submenu hiding');
            } else {
                console.error('updateMenu - initializeNavigation function not found');
            }
        } else {
            console.error('updateMenu - Menu element not found');
        }
    }

    // Loads user settings from /settings/user
    async function loadUserSettings() {
        console.log('loadUserSettings - Fetching user settings');
        try {
            const response = await authenticatedFetch(`${window.apiUrl}/settings/user`);
            if (!response.ok) throw new Error(`Failed to fetch user settings: ${response.status}`);
            const data = await response.json();
            console.log('loadUserSettings - User settings fetched:', JSON.stringify(data));

            // Convert array format to object for easier access
            const settings = {};
            data.settings.forEach(item => {
                settings[item.field] = item.value;
            });
            return settings;
        } catch (error) {
            console.error('loadUserSettings - Error fetching user settings:', error.message);
            throw error;
        }
    }

    // Checks and toggles visibility of admin-specific elements.
    function checkAdminPermission() {
        console.log('checkAdminPermission - Checking admin permission');
        const backButton = document.querySelector('button[data-role="admin"]'); // Updated selector to match new data-role
        if (backButton) {
            backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
            console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
        } else {
            console.warn('checkAdminPermission - Back button not found');
        }
    }

    // Loads and displays merchant products.
    async function loadProducts() {
        console.log('loadProducts - Starting product load process');
        try {
            console.log('loadProducts - Fetching from URL:', `${window.apiUrl}/settings/products`);
            const response = await authenticatedFetch(`${window.apiUrl}/settings/products`);
            if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
            const data = await response.json();
            console.log('loadProducts - Fetched data:', JSON.stringify(data));

            const tbody = document.getElementById('productList');
            if (tbody) {
                console.log('loadProducts - Successfully found tbody:', tbody);
                tbody.innerHTML = ''; // Clear existing content
                console.log('loadProducts - Cleared tbody content');
                data.products.forEach((product, index) => {
                    console.log(`loadProducts - Processing product ${index + 1}:`, JSON.stringify(product));
                    const row = createProductRow(product);
                    console.log(`loadProducts - Generated row ${index + 1} HTML:`, row.outerHTML);
                    tbody.appendChild(row);
                    console.log(`loadProducts - Appended row ${index + 1} to tbody`);
                });
                console.log('loadProducts - Finished updating table with', data.products.length, 'products');
            } else {
                console.warn('loadProducts - tbody element #productList not found in DOM');
            }
        } catch (error) {
            console.error('loadProducts - Error occurred:', error.message);
            toastr.error(`Error loading products: ${error.message}`);
        }
    }

    // Creates a table row for a product.
    function createProductRow(product) {
        console.log('createProductRow - Building row for product:', JSON.stringify(product));
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td class="hidden">${product.id || ''}</td>
            <td>${product.category || 'N/A'}</td>
            <td>${product.title || 'N/A'}</td>
            <td><a href="${product.product_url || '#'}" target="_blank">${product.product_url ? 'Link' : 'N/A'}</a></td>
            <td>${product.current_price !== undefined ? product.current_price : 'N/A'}</td>
            <td>${product.original_price !== undefined ? product.original_price : 'N/A'}</td>
            <td><img src="${product.image_url || ''}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
            <td>${product.qty !== undefined ? product.qty : 'N/A'}</td>
        `;
        console.log('createProductRow - Row HTML created:', tr.outerHTML);
        return tr;
    }

    // Loads store request data specific to merchant page.
    async function loadStoreRequest() {
        console.log('loadStoreRequest - Loading store request');
        const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
        if (!userId) {
            console.error('loadStoreRequest - User ID not found in session');
            toastr.error('User ID not found in session');
            return;
        }
        try {
            console.log('loadStoreRequest - Fetching store request - URL:', `${window.apiUrl}/siterequests`); // Updated endpoint to match site_request_bp.py
            const response = await authenticatedFetch(`${window.apiUrl}/siterequests`);
            if (!response.ok) throw new Error(`Failed to fetch store request: ${response.status}`);
            const data = await response.json();
            console.log('loadStoreRequest - Store request fetched - Data:', JSON.stringify(data));

            // Find the store request for the current user
            const storeRequest = data.siterequests.find(request => request.user_id === userId) || {};
            console.log('loadStoreRequest - Filtered store request for user:', userId, storeRequest);

            document.getElementById('storeName').value = storeRequest.organisation || ''; // Updated field to match site_request_bp.py response
            if (window.tinyMCELoaded) {
                tinymce.get('aboutStore')?.setContent(storeRequest.aboutCommunity || ''); // Adjusted field name
            } else {
                document.getElementById('aboutStore').value = storeRequest.aboutCommunity || '';
            }
            document.getElementById('colorPrefs').value = storeRequest.colorPrefs || '';
            document.getElementById('stylingDetails').value = storeRequest.stylingDetails || '';
            document.getElementById('preferredDomain').value = storeRequest.preferredDomain || 'mystore.uk';

            const emails = storeRequest.emails || ['info'];
            window.emailCount = 0;
            const emailsContainer = document.getElementById('emailsContainer');
            if (emailsContainer) {
                emailsContainer.innerHTML = '';
                emails.forEach((email, index) => {
                    window.emailCount++;
                    const emailDiv = document.createElement('div');
                    emailDiv.className = 'email-section';
                    emailDiv.dataset.email = window.emailCount;
                    emailDiv.innerHTML = `
                        <label for="email${window.emailCount}Name">Email Name:</label>
                        <input type="text" id="email${window.emailCount}Name" name="email${window.emailCount}Name" value="${email}">
                        <span id="email${window.emailCount}Domain">@${storeRequest.preferredDomain || 'mystore.uk'}</span>
                        ${window.emailCount > 1 ? `<button type="button" class="remove-email-btn" onclick="removeEmail(${window.emailCount})">Remove Email</button>` : ''}
                    `;
                    emailsContainer.appendChild(emailDiv);
                });
            } else {
                console.warn('loadStoreRequest - Emails container not found');
            }

            const pages = storeRequest.pages && storeRequest.pages.length >= 2 ? storeRequest.pages : [
                { name: 'Home', content: '' },
                { name: 'Returns Policy', content: '' }
            ];
            window.pageCount = 0;
            const pagesContainer = document.getElementById('pagesContainer');
            if (pagesContainer) {
                pagesContainer.innerHTML = '';
                pages.forEach((page, index) => {
                    window.pageCount++;
                    const pageDiv = document.createElement('div');
                    pageDiv.className = 'page-section';
                    pageDiv.dataset.page = window.pageCount;
                    pageDiv.innerHTML = `
                        <label for="page${window.pageCount}Name">Page Name:</label>
                        <input type="text" id="page${window.pageCount}Name" name="page${window.pageCount}Name" value="${page.name || ''}" ${window.pageCount <= 2 ? 'readonly' : ''}>
                        <br><br>
                        <label for="page${window.pageCount}Content">${window.pageCount === 1 ? 'Home Page' : window.pageCount === 2 ? 'Returns Policy' : 'Page'} Content:</label>
                        <textarea id="page${window.pageCount}Content" name="page${window.pageCount}Content">${page.content || ''}</textarea>
                        <label for="page${window.pageCount}Images">Additional Images:</label>
                        <input type="file" id="page${window.pageCount}Images" name="page${window.pageCount}Images" accept="image/*" multiple>
                        ${window.pageCount > 2 ? `<button type="button" class="remove-page-btn" onclick="removePage(${window.pageCount})">Remove Page</button>` : ''}
                    `;
                    pagesContainer.appendChild(pageDiv);
                    if (window.tinyMCELoaded) {
                        tinymce.init({
                            selector: `#page${window.pageCount}Content`,
                            height: 200,
                            menubar: false,
                            plugins: 'lists',
                            toolbar: 'bold italic | bullist numlist',
                            setup: editor => {
                                editor.on('init', () => console.log(`TinyMCE editor initialized for page${window.pageCount}`));
                            }
                        });
                    }
                });
            } else {
                console.warn('loadStoreRequest - Pages container not found');
            }

            const widgets = storeRequest.widgets || [];
            document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
                checkbox.checked = widgets.includes(checkbox.value);
            });

            updateDomainPreview(); // Assumed function from site-request.js
            console.log('loadStoreRequest - Store request loaded successfully');
        } catch (error) {
            console.error('loadStoreRequest - Error loading store request - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading store request: ${error.message}`);
        }
    }

    // Loads and manages API keys functionality.
    async function loadApiKeys() {
        console.log('loadApiKeys - Loading API keys');
        try {
            const response = await authenticatedFetch(`${window.apiUrl}/settings/api_key`);
            if (!response.ok) throw new Error(`Failed to fetch API keys: ${response.status}`);
            const data = await response.json();
            console.log('loadApiKeys - API keys fetched - Data:', JSON.stringify(data));

            const iconsContainer = document.getElementById('api-keys-icons');
            const fieldsContainer = document.getElementById('api-keys-fields');
            const form = document.getElementById('api-keys-form');
            if (!iconsContainer || !fieldsContainer || !form) {
                console.warn('loadApiKeys - Required DOM elements not found:', {
                    iconsContainer: !!iconsContainer,
                    fieldsContainer: !!fieldsContainer,
                    form: !!form
                });
                return;
            }

            // Render icons horizontally
            iconsContainer.innerHTML = '';
            data.settings.forEach(setting => {
                const icon = document.createElement('i');
                icon.className = setting.icon;
                icon.title = setting.comment;
                icon.dataset.keyType = setting.key_type;
                icon.style.cursor = 'pointer';
                icon.style.width = '32px';  // Set width to 32px
                icon.style.height = '32px'; // Set height to 32px
                icon.style.fontSize = '32px'; // Ensure icon scales to 32px
                icon.style.color = 'inherit'; // Use current foreground color
                icon.addEventListener('click', () => {
                    Array.from(iconsContainer.children).forEach(i => i.style.color = '#C0C0C0');
                    icon.style.color = 'currentColor';
                    displayApiKeyFields(setting, fieldsContainer, form);
                });
                iconsContainer.appendChild(icon);
            });

            // Form submission handler
            form.addEventListener('submit', async (e) => {
                e.preventDefault();
                const keyType = form.dataset.keyType;
                const fields = {};
                Array.from(fieldsContainer.querySelectorAll('input')).forEach(input => {
                    fields[input.name] = input.value;
                });
                try {
                    const patchResponse = await authenticatedFetch(`${window.apiUrl}/settings/api_key/${keyType}`, {
                        method: 'PATCH',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(fields)
                    });
                    if (!patchResponse.ok) throw new Error(`Failed to patch API key: ${patchResponse.status}`);
                    toastr.success(`API key for ${keyType} updated successfully`);
                    loadApiKeys(); // Reload settings after update
                } catch (error) {
                    console.error('loadApiKeys - Error patching API key:', error.message);
                    toastr.error(`Error updating API key: ${error.message}`);
                }
            });

            console.log('loadApiKeys - API keys initialized');
        } catch (error) {
            console.error('loadApiKeys - Error loading API keys:', error.message);
            toastr.error(`Error loading API keys: ${error.message}`);
        }
    }

    // Displays fields for the selected API key.
    function displayApiKeyFields(setting, fieldsContainer, form) {
        console.log('displayApiKeyFields - Displaying fields for:', setting.key_type);
        fieldsContainer.innerHTML = '';
        form.style.display = 'block';
        form.dataset.keyType = setting.key_type;

        // Add heading with comment
        const heading = document.createElement('h3');
        heading.textContent = setting.comment || 'API Key Settings';
        heading.className = 'api-comment-heading'; // Optional for styling
        fieldsContainer.appendChild(heading);

        // Add input fields
        Object.entries(setting.fields).forEach(([name, value]) => {
            const div = document.createElement('div');
            div.style.marginBottom = '10px';
            div.innerHTML = `
                <label for="${name}">${name}:</label>
                <input type="text" id="${name}" name="${name}" value="${value}" style="width: 300px;">
            `;
            fieldsContainer.appendChild(div);
        });

        // Hide other sections and show API keys section
        document.querySelectorAll('.section').forEach(section => section.style.display = 'none');
        document.getElementById('api-keys').style.display = 'block';
    }

    // Loads documentation submenu items from /settings/api_key
    async function loadDocumentationMenu() {
        console.log('loadDocumentationMenu - Loading documentation menu');
        try {
            const response = await authenticatedFetch(`${window.apiUrl}/settings/api_key`); // Updated endpoint
            if (!response.ok) {
                throw new Error('Failed to fetch API keys');
            }
            const data = await response.json();
            console.log('loadDocumentationMenu - Documentation data fetched:', JSON.stringify(data));

            const submenu = document.getElementById('documentation-submenu');
            if (!submenu) {
                console.error('loadDocumentationMenu - Documentation submenu container not found');
                return;
            }
            submenu.innerHTML = '';

            if (!data || !data.settings || data.settings.length === 0) {
                submenu.innerHTML = '<p>No documentation available.</p>';
                console.log('loadDocumentationMenu - No documentation data available');
                return;
            }

            data.settings.forEach(item => {
                if (item.comment && item.doc_link) {
                    const button = document.createElement('button');
                    button.setAttribute('data-section', 'documentation-content');
                    // Assuming doc_link is an array of objects with title and link
                    const readmeLink = item.doc_link.find(link => link.title === 'readme')?.link;
                    if (readmeLink) {
                        button.setAttribute('data-md-path', readmeLink);
                    } else {
                        console.warn('loadDocumentationMenu - No readme link found for item:', item.comment);
                        return;
                    }
            
                    // Determine icon class and size
                    const iconClass = item.icon || 'fas fa-file-alt'; // Default icon if missing
                    const iconSize = item.size || 16; // Default to 16px if no size provided
            
                    // Create the button content with inline style for the icon size
                    const iconElement = `<i class="${iconClass}" style="height: ${iconSize}px; width: ${iconSize}px;"></i>`;
                    button.innerHTML = `<span class="button-content">${iconElement} ${item.comment}</span>`;
            
                    submenu.appendChild(button);
                    console.log('loadDocumentationMenu - Added button:', item.comment, 'with size:', iconSize);
                }
            });

            if (typeof window.siteNavigation?.initializeNavigation === 'function') {
                window.siteNavigation.initializeNavigation();
                console.log('loadDocumentationMenu - Navigation reinitialized');
            }
        } catch (error) {
            console.error('loadDocumentationMenu - Error loading documentation menu:', error);
            if (typeof toastr !== 'undefined') {
                toastr.error('Failed to load documentation menu');
            }
        }
    }

    // Export for use in other scripts
    window.initializeMerchant = initializeMerchant;
    window.checkAdminPermission = checkAdminPermission;
    window.loadProducts = loadProducts;
    window.createProductRow = createProductRow;
    window.loadStoreRequest = loadStoreRequest;
    window.loadApiKeys = loadApiKeys;
    window.displayApiKeyFields = displayApiKeyFields;
    window.loadUserSettings = loadUserSettings;
    window.loadDocumentationMenu = loadDocumentationMenu;
    window.updateMenu = updateMenu; // Export the new updateMenu function
} catch (error) {
    console.error('Error in merchant-page.js:', error.message, error.stack);
    // Fallback to prevent undefined errors
    window.initializeMerchant = function() {
        console.error('initializeMerchant - Failed to initialize due to an error:', error.message);
    };
}
js/page-load.js

// page-load.js
// Purpose: Handles page initialization based on page type, manages loading overlays, and ensures proper navigation.

// Guard against multiple inclusions
if (!window.pageLoadInitialized) {
    window.pageLoadInitialized = true;

    // Configuration for logging
    const ENABLE_LOGGING = true;

    function log(message, ...args) {
        if (ENABLE_LOGGING) console.log(message, ...args);
    }

    function error(message, ...args) {
        if (ENABLE_LOGGING) console.error(message, ...args);
    }

    function showLoadingOverlay() {
        log('showLoadingOverlay - Displaying loading overlay');
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) overlay.style.display = 'flex';
    }

    function hideLoadingOverlay() {
        log('hideLoadingOverlay - Hiding loading overlay');
        const overlay = document.getElementById('loadingOverlay');
        if (overlay) {
            overlay.style.display = 'none';
            document.querySelector('.layout-wrapper').style.display = 'block';
        }
    }

    async function waitForCssLoad(cssUrl) {
        log('waitForCssLoad - Checking CSS load:', cssUrl);
        const link = document.querySelector(`link[href*="${cssUrl}"]`);
        if (!link) {
            error('waitForCssLoad - CSS link not found:', cssUrl);
            return Promise.resolve();
        }
        return new Promise(resolve => {
            link.onload = resolve;
            link.onerror = () => {
                error('waitForCssLoad - CSS failed to load:', cssUrl);
                resolve();
            };
            if (link.sheet) resolve();
        });
    }

    let isInitializing = false;

    async function initialize(pageType) {
        if (isInitializing) {
            log('initialize - Already initializing, skipping for:', pageType);
            return;
        }
        isInitializing = true;
        log('initialize - Starting page initialization - Page type:', pageType);

        showLoadingOverlay();
        await waitForCssLoad('/static/css/icons.css');

        const config = {
            login: { permissions: [], initialSection: null, requiresUserId: false },
            admin: { permissions: ['admin'], initialSection: 'dashboard', requiresUserId: true },
            merchant: { permissions: ['merchant'], initialSection: 'deals', requiresUserId: true },
            community: { permissions: ['community'], initialSection: 'group', requiresUserId: true },
            partner: { permissions: ['wixpro'], initialSection: 'clients', requiresUserId: true }
        };

        let effectivePageType = pageType;
        let pageConfig = config[pageType] || { permissions: [], initialSection: null, requiresUserId: false };
        log('initialize - Configuration loaded for page type:', pageType, 'Config:', JSON.stringify(pageConfig));

        if (pageConfig.permissions.length > 0) { // Only check token for role pages
            const token = localStorage.getItem('authToken');
            if (!token) {
                error('initialize - No token found for role page, switching to login');
                effectivePageType = 'login';
                pageConfig = config['login'];
            } else {
                const decoded = window.decodeJWT(token);
                if (!decoded || !decoded.user_id) {
                    error('initialize - Invalid token, clearing and switching to login');
                    localStorage.removeItem('authToken');
                    effectivePageType = 'login';
                    pageConfig = config['login'];
                } else {
                    const userPermissions = decoded.permissions || [];
                    if (!pageConfig.permissions.every(p => userPermissions.includes(p))) {
                        error('initialize - Insufficient permissions for:', pageType, 'Required:', pageConfig.permissions, 'User:', userPermissions);
                        effectivePageType = 'login';
                        pageConfig = config['login'];
                    }
                }
            }
        }

        await performPageSetup(effectivePageType, pageConfig);
        log('initialize - Initialization process completed for:', effectivePageType);
        isInitializing = false;
        hideLoadingOverlay();
    }

    async function performPageSetup(pageType, pageConfig) {
        log('performPageSetup - Starting setup - Page type:', pageType);
        if (pageConfig.initialSection) {
            log('performPageSetup - Setting initial section:', pageConfig.initialSection);
            // Additional setup logic here if needed
        } else {
            log('performPageSetup - No initial section specified for:', pageType);
        }

        log('performPageSetup - Executing extra steps for:', pageType);
        if (pageType === 'login') {
            log('initialize - Executing login-specific steps');
            // Login-specific steps here if needed
            log('initialize - Login-specific steps completed');
        }

        log('performPageSetup - Page setup completed for:', pageType);
    }

    document.addEventListener('DOMContentLoaded', function() {
        log('DOMContentLoaded - Starting initialization');
        const pageType = document.body.getAttribute('data-page-type') || 'login';
        log('DOMContentLoaded - Determined page type:', pageType);

        // Enhanced redirect logic
        const token = localStorage.getItem('authToken');
        const currentPageType = pageType;
        const expectedPageType = localStorage.getItem('expectedPageType') || 'login';
        const redirectCount = parseInt(localStorage.getItem('loginRedirectCount') || '0');
        const xPageType = document.head.querySelector('meta[name="x-page-type"]')?.content || currentPageType;
        const pendingRole = localStorage.getItem('pendingRole') || '';

        log('Page load check - Token:', token ? '[present]' : 'null', 'Current Page Type:', currentPageType, 'Expected Page Type:', expectedPageType, 'X-Page-Type:', xPageType, 'Redirect Count:', redirectCount, 'Pending Role:', pendingRole);

        if (token && pendingRole && currentPageType === 'login') {
            log('Token present with pending role after login, attempting role switch:', pendingRole);
            localStorage.removeItem('pendingRole');
            window.siteNavigation.fetchProtectedPage('/', pendingRole);
            return;
        }

        if (token && currentPageType === 'login' && expectedPageType !== 'login') {
            if (redirectCount > 2) {
                error('Login redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                window.siteNavigation.deleteCookie('authToken');
                initialize('login');
            } else if (xPageType === 'login') {
                log('Server returned login page despite valid token, attempting re-auth');
                const decoded = window.decodeJWT(token);
                if (decoded && decoded.permissions) {
                    const role = decoded.permissions.includes('admin') ? 'admin' :
                                 decoded.permissions.includes('merchant') ? 'merchant' :
                                 decoded.permissions.includes('community') ? 'community' :
                                 decoded.permissions.includes('wixpro') ? 'partner' : 'login';
                    if (role !== 'login') {
                        log('Redirecting to role-specific page based on token permissions:', role);
                        localStorage.setItem('loginRedirectCount', redirectCount + 1);
                        window.siteNavigation.fetchProtectedPage('/', role);
                        return;
                    }
                }
                error('Session issue detected, clearing token');
                toastr.error('Session issue detected, please log in again');
                localStorage.removeItem('authToken');
                localStorage.removeItem('expectedPageType');
                localStorage.setItem('loginRedirectCount', '0');
                window.siteNavigation.deleteCookie('authToken');
                initialize('login');
            } else {
                log('Redirecting to / with token, incrementing redirect count');
                localStorage.setItem('loginRedirectCount', redirectCount + 1);
                window.siteNavigation.setCookie('authToken', token, 7);
                window.location.href = '/';
            }
        } else {
            localStorage.setItem('loginRedirectCount', '0');
            if (currentPageType !== 'login') localStorage.removeItem('expectedPageType');
            initialize(currentPageType);
        }
    });

    window.initialize = initialize;
}
js/partner-page.js
// partner-page.js
// Purpose: Manages page-specific functionality for the /partner page.

// Initializes the partner page with permission checks.
function initializePartner() {
    console.log('initializePartner - Initializing partner page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializePartner - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializePartner - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    console.log('initializePartner - User permissions:', window.userPermissions); // Added logging
    if (!window.userPermissions.includes('wixpro') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: WixPro or Admin permission required');
        console.error('initializePartner - No wixpro/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    const userIdInput = document.getElementById('userId');
    if (userIdInput && userId) {
        userIdInput.value = userId;
    } else if (!userId) {
        console.warn('initializePartner - No userId found in localStorage');
    } else {
        console.warn('initializePartner - userId input element not found');
    }

    // Set up navigation and load initial content
    console.log('initializePartner - Setting up navigation'); // Added logging
    setupNavigation(); // From site-navigation.js
    updateMenu(); // Call the new updateMenu function to set up navigation buttons
    checkAdminPermission();
    console.log('initializePartner - Loading partner integrations'); // Added logging
    loadPartnerIntegrations(); // Load partner-specific integrations

    // Fetch and display contact_name in the welcome section
    console.log('initializePartner - Loading user settings'); // Added logging
    if (typeof loadSettings === 'function') {
        loadSettings().then(settings => {
            const contactName = settings.contact_name || 'User';
            const welcomeMessage = document.getElementById('welcome-message');
            if (welcomeMessage) {
                const userContactNameSpan = document.getElementById('user-contact-name');
                if (userContactNameSpan) {
                    userContactNameSpan.textContent = contactName;
                    console.log('initializePartner - Updated contact name in welcome section:', contactName);
                } else {
                    console.warn('initializePartner - user-contact-name span not found in welcome-message');
                }
            } else {
                console.warn('initializePartner - welcome-message element not found');
            }
        }).catch(error => {
            console.error('initializePartner - Error loading settings for contact name:', error.message);
            toastr.error('Error loading user settings');
        });
    } else {
        console.error('initializePartner - loadSettings function not found');
    }

    attachEventListeners(); // From page-load.js

    // Call shared "Change Password" logic
    if (typeof setupChangePassword === 'function') {
        setupChangePassword(); // From user-management.js
        console.log('initializePartner - Change Password logic initialized');
    } else {
        console.error('initializePartner - setupChangePassword function not found');
    }

    // Hide loading overlay after initialization
    hideLoadingOverlay(); // From page-load.js
    console.log('initializePartner - Partner page initialized successfully');
}

// Updates the menu dynamically based on permissions
function updateMenu() {
    console.log('updateMenu - Updating menu');
    const menu = document.getElementById('menu');
    const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
    if (menu) {
        menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
        menu.innerHTML += `
            <button data-section="info">
                <span class="button-content"><i class="fas fa-home"></i> Dashboard</span>
            </button>
            <button data-section="integrations">
                <span class="button-content"><i class="fas fa-plug"></i> Integrations</span>
            </button>
            <button data-section="my-account">
                <span class="button-content"><i class="fas fa-cog"></i> My Account</span>
            </button>
        `;
        // Add navigation buttons to other role pages
        if (window.userPermissions.includes('admin')) {
            menu.innerHTML += `
                <button data-href="/" data-role="admin" style="background-color: #dc3545;">
                    <span class="button-content"><i class="fas fa-arrow-left"></i> Back to Admin</span>
                </button>
            `;
        }
        if (window.userPermissions.includes('community')) {
            menu.innerHTML += `
                <button data-href="/" data-role="community" style="background-color: #007bff;">
                    <span class="button-content"><i class="fas fa-users"></i> Community Dashboard</span>
                </button>
            `;
        }
        if (window.userPermissions.includes('merchant')) {
            menu.innerHTML += `
                <button data-href="/" data-role="merchant" style="background-color: #007bff;">
                    <span class="button-content"><i class="fas fa-store"></i> Merchant Dashboard</span>
                </button>
            `;
        }
        menu.innerHTML += `
            <button id="logOffBtn" style="background-color: #dc3545;">
                <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
            </button>
        `;
        console.log('updateMenu - Menu updated');

        // Ensure submenu visibility is handled correctly
        if (typeof window.siteNavigation?.initializeNavigation === 'function') {
            window.siteNavigation.initializeNavigation();
            console.log('updateMenu - initializeNavigation called to fix submenu hiding');
        } else {
            console.error('updateMenu - initializeNavigation function not found');
        }
    } else {
        console.error('updateMenu - Menu element not found');
    }
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-role="admin"]'); // Updated selector to match new data-role
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays partner-specific integrations or tests.
async function loadPartnerIntegrations() {
    console.log('loadPartnerIntegrations - Loading partner integrations');
    const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
    if (!userId) {
        console.error('loadPartnerIntegrations - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        // Note: The /integrations endpoint doesn't exist in the provided blueprints.
        // We'll mock the functionality for now, assuming it should fetch integration data.
        // In a real scenario, we might need to add an endpoint in a blueprint like user_settings_bp.py.
        console.log('loadPartnerIntegrations - Fetching integrations - URL:', `${window.apiUrl}/settings/client_api`);
        const response = await authenticatedFetch(`${window.apiUrl}/settings/client_api`); // Using client_api as a placeholder
        if (!response.ok) throw new Error(`Failed to fetch integrations: ${response.status}`);
        const data = await response.json();
        console.log('loadPartnerIntegrations - Integrations fetched - Data:', JSON.stringify(data));

        const integrationList = document.getElementById('integrationList');
        if (integrationList) {
            integrationList.innerHTML = '';
            // Map client_api settings to integrations for display purposes
            const integrations = data.settings.map(setting => ({
                name: setting.key_type,
                status: setting.fields.enabled ? 'Active' : 'Inactive' // Mocked status based on a field
            }));
            integrations.forEach(integration => {
                const li = document.createElement('li');
                li.textContent = `${integration.name} - Status: ${integration.status}`;
                integrationList.appendChild(li);
            });
            console.log('loadPartnerIntegrations - Integration list updated - Count:', integrations.length);
        } else {
            console.warn('loadPartnerIntegrations - Integration list element not found');
        }
    } catch (error) {
        console.error('loadPartnerIntegrations - Error loading integrations - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading integrations: ${error.message}`);
    }
}

// Export for use in other scripts
window.initializePartner = initializePartner;
window.checkAdminPermission = checkAdminPermission;
window.loadPartnerIntegrations = loadPartnerIntegrations;
window.updateMenu = updateMenu; // Export the new updateMenu function
js/site-auth.js
// site-auth.js
// Purpose: Manages authentication-related functionality, including password visibility toggling, 
// user logout, JWT token decoding, authenticated fetching, and password saving.

// Guard against multiple inclusions
if (!window.siteAuthInitialized) {
    window.siteAuthInitialized = true;

    // Configuration for logging (toggle based on environment, e.g., set to false in production)
    const ENABLE_LOGGING = true;

    // Helper function for consistent logging
    function log(message, ...args) {
        if (ENABLE_LOGGING) {
            console.log(message, ...args);
        }
    }

    // Helper function for consistent error logging
    function error(message, ...args) {
        if (ENABLE_LOGGING) {
            console.error(message, ...args);
        }
    }

    // Toggles the visibility of a password input field, updating associated icon.
    function togglePassword(fieldId) {
        log('togglePassword - Initiating visibility toggle - Field ID:', fieldId);
        const input = document.getElementById(fieldId);
        const icon = input ? input.nextElementSibling : null;
        log('togglePassword - Input element retrieved:', input, 'Icon element:', icon);

        if (!input) {
            error('togglePassword - Password input not found - Field ID:', fieldId);
            return;
        }
        if (!icon) {
            error('togglePassword - Icon element not found for input - Field ID:', fieldId);
            return;
        }

        const isPassword = input.type === 'password';
        log('togglePassword - Current input type:', input.type);
        if (isPassword) {
            input.type = 'text';
            icon.classList.remove('fa-eye');
            icon.classList.add('fa-eye-slash');
            log('togglePassword - Changed to text visibility - Field ID:', fieldId);
        } else {
            input.type = 'password';
            icon.classList.remove('fa-eye-slash');
            icon.classList.add('fa-eye');
            log('togglePassword - Changed to password visibility - Field ID:', fieldId);
        }
        log('togglePassword - Toggle completed - New type:', input.type);
    }

    // Logs the user out, clearing session data and redirecting to home.
    function logOff() {
        log('logOff - Initiating logout process');
        const confirmed = confirm('Are you sure you want to log off?');
        log('logOff - User confirmation received:', confirmed);

        if (confirmed) {
            log('logOff - User confirmed logout - Clearing session data');
            localStorage.removeItem('authToken');
            localStorage.removeItem('userId');
            log('logOff - Auth token and userId removed from localStorage - Current localStorage:', JSON.stringify(localStorage));
            toastr.success('Logged off successfully');
            log('logOff - Success toast displayed');

            setTimeout(() => {
                log('logOff - Redirecting to / after 1-second delay');
                window.location.href = '/';
                log('logOff - Redirect executed');
            }, 1000);
        } else {
            log('logOff - Logout cancelled by user');
        }
        log('logOff - Logout process completed');
    }

    // Decodes a JWT token to extract user data, such as permissions.
    function decodeJWT(token) {
        log('decodeJWT - Starting JWT decoding - Input token:', token);
        if (!token || typeof token !== 'string') {
            error('decodeJWT - Invalid token: null or not a string - Token:', token);
            return null;
        }
        if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
            error('decodeJWT - Token does not match JWT format - Token:', token);
            return null;
        }
        log('decodeJWT - Token format validated - Proceeding with decode');

        const parts = token.split('.');
        log('decodeJWT - Token split into parts:', parts);

        try {
            const base64Url = parts[1];
            log('decodeJWT - Extracted base64Url from token:', base64Url);
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            log('decodeJWT - Converted to base64:', base64);
            const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
            log('decodeJWT - Decoded JSON payload:', jsonPayload);
            const decoded = JSON.parse(jsonPayload);
            log('decodeJWT - Parsed JWT payload:', JSON.stringify(decoded));
            return decoded;
        } catch (err) {
            error('decodeJWT - Error decoding JWT - Error:', err.message, 'Stack:', err.stack, 'Token:', token);
            return null;
        }
    }

    // Authenticated fetch function to handle API requests with auth token
    async function authenticatedFetch(url, options = {}) {
        log('authenticatedFetch - Initiating fetch - URL:', url);
        const token = localStorage.getItem('authToken');
        
        // Define public endpoints that don’t require authentication
        const publicEndpoints = ['/', '/signup'];
        const isPublic = publicEndpoints.some(endpoint => url.includes(endpoint));
        log('authenticatedFetch - Is public endpoint:', isPublic);
        
        // Add redirect counter to prevent recursion
        const redirectCount = parseInt(localStorage.getItem('authFetchRedirectCount') || '0');
        if (!token && !isPublic) {
            if (redirectCount > 2) {
                error('authenticatedFetch - Redirect loop detected, clearing token');
                localStorage.removeItem('authToken');
                localStorage.setItem('authFetchRedirectCount', '0');
                window.location.href = '/';
                return null;
            }
            error('authenticatedFetch - No authentication token found - Redirecting to /');
            localStorage.setItem('authFetchRedirectCount', redirectCount + 1);
            window.location.href = '/';
            return null;
        }

        const headers = new Headers(options.headers || {});
        if (token) headers.set('Authorization', `Bearer ${token}`);
        headers.set('Content-Type', 'application/json');

        const fetchOptions = {
            ...options,
            headers: headers
        };

        try {
            const response = await fetch(url, fetchOptions);
            if (!response.ok && !isPublic) {
                const errorData = await response.json();
                throw new Error(errorData.message || `Request failed with status ${response.status}`);
            }
            log('authenticatedFetch - Response received - Status:', response.status);
            localStorage.setItem('authFetchRedirectCount', '0'); // Reset counter on success
            return response;
        } catch (err) {
            error('authenticatedFetch - Error:', err.message);
            if (!isPublic && redirectCount <= 2) {
                localStorage.setItem('authFetchRedirectCount', redirectCount + 1);
                window.location.href = '/';
                return null;
            }
            throw err;
        }
    }

    // Saves an updated user password via an authenticated request.
    async function savePassword(newPassword) {
        log('savePassword - Starting password save - New password length:', newPassword ? newPassword.length : 'None');
        if (!newPassword || typeof newPassword !== 'string') {
            error('savePassword - Invalid password provided - Password:', newPassword);
            toastr.error('Invalid password provided');
            return;
        }

        try {
            log('savePassword - Sending password update via authenticatedFetch');
            const startTime = Date.now();
            const response = await authenticatedFetch('/update-password', { 
                method: 'POST',
                body: JSON.stringify({ password: newPassword })
            });
            const duration = Date.now() - startTime;

            if (!response) {
                error('savePassword - No response from fetch');
                toastr.error('Failed to save password: No server response');
                return;
            }

            log('savePassword - Response received - Status:', response.status, 'Duration:', `${duration}ms`);
            const result = await response.json();
            log('savePassword - Save response data:', JSON.stringify(result));

            if (result.status === 'success') {
                log('savePassword - Password saved successfully');
                toastr.success('Password updated successfully');
            } else {
                error('savePassword - Server reported failure - Message:', result.message);
                toastr.error(result.message || 'Failed to save password');
            }
        } catch (err) {
            error('savePassword - Error saving password - Error:', err.message, 'Stack:', err.stack);
            toastr.error('Failed to save password: ' + err.message);
        }
        log('savePassword - Password save process completed');
    }

    // Expose functions to window for global access
    window.togglePassword = togglePassword;
    window.logOff = logOff;
    window.decodeJWT = decodeJWT;
    window.authenticatedFetch = authenticatedFetch;
    window.savePassword = savePassword;

    // Signal that site-auth.js has finished loading
    window.dispatchEvent(new Event('siteAuthReady'));
}
js/site-navigation.js

// /static/js/site-navigation.js
if (window.siteNavigationInitialized) {
    console.log('site-navigation.js - Already initialized, skipping');
} else {
    window.siteNavigationInitialized = true;

    if (!window.apiUrl) {
        console.error('site-navigation.js - window.apiUrl is not defined. Please set window.apiUrl before loading this script.');
        throw new Error('window.apiUrl is not defined');
    }
    console.log('site-navigation.js - Using apiUrl:', window.apiUrl);

    function waitForAuthFetch() {
        return new Promise((resolve, reject) => {
            if (typeof window.authenticatedFetch === 'function') {
                console.log('waitForAuthFetch - window.authenticatedFetch is already defined');
                resolve();
                return;
            }
            console.log('waitForAuthFetch - Waiting for siteAuthReady event');
            window.addEventListener('siteAuthReady', () => {
                if (typeof window.authenticatedFetch === 'function') {
                    console.log('waitForAuthFetch - siteAuthReady received, window.authenticatedFetch is defined');
                    resolve();
                } else {
                    console.error('waitForAuthFetch - siteAuthReady received, but window.authenticatedFetch is still not defined');
                    reject(new Error('window.authenticatedFetch is not defined after siteAuthReady'));
                }
            }, { once: true });
        });
    }

    waitForAuthFetch()
        .then(() => {
            async function fetchProtectedPage(url, role = null) {
                const redirectCount = parseInt(localStorage.getItem('fetchRedirectCount') || '0');
                if (redirectCount > 2) {
                    console.error('fetchProtectedPage - Redirect loop detected, clearing token');
                    localStorage.removeItem('authToken');
                    localStorage.setItem('fetchRedirectCount', '0');
                    window.location.replace('/');
                    return;
                }
                window.showLoadingOverlay();
                try {
                    const token = localStorage.getItem('authToken');
                    console.log('fetchProtectedPage - Checking token in localStorage:', token ? '[present]' : 'null');
                    if (!token) {
                        console.log('fetchProtectedPage - No token found, redirecting to /');
                        toastr.error('No authentication token found. Please log in.');
                        localStorage.setItem('fetchRedirectCount', redirectCount + 1);
                        localStorage.setItem('pendingRole', role || '');
                        window.location.replace('/'); // Use replace to avoid history issues
                        return;
                    }
                    if (role) {
                        const decoded = window.decodeJWT(token);
                        if (!decoded.permissions.includes('admin')) {
                            console.error('fetchProtectedPage - Only admins can change roles');
                            toastr.error('Permission denied: Only admins can test roles');
                            window.hideLoadingOverlay();
                            return;
                        }
                        const setRoleResponse = await window.authenticatedFetch(`${window.apiUrl}/set-role`, {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ role: role })
                        });
                        if (!setRoleResponse.ok) {
                            const errorData = await setRoleResponse.json();
                            throw new Error(errorData.message || 'Failed to set role');
                        }
                        const setRoleData = await setRoleResponse.json();
                        console.log('fetchProtectedPage - Role set successfully:', setRoleData);
                        localStorage.setItem('authToken', setRoleData.token);
                        window.siteNavigation.setCookie('authToken', setRoleData.token, 7);
                        url = '/';
                    }
                    const fetchOptions = {
                        method: 'GET',
                        headers: { 'Accept': 'text/html' }
                    };
                    const response = await window.authenticatedFetch(`${window.apiUrl}${url}`, fetchOptions);
                    if (!response.ok) throw new Error(`Server responded with status: ${response.status}`);
                    const html = await response.text();
                    console.log('fetchProtectedPage - Response status:', response.status);

                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');
                    const newContent = doc.querySelector('.layout-wrapper');
                    if (!newContent) throw new Error('No .layout-wrapper found in response HTML');
                    const layoutWrapper = document.querySelector('.layout-wrapper');
                    if (!layoutWrapper) throw new Error('No .layout-wrapper found in current DOM');
                    layoutWrapper.innerHTML = newContent.innerHTML;

                    const scripts = doc.querySelectorAll('script:not([src])');
                    scripts.forEach(script => {
                        const newScript = document.createElement('script');
                        newScript.textContent = script.textContent;
                        document.body.appendChild(newScript);
                        document.body.removeChild(newScript);
                        console.log('fetchProtectedPage - Executed inline script');
                    });

                    const pageType = role || (url.split('/')[1] || 'default');
                    if (typeof window.initialize === 'function') {
                        console.log('fetchProtectedPage - Triggering initialize for:', pageType);
                        window.initialize(pageType);
                    } else {
                        console.warn('fetchProtectedPage - window.initialize not found, page may not fully initialize');
                    }

                    console.log('fetchProtectedPage - Reinitializing navigation after content load');
                    initializeNavigation();
                    localStorage.setItem('fetchRedirectCount', '0');
                } catch (error) {
                    console.error('fetchProtectedPage - Error:', error);
                    toastr.error(error.message || 'Failed to load page');
                    localStorage.setItem('fetchRedirectCount', redirectCount + 1);
                    window.location.replace('/');
                } finally {
                    window.hideLoadingOverlay();
                }
            }

            async function loadSection(sectionId) {
                console.log('loadSection - Starting section load - Section ID:', sectionId);
                if (sectionId === 'my-products') {
                    try {
                        const response = await window.authenticatedFetch(`${window.apiUrl}/settings/products`);
                        if (!response.ok) throw new Error(`Server responded with status: ${response.status}`);
                        const data = await response.json();
                        console.log('loadSection - Products fetched:', JSON.stringify(data));
                        if (data.products && Array.isArray(data.products)) {
                            const tbody = document.getElementById('productList');
                            if (!tbody) {
                                console.error('loadSection - Table body with id "productList" not found');
                                toastr.error('Error: Product table not found in the page');
                                return;
                            }
                            tbody.innerHTML = '';
                            data.products.forEach(product => {
                                const tr = document.createElement('tr');
                                const idTd = document.createElement('td');
                                idTd.className = 'hidden';
                                idTd.textContent = product.id || 'N/A';
                                tr.appendChild(idTd);
                                const categoryTd = document.createElement('td');
                                categoryTd.textContent = product.category || 'N/A';
                                tr.appendChild(categoryTd);
                                const titleTd = document.createElement('td');
                                titleTd.textContent = product.title || 'N/A';
                                tr.appendChild(titleTd);
                                const urlTd = document.createElement('td');
                                const urlLink = document.createElement('a');
                                urlLink.href = product.product_url || '#';
                                urlLink.textContent = product.product_url ? 'Link' : 'N/A';
                                urlLink.target = '_blank';
                                urlTd.appendChild(urlLink);
                                tr.appendChild(urlTd);
                                const priceTd = document.createElement('td');
                                priceTd.textContent = product.current_price !== undefined ? product.current_price : 'N/A';
                                tr.appendChild(priceTd);
                                const originalPriceTd = document.createElement('td');
                                originalPriceTd.textContent = product.original_price !== undefined ? product.original_price : 'N/A';
                                tr.appendChild(originalPriceTd);
                                const imageTd = document.createElement('td');
                                const img = document.createElement('img');
                                img.src = product.image_url || '';
                                img.width = 50;
                                img.onerror = function() { this.src = 'https://via.placeholder.com/50'; };
                                imageTd.appendChild(img);
                                tr.appendChild(imageTd);
                                const qtyTd = document.createElement('td');
                                qtyTd.textContent = product.qty !== undefined ? product.qty : 'N/A';
                                tr.appendChild(qtyTd);
                                tbody.appendChild(tr);
                            });
                        } else {
                            console.error('loadSection - Expected an array of products but got:', data.products);
                            toastr.error('Error loading products: Invalid data format from server');
                        }
                    } catch (error) {
                        console.error('loadSection - Error fetching products:', error.message);
                        toastr.error(`Error loading products: ${error.message}`);
                    }
                } else if (sectionId === 'categories' && typeof window.loadCategories === 'function') {
                    const userId = localStorage.getItem('userId');
                    const isAdmin = window.userPermissions?.includes('admin') || false;
                    window.loadCategories(userId, isAdmin);
                } else if (sectionId === 'integrations' && typeof window.loadPartnerIntegrations === 'function') {
                    window.loadPartnerIntegrations();
                } else if (sectionId === 'visits' && typeof window.loadVisits === 'function') {
                    window.loadVisits();
                } else if (sectionId === 'orders' && typeof window.loadOrders === 'function') {
                    window.loadOrders();
                } else {
                    console.log('loadSection - No dynamic content to load for section:', sectionId);
                }
            }

            function showSection(sectionId, onSectionLoad = null) {
                console.log('showSection - Starting section display - Section ID:', sectionId, 'Has custom callback:', !!onSectionLoad);
                const allSections = document.querySelectorAll('.section');
                allSections.forEach(s => {
                    if (s.id !== 'my_website_intro_section') {
                        s.classList.remove('active');
                        s.style.display = 'none';
                    }
                });
                const section = document.getElementById(sectionId);
                if (section) {
                    section.style.display = 'block';
                    section.classList.add('active');
                    if (typeof onSectionLoad === 'function') {
                        console.log('showSection - Calling custom onSectionLoad callback for:', sectionId);
                        onSectionLoad(sectionId);
                    } else {
                        loadSection(sectionId);
                    }
                } else {
                    console.error('showSection - Section not found - ID:', sectionId);
                    const fallbackSection = document.getElementById('info');
                    if (fallbackSection) {
                        console.log('showSection - Falling back to info section');
                        fallbackSection.style.display = 'block';
                        fallbackSection.classList.add('active');
                    } else {
                        console.error('showSection - Fallback info section not found');
                        toastr.error('Section not found: ' + sectionId);
                    }
                }
            }

            function toggleSubmenu(submenuId, action = 'toggle') {
                console.log(`toggleSubmenu - Starting ${action} - Submenu ID: ${submenuId}`);
                const submenu = document.getElementById(submenuId);
                const button = document.querySelector(`button[data-submenu="${submenuId}"]`);
                const caret = button?.querySelector('.caret');
                if (submenu && button && caret) {
                    let isOpen = submenu.classList.contains('open');
                    if (action === 'toggle') isOpen = !isOpen;
                    else if (action === 'close') isOpen = false;
                    else if (action === 'open') isOpen = true;
                    submenu.classList.toggle('open', isOpen);
                    submenu.style.display = isOpen ? 'block' : 'none';
                    caret.classList.toggle('fa-caret-down', isOpen);
                    caret.classList.toggle('fa-caret-right', !isOpen);
                    button.setAttribute('aria-expanded', isOpen);
                    console.log(`toggleSubmenu - Submenu ${submenuId} set to ${isOpen ? 'open' : 'closed'}`);
                } else {
                    console.error(`toggleSubmenu - Submenu or button not found - Submenu ID: ${submenuId}`);
                }
            }

            function closeAllTopLevelSubmenus(exceptSubmenuId = null) {
                const topLevelSubmenuButtons = document.querySelectorAll('.menu > button[data-submenu]');
                topLevelSubmenuButtons.forEach(button => {
                    const submenuId = button.getAttribute('data-submenu');
                    if (submenuId && submenuId !== exceptSubmenuId) {
                        const submenu = document.getElementById(submenuId);
                        if (submenu) {
                            closeAllSubmenus(submenu);
                            toggleSubmenu(submenuId, 'close');
                        }
                    }
                });
            }

            function closeAllSubmenus(container) {
                const submenus = container.querySelectorAll('.submenu');
                submenus.forEach(submenu => {
                    const submenuId = submenu.id;
                    if (submenuId) toggleSubmenu(submenuId, 'close');
                });
            }

            function handleSectionClick(event) {
                const button = event.currentTarget;
                const sectionId = button.getAttribute('data-section');
                const submenuId = button.getAttribute('data-submenu');
                const href = button.getAttribute('data-href');
                const mdPath = button.getAttribute('data-md-path');
                const role = button.getAttribute('data-role');

                console.log(`handleSectionClick - Clicked:`, { sectionId, submenuId, href, mdPath, role });

                const isTopLevel = button.parentElement.classList.contains('menu');
                if (isTopLevel) {
                    closeAllTopLevelSubmenus(submenuId);
                }

                if (submenuId) {
                    toggleSubmenu(submenuId, 'open');
                }

                if (sectionId && !href && sectionId !== 'user_management') {
                    if (mdPath && typeof window.renderMdPage === 'function') {
                        showSection(sectionId, () => window.renderMdPage(mdPath, 'md-render-target'));
                    } else {
                        showSection(sectionId);
                    }
                }
                if (href) {
                    fetchProtectedPage(href, role);
                }
            }

            function initializeNavigation() {
                console.log('initializeNavigation - Starting navigation setup');
                document.querySelectorAll('.menu button[data-section], .menu button[data-submenu], .menu button[data-href]').forEach(button => {
                    button.removeEventListener('click', handleSectionClick);
                });
                document.querySelectorAll('.submenu').forEach(submenu => {
                    submenu.style.display = 'none';
                    submenu.classList.remove('open');
                    const submenuId = submenu.id;
                    const button = document.querySelector(`button[data-submenu="${submenuId}"]`);
                    if (button) {
                        button.setAttribute('aria-expanded', 'false');
                        const caret = button.querySelector('.caret');
                        if (caret) {
                            caret.classList.remove('fa-caret-down');
                            caret.classList.add('fa-caret-right');
                        }
                    } else {
                        console.warn(`initializeNavigation - No button found for submenu: ${submenuId}`);
                    }
                });
                const buttons = document.querySelectorAll('.menu button[data-section], .menu button[data-submenu], .menu button[data-href]');
                console.log('initializeNavigation - Found buttons to initialize:', buttons.length);
                buttons.forEach(button => {
                    const sectionId = button.getAttribute('data-section');
                    const parentSubmenu = button.closest('.submenu');
                    if (sectionId === 'user_management' || (parentSubmenu && parentSubmenu.id === 'userManagement')) {
                        console.log('initializeNavigation - Skipped click listener for userManagement-related button:', {
                            section: button.dataset.section,
                            role: button.dataset.role,
                            parentSubmenu: parentSubmenu?.id
                        });
                    } else {
                        button.addEventListener('click', handleSectionClick);
                        console.log('initializeNavigation - Added click listener to button:', {
                            section: button.dataset.section,
                            submenu: button.dataset.submenu,
                            href: button.dataset.href,
                            role: button.dataset.role
                        });
                    }
                });

                const logOffBtn = document.getElementById('logOffBtn');
                if (logOffBtn) {
                    console.log('initializeNavigation - Log Off button found, attaching listener');
                    logOffBtn.removeEventListener('click', handleLogoutClick);
                    logOffBtn.addEventListener('click', handleLogoutClick);
                } else {
                    console.error('initializeNavigation - Log Off button not found in DOM');
                }

                if (document.getElementById('info')) {
                    console.log('initializeNavigation - Showing info section on load');
                    showSection('info');
                } else {
                    console.error('initializeNavigation - Info section not found on page load');
                    const firstSection = document.querySelector('.section');
                    if (firstSection) {
                        console.log('initializeNavigation - Falling back to first available section:', firstSection.id);
                        showSection(firstSection.id);
                    }
                }
            }

            function handleLogoutClick(e) {
                e.preventDefault();
                console.log('handleLogoutClick - Log Off clicked');
                fetch('/logoff', { method: 'GET' })
                    .then(response => response.json())
                    .then(data => {
                        if (data.status === 'success') {
                            localStorage.removeItem('authToken');
                            sessionStorage.clear();
                            window.location.href = data.redirect_url;
                        } else {
                            toastr.error(data.message);
                        }
                    })
                    .catch(error => {
                        console.error('Logout failed:', error);
                        toastr.error('Logout failed');
                    });
            }

            function setCookie(name, value, days) {
                let expires = "";
                if (days) {
                    const date = new Date();
                    date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                    expires = "; expires=" + date.toUTCString();
                }
                document.cookie = name + "=" + (value || "") + expires + "; path=/; SameSite=Lax; Secure";
                console.log('setCookie - Set cookie:', name);
            }

            function deleteCookie(name) {
                document.cookie = name + '=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure';
                console.log('deleteCookie - Deleted cookie:', name);
            }

            window.siteNavigation = {
                showSection,
                toggleSubmenu,
                initializeNavigation,
                fetchProtectedPage,
                loadSection,
                setCookie,
                deleteCookie
            };

            if (document.readyState === 'loading') {
                document.addEventListener('DOMContentLoaded', () => {
                    console.log('DOMContentLoaded - Initializing navigation');
                    initializeNavigation();
                });
            } else {
                console.log('Document already loaded - Initializing navigation immediately');
                initializeNavigation();
            }
        })
        .catch(error => {
            console.error('Failed to initialize navigation due to:', error);
            toastr.error('Navigation initialization failed. Please refresh the page.');
        });
}
js/site-request.js
// site-request.js
// Purpose: Manages site request functionality for merchants and communities using the consolidated siterequest.inc template,
// including page/email management, domain handling, and TinyMCE integration.

// Adds a page to the site request form based on user type (merchant/community).
function addPage(type) {
    console.log('addPage - Adding page to site request - Type:', type);
    const maxPages = 5;
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('addPage - Current page count:', pageCount);

    if (pageCount >= maxPages) {
        console.warn('addPage - Maximum pages reached - Max:', maxPages);
        toastr.error(`Maximum of ${maxPages} pages allowed`);
        return;
    }

    pageCount++;
    console.log('addPage - Incrementing page count to:', pageCount);
    localStorage.setItem(`${type}PageCount`, pageCount);

    const container = document.getElementById('pagesContainer');
    console.log('addPage - Pages container:', container);
    if (!container) {
        console.error('addPage - Pages container not found');
        return;
    }

    const pageDiv = document.createElement('div');
    pageDiv.className = 'page-section';
    pageDiv.dataset.page = pageCount;
    const isMerchantDefault = type === 'merchant' && pageCount <= 2;
    const pageName = isMerchantDefault ? (pageCount === 1 ? 'Home' : 'Returns Policy') : '';
    pageDiv.innerHTML = `
        <label for="page${pageCount}Name">Page Name:</label>
        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${pageName}" ${isMerchantDefault ? 'readonly' : ''} placeholder="e.g., ${type === 'merchant' ? 'Products' : 'Events'}">
        <br><br>
        <label for="page${pageCount}Content">${isMerchantDefault ? (pageCount === 1 ? 'Home Page' : 'Returns Policy') : 'Page'} Content:</label>
        <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
        <label for="page${pageCount}Images">Additional Images:</label>
        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
        ${pageCount > (type === 'merchant' ? 2 : 1) ? `<button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>` : ''}
    `;
    container.appendChild(pageDiv);
    console.log('addPage - New page section added - Page number:', pageCount);

    tinymce.remove(`#page${pageCount}Content`);
    initializeTinyMCE(`#page${pageCount}Content`);
    console.log('addPage - TinyMCE initialized for new page');
    console.log('addPage - Page addition completed');
}

// Removes a page from the site request form based on user type (merchant/community).
function removePage(pageNum, type) {
    console.log('removePage - Removing page - Page number:', pageNum, 'Type:', type);
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('removePage - Current page count:', pageCount);
    const minPages = type === 'merchant' ? 2 : 1;

    if (pageCount <= minPages) {
        console.warn('removePage - Cannot remove below minimum pages - Min:', minPages);
        toastr.error(`Cannot remove the last ${type === 'merchant' ? 'Home or Returns Policy' : ''} page${minPages > 1 ? 's' : ''}`);
        return;
    }

    const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
    console.log('removePage - Page section to remove:', pageSection);
    if (pageSection) {
        tinymce.get(`page${pageNum}Content`)?.remove();
        console.log('removePage - Removed TinyMCE instance for page:', pageNum);
        pageSection.remove();
        pageCount--;
        localStorage.setItem(`${type}PageCount`, pageCount);
        console.log('removePage - Page removed, new page count:', pageCount);
    } else {
        console.error('removePage - Page section not found - Page number:', pageNum);
    }
    console.log('removePage - Removal completed');
}

// Adds an email to the site request form.
function addEmail(type) {
    console.log('addEmail - Adding email to site request - Type:', type);
    const maxEmails = 5;
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('addEmail - Current email count:', emailCount);

    if (emailCount >= maxEmails) {
        console.warn('addEmail - Maximum emails reached - Max:', maxEmails);
        toastr.error(`Maximum of ${maxEmails} email addresses allowed`);
        return;
    }

    emailCount++;
    console.log('addEmail - Incrementing email count to:', emailCount);
    localStorage.setItem(`${type}EmailCount`, emailCount);

    const container = document.getElementById('emailsContainer');
    console.log('addEmail - Emails container:', container);
    if (!container) {
        console.error('addEmail - Emails container not found');
        return;
    }

    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('addEmail - Using domain:', domain);
    const emailDiv = document.createElement('div');
    emailDiv.className = 'email-section';
    emailDiv.dataset.email = emailCount;
    emailDiv.innerHTML = `
        <label for="email${emailCount}Name">Email Name:</label>
        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
        <span id="email${emailCount}Domain">@${domain}</span>
        <button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>
    `;
    container.appendChild(emailDiv);
    console.log('addEmail - New email section added - Email number:', emailCount);

    updateDomainPreview(type);
    console.log('addEmail - Email addition completed');
}

// Removes an email from the site request form.
function removeEmail(emailNum, type) {
    console.log('removeEmail - Removing email - Email number:', emailNum, 'Type:', type);
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('removeEmail - Current email count:', emailCount);

    if (emailCount <= 1) {
        console.warn('removeEmail - Cannot remove the last email');
        toastr.error('Cannot remove the last email');
        return;
    }

    const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
    console.log('removeEmail - Email section to remove:', emailSection);
    if (emailSection) {
        emailSection.remove();
        emailCount--;
        localStorage.setItem(`${type}EmailCount`, emailCount);
        console.log('removeEmail - Email removed, new email count:', emailCount);
        updateDomainPreview(type);
    } else {
        console.error('removeEmail - Email section not found - Email number:', emailNum);
    }
    console.log('removeEmail - Removal completed');
}

// Updates the domain preview and email domain spans for the site request.
function updateDomainPreview(type) {
    console.log('updateDomainPreview - Updating domain preview - Type:', type);
    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('updateDomainPreview - Domain value:', domain);

    const previewElement = document.getElementById('domainPreview');
    if (previewElement) {
        previewElement.textContent = `@${domain}`;
        console.log('updateDomainPreview - Updated domain preview to:', `@${domain}`);
    }

    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('updateDomainPreview - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const domainSpan = document.getElementById(`email${i}Domain`);
        console.log('updateDomainPreview - Checking domain span - ID:', `email${i}Domain`, 'Element:', domainSpan);
        if (domainSpan) {
            domainSpan.textContent = `@${domain}`;
            console.log('updateDomainPreview - Updated email domain - ID:', `email${i}Domain`, 'to:', `@${domain}`);
        }
    }
    console.log('updateDomainPreview - Update completed');
}

// Checks domain availability for the site request.
async function checkDomainAvailability() {
    console.log('checkDomainAvailability - Starting domain availability check');
    const domainInput = document.getElementById('preferredDomain');
    const domain = domainInput?.value;
    console.log('checkDomainAvailability - Domain to check:', domain);

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domain) {
        console.warn('checkDomainAvailability - No domain provided');
        toastr.error('Please enter a preferred domain name');
        return false;
    }
    if (!domainRegex.test(domain)) {
        console.warn('checkDomainAvailability - Invalid domain format - Domain:', domain);
        toastr.error('Invalid domain name (e.g., mystore.uk)');
        return false;
    }

    console.log('checkDomainAvailability - Domain format valid, proceeding with check');
    toastr.info(`Checking availability for ${domain}...`);

    try {
        const startTime = Date.now();
        const response = await fetch(`https://clubmadeira.io/check-domain?domain=${encodeURIComponent(domain)}`, {
            method: 'GET',
            credentials: 'same-origin'
        });
        const duration = Date.now() - startTime;
        console.log('checkDomainAvailability - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('checkDomainAvailability - Fetch failed - Status:', response.status, 'Error text:', errorText);
            if (response.status === 403) {
                throw new Error('Permission denied - please log in');
            }
            throw new Error(`Server error: ${errorText}`);
        }

        const result = await response.json();
        console.log('checkDomainAvailability - Availability result:', JSON.stringify(result));
        if (result.available) {
            console.log('checkDomainAvailability - Domain available:', domain);
            toastr.success(`${result.domain} is available!`);
            return true;
        } else {
            console.warn('checkDomainAvailability - Domain not available:', domain);
            toastr.error(`${result.domain} is not available`);
            if (domainInput) domainInput.value = '';
            return false;
        }
    } catch (error) {
        console.error('checkDomainAvailability - Error checking domain - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to check domain availability: ${error.message}`);
        return false;
    }
}

// Loads TinyMCE editor for site request content editing.
async function loadTinyMCE() {
    console.log('loadTinyMCE - Starting TinyMCE load');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('loadTinyMCE - TinyMCE already loaded');
        initializeTinyMCE();
        return;
    }

    console.log('loadTinyMCE - Loading TinyMCE script');
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js';
        script.referrerpolicy = 'origin';
        document.head.appendChild(script);
        console.log('loadTinyMCE - Script element added to head:', script.src);

        script.onload = () => {
            console.log('loadTinyMCE - TinyMCE script loaded successfully');
            initializeTinyMCE();
            resolve();
        };
        script.onerror = () => {
            console.error('loadTinyMCE - Failed to load TinyMCE script');
            toastr.error('Failed to load rich text editor');
            reject(new Error('TinyMCE load failed'));
        };
    });
}

// Initializes TinyMCE editor for site request content editing with a specific selector.
function initializeTinyMCE(selector = 'textarea[name$="Content"], #about') {
    console.log('initializeTinyMCE - Starting TinyMCE initialization - Selector:', selector);
    if (!window.tinymce) {
        console.error('initializeTinyMCE - TinyMCE not available');
        return;
    }

    tinymce.remove(selector);
    console.log('initializeTinyMCE - Removed existing TinyMCE instances for selector:', selector);

    tinymce.init({
        selector: selector,
        height: 200,
        menubar: false,
        plugins: 'lists',
        toolbar: 'bold italic | bullist numlist',
        setup: editor => {
            editor.on('init', () => {
                console.log('initializeTinyMCE - TinyMCE editor initialized for:', editor.id);
            });
        }
    });
    console.log('initializeTinyMCE - TinyMCE initialization completed');
}

// Generates a formatted timestamp for site request forms.
function getCurrentTimestamp() {
    console.log('getCurrentTimestamp - Generating current timestamp');
    const now = new Date();
    console.log('getCurrentTimestamp - Current date object:', now);
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    console.log('getCurrentTimestamp - Extracted components - Year:', year, 'Month:', month, 'Day:', day, 'Hours:', hours, 'Minutes:', minutes, 'Seconds:', seconds);
    const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    console.log('getCurrentTimestamp - Generated timestamp:', timestamp);
    return timestamp;
}

// Saves the site request form data for either a merchant store or community site.
async function saveSiteRequest() {
    console.log('saveSiteRequest - Starting site request save');
    const userId = document.getElementById('userId')?.value || localStorage.getItem('userId');
    const userType = document.getElementById('userType')?.value;
    console.log('saveSiteRequest - Retrieved userId:', userId, 'userType:', userType);

    if (!userId) {
        console.error('saveSiteRequest - User ID not found in session or DOM');
        toastr.error('User ID not found in session');
        return;
    }

    if (!userType) {
        console.error('saveSiteRequest - User type not found in form');
        toastr.error('User type not specified');
        return;
    }

    const defaultDomain = userType === 'merchant' ? 'mystore.uk' : 'mycommunity.org';
    const siteRequest = {
        userId: userId,
        type: userType,
        name: document.getElementById('name')?.value.trim() || '',
        about: tinymce.get('about')?.getContent() || document.getElementById('about')?.value || '',
        logos: [],
        colorPrefs: document.getElementById('colorPrefs')?.value.trim() || '',
        stylingDetails: document.getElementById('stylingDetails')?.value.trim() || '',
        preferredDomain: document.getElementById('preferredDomain')?.value.trim() || defaultDomain,
        emails: [],
        pages: [],
        widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
    };
    console.log('saveSiteRequest - Initial site request object:', JSON.stringify(siteRequest));

    // Validation
    if (!siteRequest.name) {
        console.warn('saveSiteRequest - Name field is empty');
        toastr.error(`${userType === 'merchant' ? 'Store' : 'Community'} name is required`);
        return;
    }

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(siteRequest.preferredDomain)) {
        console.warn('saveSiteRequest - Invalid domain format - Domain:', siteRequest.preferredDomain);
        toastr.error(`Invalid domain name (e.g., ${defaultDomain})`);
        return;
    }

    // Handle logos
    const logoFiles = document.getElementById('logos')?.files || [];
    console.log('saveSiteRequest - Logo files count:', logoFiles.length);
    if (logoFiles.length > 5) {
        console.warn('saveSiteRequest - Too many logos - Count:', logoFiles.length);
        toastr.error('Maximum of 5 logos allowed');
        return;
    }
    for (let i = 0; i < logoFiles.length; i++) {
        const reader = new FileReader();
        await new Promise(resolve => {
            reader.onload = () => {
                siteRequest.logos.push(reader.result);
                console.log('saveSiteRequest - Added logo - Index:', i, 'Result length:', reader.result.length);
                resolve();
            };
            reader.readAsDataURL(logoFiles[i]);
        });
    }

    // Collect emails
    let emailCount = parseInt(localStorage.getItem(`${userType}EmailCount`) || 1);
    console.log('saveSiteRequest - Collecting emails - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const emailInput = document.getElementById(`email${i}Name`);
        if (emailInput && emailInput.value.trim()) {
            siteRequest.emails.push(emailInput.value.trim());
            console.log('saveSiteRequest - Added email - Index:', i, 'Value:', emailInput.value.trim());
        }
    }

    // Collect pages
    let pageCount = parseInt(localStorage.getItem(`${userType}PageCount`) || (userType === 'merchant' ? 2 : 1));
    console.log('saveSiteRequest - Collecting pages - Page count:', pageCount);
    for (let i = 1; i <= pageCount; i++) {
        const nameInput = document.getElementById(`page${i}Name`);
        const contentEditor = tinymce.get(`page${i}Content`);
        const contentFallback = document.getElementById(`page${i}Content`);
        const imagesInput = document.getElementById(`page${i}Images`);
        if (nameInput && nameInput.value.trim()) {
            const page = {
                name: nameInput.value.trim(),
                content: contentEditor ? contentEditor.getContent() : (contentFallback?.value || ''),
                images: []
            };
            console.log('saveSiteRequest - Processing page - Index:', i, 'Name:', page.name);

            if (imagesInput && imagesInput.files.length > 0) {
                for (let j = 0; j < imagesInput.files.length; j++) {
                    const reader = new FileReader();
                    await new Promise(resolve => {
                        reader.onload = () => {
                            page.images.push(reader.result);
                            console.log('saveSiteRequest - Added image to page - Page:', i, 'Image index:', j, 'Result length:', reader.result.length);
                            resolve();
                        };
                        reader.readAsDataURL(imagesInput.files[j]);
                    });
                }
            }
            siteRequest.pages.push(page);
        }
    }

    const minPages = userType === 'merchant' ? 2 : 1;
    if (siteRequest.pages.length < minPages || (userType === 'merchant' && (!siteRequest.pages.some(p => p.name === 'Home') || !siteRequest.pages.some(p => p.name === 'Returns Policy')))) {
        console.warn('saveSiteRequest - Insufficient or missing required pages - Pages:', siteRequest.pages.length, 'Required:', minPages);
        toastr.error(userType === 'merchant' ? 'Home and Returns Policy pages are required' : 'At least one page is required');
        return;
    }

    // Save to server
    try {
        console.log('saveSiteRequest - Sending site request to server - URL:', `${apiUrl}/${userId}/siterequest`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`, {
            method: 'POST',
            body: JSON.stringify(siteRequest)
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('saveSiteRequest - No response from fetch');
            toastr.error('Failed to save site request: No server response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSiteRequest - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to save site request: ${response.status} - ${errorText}`);
        }

        console.log('saveSiteRequest - Save successful - Duration:', `${duration}ms`);
        toastr.success(`${userType === 'merchant' ? 'Store' : 'Site'} request saved successfully`);
    } catch (error) {
        console.error('saveSiteRequest - Error saving site request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error saving ${userType === 'merchant' ? 'store' : 'site'} request: ${error.message}`);
    }
    console.log('saveSiteRequest - Save process completed');
}
js/user-management.js
// user-management.js
// Purpose: Manages user-specific settings, Wix client ID operations, and shared "Change Password" logic.

// Loads user settings into the DOM.
async function loadSettings() {
    console.log('loadSettings - Starting settings load');
    const userId = localStorage.getItem('userId');
    console.log('loadSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadSettings - Fetching settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch settings: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSettings - Settings fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with settings
        const referrerId = document.getElementById('referrerId');
        const contactName = document.getElementById('contactName');
        const websiteUrl = document.getElementById('websiteUrl');
        const emailAddress = document.getElementById('emailAddress');
        const phoneNumber = document.getElementById('phoneNumber');

        if (referrerId) referrerId.textContent = userId;
        if (contactName) contactName.value = data.contact_name || '';
        if (websiteUrl) websiteUrl.value = data.website_url || '';
        if (emailAddress) emailAddress.value = data.email_address || '';
        if (phoneNumber) phoneNumber.value = data.phone_number || '';

        console.log('loadSettings - DOM updated - Fields:', {
            referrerId: userId,
            contactName: data.contact_name || '',
            websiteUrl: data.website_url || '',
            emailAddress: data.email_address || '',
            phoneNumber: data.phone_number || ''
        });
    } catch (error) {
        console.error('loadSettings - Error loading settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading settings: ${error.message}`);
    }
    console.log('loadSettings - Settings load completed');
}

// Saves user settings from the DOM.
async function saveSettings(settings) {
    console.log('saveSettings - Starting settings save - Settings:', JSON.stringify(settings));
    const userId = localStorage.getItem('userId');
    console.log('saveSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveSettings - Sending settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`, {
            method: 'PUT',
            body: JSON.stringify(settings)
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save settings: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveSettings - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Settings saved successfully');
    } catch (error) {
        console.error('saveSettings - Error saving settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save settings: ${error.message}`);
    }
    console.log('saveSettings - Save process completed');
}

// Loads Wix client ID into the DOM.
async function loadWixClientId() {
    console.log('loadWixClientId - Starting Wix client ID load');
    const userId = localStorage.getItem('userId');
    console.log('loadWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadWixClientId - Fetching Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch Wix client ID: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadWixClientId - Wix client ID fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with Wix client ID
        const wixClientIdField = document.getElementById('wixClientId');
        if (wixClientIdField) {
            wixClientIdField.value = data.client_id || data.clientId || '';
            console.log('loadWixClientId - DOM updated - wixClientId:', data.client_id || data.clientId || '');
        } else {
            console.warn('loadWixClientId - Wix client ID field not found - ID: wixClientId');
        }
    } catch (error) {
        console.error('loadWixClientId - Error loading Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading Wix client ID: ${error.message}`);
    }
    console.log('loadWixClientId - Wix client ID load completed');
}

// Saves Wix client ID from the DOM.
async function saveWixClientId(clientId) {
    console.log('saveWixClientId - Starting Wix client ID save - Client ID:', clientId);
    const userId = localStorage.getItem('userId');
    console.log('saveWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveWixClientId - Sending Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`, {
            method: 'POST',
            body: JSON.stringify({ clientId })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save Wix client ID: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveWixClientId - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Wix client ID saved successfully');
    } catch (error) {
        console.error('saveWixClientId - Error saving Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save Wix client ID: ${error.message}`);
    }
    console.log('saveWixClientId - Save process completed');
}

// Validates password complexity
function validatePassword(password) {
    console.log('validatePassword - Validating password');
    const minLength = 8;
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

    if (password.length < minLength) {
        toastr.error('Password must be at least 8 characters long.');
        console.log('validatePassword - Failed: Length < 8');
        return false;
    }
    if (!hasUpperCase) {
        toastr.error('Password must contain at least one uppercase letter.');
        console.log('validatePassword - Failed: No uppercase');
        return false;
    }
    if (!hasLowerCase) {
        toastr.error('Password must contain at least one lowercase letter.');
        console.log('validatePassword - Failed: No lowercase');
        return false;
    }
    if (!hasNumber) {
        toastr.error('Password must contain at least one number.');
        console.log('validatePassword - Failed: No number');
        return false;
    }
    if (!hasSpecialChar) {
        toastr.error('Password must contain at least one special character.');
        console.log('validatePassword - Failed: No special character');
        return false;
    }
    console.log('validatePassword - Password valid');
    return true;
}

// Sets up the "Change Password" form submission logic
function setupChangePassword() {
    console.log('setupChangePassword - Setting up change password logic');
    const changePasswordButton = document.querySelector('button[data-action="savePassword"]');
    if (!changePasswordButton) {
        console.warn('setupChangePassword - Change password button not found');
        return;
    }

    changePasswordButton.addEventListener('click', async () => {
        console.log('setupChangePassword - Change password button clicked');
        const currentPasswordInput = document.getElementById('currentPassword');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');

        // Validate input elements exist
        if (!currentPasswordInput || !newPasswordInput || !confirmPasswordInput) {
            toastr.error('Password fields are missing on this page.');
            console.error('setupChangePassword - One or more password input elements not found');
            return;
        }

        const currentPassword = currentPasswordInput.value.trim();
        const newPassword = newPasswordInput.value.trim();
        const confirmPassword = confirmPasswordInput.value.trim();

        // Check for empty fields
        if (!currentPassword || !newPassword || !confirmPassword) {
            toastr.error('All password fields are required.');
            console.log('setupChangePassword - Empty password field detected');
            return;
        }

        // Check password match
        if (newPassword !== confirmPassword) {
            toastr.error('New password and confirmation do not match.');
            console.log('setupChangePassword - Passwords do not match');
            return;
        }

        // Validate password complexity
        if (!validatePassword(newPassword)) {
            console.log('setupChangePassword - Password complexity validation failed');
            return;
        }

        // Submit password change request
        try {
            console.log('setupChangePassword - Submitting password change request');
            const token = localStorage.getItem('authToken');
            if (!token) {
                throw new Error('No authentication token found');
            }

            const response = await authenticatedFetch(`${window.apiUrl}/update-password`, {
                method: 'POST',
                body: JSON.stringify({
                    current_password: currentPassword,
                    new_password: newPassword
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `Failed to update password: ${response.status}`);
            }

            const data = await response.json();
            console.log('setupChangePassword - Password updated successfully:', data);
            toastr.success('Password updated successfully!');
            // Clear form fields after success
            currentPasswordInput.value = '';
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
        } catch (error) {
            console.error('setupChangePassword - Error updating password:', error.message);
            toastr.error(error.message || 'An error occurred while updating the password.');
        }
    });
    console.log('setupChangePassword - Event listener attached');
}

// Export for use in other scripts
window.loadSettings = loadSettings;
window.saveSettings = saveSettings;
window.loadWixClientId = loadWixClientId;
window.saveWixClientId = saveWixClientId;
window.validatePassword = validatePassword;
window.setupChangePassword = setupChangePassword;
md/amazon_uk_readme.md
# Amazon UK Affiliate Signup Process

This document provides a detailed, step-by-step guide to signing up for the Amazon UK Affiliate Program (Amazon Associates) to obtain the necessary credentials (`ACCESS_KEY`, `SECRET_KEY`, `ASSOCIATE_TAG`, `COUNTRY`) for use in the `clubmadeira.io` configuration.

## Prerequisites
- A valid email address.
- A website or blog (Amazon requires you to have a platform to promote products; `clubmadeira.io` can be used if already set up).
- Basic understanding of affiliate marketing.

## Step-by-Step Instructions

### Step 1: Visit the Amazon Associates Signup Page
- Open your web browser and navigate to the Amazon UK Associates signup page: [https://affiliate-program.amazon.co.uk](https://affiliate-program.amazon.co.uk).
- Click on the "Join Now for Free" button.

### Step 2: Sign In or Create an Amazon Account
- If you have an existing Amazon UK account:
  - Enter your email address or phone number and password.
  - Click "Sign In".
- If you don’t have an account:
  - Click "Create your Amazon account".
  - Provide your name, email address, and a secure password.
  - Click "Create your Amazon account" and verify your email if prompted.

### Step 3: Start the Application Process
- After signing in, you’ll be directed to the Amazon Associates application form.
- **Account Information**:
  - Select your preferred language (e.g., English).
  - Enter your full name and address (ensure this matches your legal details for payment purposes).
  - Provide a phone number for verification.

### Step 4: Specify Your Website
- **Website and Mobile Apps**:
  - Enter the URL of your primary website (e.g., `https://clubmadeira.io`).
  - If you have additional sites or apps, list them (optional).
  - Amazon requires at least one valid site; ensure it has some content (e.g., blog posts or product pages) before submission.

### Step 5: Profile Details
- **Associate ID**:
  - Create a unique Associate ID (e.g., `clubmadeira-21`). This will be your `ASSOCIATE_TAG`.
  - Write this down; you’ll need it for the config.
- **Website Description**:
  - Describe what your website is about (e.g., "Club Madeira is a platform for car enthusiasts to find parts and accessories").
  - Specify the primary content type (e.g., blog, reviews, e-commerce).
- **Traffic Sources**:
  - Select how you drive traffic (e.g., organic search, social media).
  - Be honest; Amazon reviews this.

### Step 6: Verify Your Identity
- **Phone Verification**:
  - Enter your phone number.
  - Choose to receive a call or SMS for a verification code.
  - Enter the code provided to proceed.

### Step 7: Submit Application
- Review all entered information.
- Check the box to agree to the Amazon Associates Operating Agreement.
- Click "Finish" to submit your application.

### Step 8: Wait for Approval
- Amazon will review your application (typically within 1-3 business days).
- You’ll receive an email notification with approval status.
- If rejected, review the feedback (e.g., insufficient content) and reapply after addressing issues.

### Step 9: Access Your Credentials
- Once approved, log in to your Amazon Associates account at [https://affiliate-program.amazon.co.uk](https://affiliate-program.amazon.co.uk).
- **Associate Tag**:
  - Your `ASSOCIATE_TAG` is the Associate ID you created (e.g., `clubmadeira-21`).
- **API Access (ACCESS_KEY, SECRET_KEY)**:
  - Navigate to "Tools" > "Product Advertising API".
  - Click "Sign Up Now" for API access (requires an approved account with some activity).
  - Follow prompts to generate your `ACCESS_KEY` and `SECRET_KEY`.
  - Note: Initial API access may require 3 qualifying sales within 180 days of signup.
- **COUNTRY**:
  - Set to "UK" for Amazon UK.

### Step 10: Update Config
- Open your `clubmadeira.io` configuration file (`config.json`).
- Locate the `"amazon_uk"` section.
- Enter your credentials:
  - `"ACCESS_KEY": "<your_access_key>"`
  - `"SECRET_KEY": "<your_secret_key>"`
  - `"ASSOCIATE_TAG": "<your_associate_id>"`
  - `"COUNTRY": "UK"`
- Save the file and redeploy the configuration as needed.

## Troubleshooting
- **Application Rejected**: Ensure your website has sufficient content (e.g., 10+ posts) and resubmit.
- **API Access Denied**: Generate some affiliate sales first, then reapply for API access.
- **Lost Credentials**: Log back into Amazon Associates to retrieve your `ASSOCIATE_TAG`; regenerate API keys if needed.

## Next Steps
- Use the Product Advertising API to integrate Amazon UK products into `clubmadeira.io`.
- Refer to the developer documentation at [https://webservices.amazon.com/paapi5/documentation/](https://webservices.amazon.com/paapi5/documentation/) for API usage.
md/awin_readme.md
# Awin Affiliate Signup Process

This document provides a detailed, step-by-step guide to signing up for the Awin Affiliate Program to obtain the `API_TOKEN` credential for use in the `clubmadeira.io` configuration.

## Prerequisites
- A valid email address.
- A website or platform (e.g., `clubmadeira.io`) with some content.
- Understanding of affiliate marketing basics.

## Step-by-Step Instructions

### Step 1: Visit the Awin Signup Page
- Open your browser and navigate to the Awin affiliate signup page: [https://www.awin.com/gb/affiliates](https://www.awin.com/gb/affiliates).
- Click "Sign Up" or "Join as an Affiliate".

### Step 2: Register an Account
- **Account Creation**:
  - Enter your email address and create a password.
  - Click "Continue" or "Sign Up".
  - Verify your email by clicking the link sent to your inbox.

### Step 3: Complete the Application Form
- **Personal Details**:
  - Provide your full name, address, and phone number.
- **Website Information**:
  - Enter your website URL (e.g., `https://clubmadeira.io`).
  - Describe your site (e.g., "A platform for car parts and accessories").
  - Select your promotional methods (e.g., content, social media).
- **Preferences**:
  - Choose your preferred currency (e.g., GBP for UK).

### Step 4: Submit Application
- Review your details.
- Agree to Awin’s terms and conditions.
- Click "Submit" or "Join Now".

### Step 5: Wait for Approval
- Awin reviews applications within 1-7 business days.
- Monitor your email for approval or additional information requests.
- If denied, enhance your site (e.g., add more content) and reapply.

### Step 6: Access Your Awin Dashboard
- Once approved, log in to [https://ui.awin.com/](https://ui.awin.com/) with your credentials.

### Step 7: Obtain Your API_TOKEN
- **API Access**:
  - Go to "Account" > "API Credentials" or "Developer Settings".
  - If not visible, contact Awin support to request API access (mention your affiliate status).
  - Generate an `API_TOKEN` (a long alphanumeric string).
- Copy the `API_TOKEN`.

### Step 8: Update Config
- Open your `clubmadeira.io` configuration file (`config.json`).
- Locate the `"awin"` section.
- Enter your `API_TOKEN`:
  - `"API_TOKEN": "<your_api_token>"`
- Save and redeploy the configuration.

## Troubleshooting
- **Delayed Approval**: Ensure your site has unique content; contact support if delayed.
- **No API Option**: Confirm your account is fully approved; request API access via support.
- **Lost Token**: Regenerate it in the Awin dashboard.

## Next Steps
- Use the Awin API to integrate affiliate links into `clubmadeira.io`.
- Refer to [https://ui.awin.com/developer](https://ui.awin.com/developer) for API documentation.
md/bigcommerce.md
# BigCommerce API Settings for Categories and Products

This document details how to obtain the `API_TOKEN`, `CLIENT_ID`, `STORE_HASH`, and `STORE_URL` required for the BigCommerce API, as per the [BigCommerce API Reference](https://developer.bigcommerce.com/api-reference).

## Prerequisites
- A BigCommerce store account.
- Admin access to the store’s control panel.

## Obtaining the API_TOKEN
The `API_TOKEN` is a legacy API token for authenticating requests.

1. **Log into BigCommerce**:
   - Access your store’s control panel at `https://{your-store}.mybigcommerce.com/manage`.

2. **Navigate to API Settings**:
   - Go to "Settings" > "API" > "Store-level API accounts".

3. **Create an API Account**:
   - Click "Create API Account".
   - Name it (e.g., "ClubMadeira Integration").
   - Select scopes (e.g., "Products" and "Categories" set to "Modify").

4. **Generate and Save Credentials**:
   - Click "Save" to generate:
     - `API Token`: Your `API_TOKEN`.
     - `Client ID` and `Client Secret` (save these too; `Client ID` is needed later).
   - Download the credentials file or copy the `API Token`.

5. **Store the API_TOKEN**:
   - Example: `a1b2c3d4e5f6g7h8i9j0`.
   - Keep it secure.

## Obtaining the CLIENT_ID
- **Source**: Generated with the `API_TOKEN` in the API account creation step above.
- **Value**: A string like `a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6`.
- **Action**: Copy from the API account credentials.

## Obtaining the STORE_HASH
The `STORE_HASH` is a unique identifier for your store in BigCommerce’s API.

1. **Find Your Store Hash**:
   - In the API credentials file or control panel, it’s the part of the API path after `/stores/`.
   - Example API path: `https://api.bigcommerce.com/stores/{STORE_HASH}/v3/`.
   - Or, make a test API call (e.g., `GET /stores/{guess}/v3/catalog/products`) and adjust until it works.

2. **Record the STORE_HASH**:
   - Example: `abc123`.
   - Save this value.

## Obtaining the STORE_URL
The `STORE_URL` is your store’s domain.

1. **Get Your Store Domain**:
   - In the control panel, go to "Settings" > "Store Details".
   - Note the "Store URL" (e.g., `https://{your-store}.mybigcommerce.com`).

2. **Alternative Method**:
   - Use the storefront URL you access (e.g., `https://example-store.mybigcommerce.com`).

3. **Store the STORE_URL**:
   - Example: `https://example-store.mybigcommerce.com`.

## Usage
With these credentials, authenticate API requests:
```
GET https://api.bigcommerce.com/stores/{STORE_HASH}/v3/catalog/products
X-Auth-Token: {API_TOKEN}
X-Auth-Client: {CLIENT_ID}
Accept: application/json
```

See the [BigCommerce API Reference](https://developer.bigcommerce.com/api-reference) for more.


md/bigcommerce_readme.md
# BigCommerce API Usage for Club Madeira

This document provides a detailed guide on using the BigCommerce API to retrieve part category and part data for clubmadeira.io. This will later be replaced with instructions on how to obtain the API key details from BigCommerce to use in the config.

## Prerequisites
- A BigCommerce account (sign up at [https://www.bigcommerce.com/signup](https://www.bigcommerce.com/signup)).
- API credentials (API_TOKEN, CLIENT_ID, STORE_HASH) from BigCommerce.
- Basic API knowledge.

## Step-by-Step Instructions

### Step 1: Verify API Credentials
Ensure you have your API_TOKEN, CLIENT_ID, and STORE_HASH from your BigCommerce account (in config.json).

### Step 2: Access BigCommerce API
Refer to the BigCommerce API documentation: [https://developer.bigcommerce.com/api-docs](https://developer.bigcommerce.com/api-docs). Base URL: https://api.bigcommerce.com/stores/<STORE_HASH>/v3.

### Step 3: Retrieve Part Categories
API Endpoint: GET /catalog/categories. Request: Headers: X-Auth-Token: <API_TOKEN>. URL: https://api.bigcommerce.com/stores/<STORE_HASH>/v3/catalog/categories. Example with cURL: ``` curl -X GET "https://api.bigcommerce.com/stores/<STORE_HASH>/v3/catalog/categories" -H "X-Auth-Token: <API_TOKEN>" ``` Response: JSON with category data (e.g., {"data": [{"id": 1, "name": "Brakes"}]}). Steps: 1. Replace <API_TOKEN> and <STORE_HASH> with your config values. 2. Send the request. 3. Parse the response to list categories.

### Step 4: Retrieve Part Data
API Endpoint: GET /catalog/products. Request: Headers: X-Auth-Token: <API_TOKEN>. URL: https://api.bigcommerce.com/stores/<STORE_HASH>/v3/catalog/products?categories:in=<category_id>. Example with cURL: ``` curl -X GET "https://api.bigcommerce.com/stores/<STORE_HASH>/v3/catalog/products?categories:in=<category_id>" -H "X-Auth-Token: <API_TOKEN>" ``` Response: JSON with product data (e.g., {"data": [{"id": 101, "name": "Brake Pad", "price": "29.99"}]}). Steps: 1. Use a category_id from Step 3 (e.g., 1). 2. Send the request. 3. Parse the response to display parts.

### Step 5: Integrate with Club Madeira
Use the fetched data in clubmadeira.io (e.g., populate a parts catalog). Update your application to use these API calls with user-provided credentials.

## Troubleshooting
- **403 Forbidden**: Check API_TOKEN and STORE_HASH accuracy.
- **Empty Response**: Add categories and products in your BigCommerce store.

## Next Steps
Test with your BigCommerce store data. **Note**: This guide will be replaced with instructions on how to obtain API_TOKEN, CLIENT_ID, and STORE_HASH from BigCommerce for the config.
md/cj_readme.md
# CJ Affiliate Signup Process

This document provides a detailed, step-by-step guide to signing up for the CJ Affiliate Program to obtain the `API_KEY` and `WEBSITE_ID` credentials for use in the `clubmadeira.io` configuration.

## Prerequisites
- A valid email address.
- A website (e.g., `clubmadeira.io`) with content for promotion.
- Basic affiliate marketing knowledge.

## Step-by-Step Instructions

### Step 1: Visit the CJ Signup Page
- Open your browser and go to the CJ Affiliate publisher signup page: [https://signup.cj.com/member/signup/publisher/](https://signup.cj.com/member/signup/publisher/).
- Click "Sign Up" or "Join Now".

### Step 2: Create an Account
- **Account Details**:
  - Enter your email address and create a password.
  - Provide your full name and company name (if applicable, use `Club Madeira` or your personal name).
  - Select your country (e.g., UK).

### Step 3: Fill Out the Application
- **Website Information**:
  - Enter your website URL (e.g., `https://clubmadeira.io`).
  - Describe your site (e.g., "Car parts and accessories platform").
  - Specify promotional methods (e.g., content marketing, social media).
- **Business Details**:
  - Provide your address and phone number.
  - Select your primary audience (e.g., UK).

### Step 4: Submit Application
- Agree to CJ’s terms and conditions.
- Click "Submit" or "Join CJ".

### Step 5: Wait for Approval
- CJ reviews applications within 1-5 business days.
- Check your email for approval or requests for more information.
- If rejected, improve your site (e.g., add content) and reapply.

### Step 6: Access Your CJ Account
- Once approved, log in to [https://members.cj.com/](https://members.cj.com/).

### Step 7: Get Your WEBSITE_ID
- **Website ID**:
  - Go to "Account" > "Websites".
  - Your `WEBSITE_ID` is listed next to your approved site (e.g., a numeric ID like `1234567`).
  - Copy this ID.

### Step 8: Obtain Your API_KEY
- **API Access**:
  - Navigate to "Account" > "API Keys" or "Developer Portal" (may require contacting support).
  - Request API access if not available (mention your publisher status).
  - Generate an `API_KEY` (e.g., a long string like `abcdef123456`).
  - Copy the `API_KEY`.

### Step 9: Update Config
- Open your `clubmadeira.io` configuration file (`config.json`).
- Locate the `"cj"` section.
- Enter your credentials:
  - `"API_KEY": "<your_api_key>"`
  - `"WEBSITE_ID": "<your_website_id>"`
- Save and redeploy the configuration.

## Troubleshooting
- **Application Denied**: Ensure your site meets CJ’s content standards; reapply.
- **API Access Missing**: Contact CJ support to enable API for your account.
- **Lost Credentials**: Retrieve or regenerate in the CJ dashboard.

## Next Steps
- Use the CJ API to integrate affiliate links into `clubmadeira.io`.
- See [https://developers.cj.com/](https://developers.cj.com/) for API details.
md/ebay_uk_readme.md
# eBay UK Affiliate Signup Process

This document provides a detailed, step-by-step guide to signing up for the eBay UK Partner Network to obtain the `APP_ID` credential for use in the `clubmadeira.io` configuration.

## Prerequisites
- A valid email address.
- A website or platform (e.g., `clubmadeira.io`) to promote eBay products.
- Basic knowledge of affiliate marketing.

## Step-by-Step Instructions

### Step 1: Visit the eBay Partner Network Signup Page
- Open your browser and go to the eBay Partner Network signup page: [https://partnernetwork.ebay.com/](https://partnernetwork.ebay.com/).
- Click "Join Now" or "Sign Up".

### Step 2: Sign In or Register
- If you have an eBay account:
  - Enter your eBay username or email and password.
  - Click "Sign In".
- If you don’t have an account:
  - Click "Register".
  - Provide your email, create a password, and fill in personal details.
  - Verify your email address via the link sent to your inbox.

### Step 3: Start the Application
- After signing in, you’ll be directed to the eBay Partner Network application form.
- **Personal/Business Information**:
  - Enter your full name or business name.
  - Provide your address and contact details.

### Step 4: Add Your Website
- **Website Information**:
  - Enter your primary website URL (e.g., `https://clubmadeira.io`).
  - Describe your site (e.g., "A car parts and accessories platform").
  - List traffic sources (e.g., SEO, social media).
  - Ensure your site has some content (e.g., product listings or articles).

### Step 5: Agree to Terms
- Review the eBay Partner Network Agreement.
- Check the box to accept the terms.
- Click "Submit Application".

### Step 6: Wait for Approval
- eBay reviews applications within 1-5 business days.
- Check your email for approval notification.
- If denied, improve your site based on feedback (e.g., add content) and reapply.

### Step 7: Access Your Dashboard
- Once approved, log in to [https://partnernetwork.ebay.com/](https://partnernetwork.ebay.com/).
- Navigate to the dashboard.

### Step 8: Obtain Your APP_ID
- **Developer Account**:
  - Go to "Developer Program" via [https://developer.ebay.com/](https://developer.ebay.com/).
  - Sign in with your eBay credentials.
  - Click "Join" if not already enrolled in the eBay Developers Program.
- **Create an Application**:
  - Go to "My Apps" or "Application Keys".
  - Click "Create a Keyset" or "Generate Keys".
  - Name your app (e.g., `ClubMadeira_eBay`).
  - Select "Production" environment.
  - Generate keys; you’ll receive an `App ID` (Production Keyset).
- Copy the `App ID` (e.g., `ClubMade-1234-5678-9012`).

### Step 9: Update Config
- Open your `clubmadeira.io` configuration file (`config.json`).
- Locate the `"ebay_uk"` section.
- Enter your `APP_ID`:
  - `"APP_ID": "<your_app_id>"`
- Save and redeploy the configuration.

## Troubleshooting
- **Application Denied**: Ensure your site has content and complies with eBay policies; reapply.
- **No API Access**: Verify your Partner Network approval, then join the Developers Program.
- **Lost APP_ID**: Log into [https://developer.ebay.com/](https://developer.ebay.com/) to retrieve or regenerate keys.

## Next Steps
- Use the eBay Affiliate API to integrate eBay UK products into `clubmadeira.io`.
- See [https://developer.ebay.com/api-docs/static/ebay-affiliate-api.html](https://developer.ebay.com/api-docs/static/ebay-affiliate-api.html) for API details.
md/joomla_readme.md
# Joomla Module Creation for Club Madeira

This document explains how Joomla uses modules and provides a step-by-step guide to creating a module for clubmadeira.io. This will later be replaced with instructions on how to add the created module to a user’s Joomla site.

## How Joomla Uses Modules
Joomla uses "modules" as extensions to display content or functionality (e.g., car part search). Modules are PHP-based and can integrate with Joomla’s API.

## Prerequisites
- A Joomla site (download from [https://www.joomla.org/download.html](https://www.joomla.org/download.html)).
- Basic PHP knowledge.
- Local server (e.g., XAMPP) or hosting with Joomla installed.

## Step-by-Step Instructions

### Step 1: Set Up Joomla
Download Joomla from [https://www.joomla.org/download.html](https://www.joomla.org/download.html). Install locally or on a server (follow Joomla’s installation guide).

### Step 2: Create a Module Folder
Navigate to modules/ in your Joomla installation. Create a folder named mod_clubmadeira_parts.

### Step 3: Create Module Files
Create mod_clubmadeira_parts.php with: ``` <?php defined('_JEXEC') or die; $search = JFactory::getApplication()->input->get('part_search', '', 'string'); ?> <form method="post"> <input type="text" name="part_search" placeholder="Search Parts"> <button type="submit">Search</button> </form> <?php if ($search): ?> <p>Results for: <?php echo htmlspecialchars($search); ?></p> <?php $db = JFactory::getDbo(); $query = $db->getQuery(true) ->select('*') ->from('#__clubmadeira_parts') ->where('name LIKE ' . $db->quote('%' . $search . '%')); $db->setQuery($query); $results = $db->loadObjectList(); foreach ($results as $result) { echo '<div>' . $result->name . ' - $' . $result->price . '</div>'; } ?> <?php endif; ?> ``` Create mod_clubmadeira_parts.xml with: ``` <?xml version="1.0" encoding="utf-8"?> <extension type="module" version="3.9" client="site" method="upgrade"> <name>Club Madeira Parts</name> <author>Club Madeira Team</author> <version>1.0</version> <description>Car parts search module</description> <files> <filename module="mod_clubmadeira_parts">mod_clubmadeira_parts.php</filename> <filename>mod_clubmadeira_parts.xml</filename> </files> </extension> ```

### Step 4: Create a Database Table
Access your Joomla database (e.g., via phpMyAdmin). Run: ``` CREATE TABLE #__clubmadeira_parts ( id INT AUTO_INCREMENT PRIMARY KEY, name VARCHAR(255), price DECIMAL(10,2) ); INSERT INTO #__clubmadeira_parts (name, price) VALUES ('Brake Pad', 29.99); ```

### Step 5: Install the Module
Zip the mod_clubmadeira_parts folder. In Joomla admin (e.g., http://localhost/administrator), go to "Extensions" > "Manage" > "Install". Upload the zip file.

### Step 6: Activate and Test
Go to "Extensions" > "Modules". Find "Club Madeira Parts", set position (e.g., position-7), and enable it. Visit your site and test the search.

## Troubleshooting
- **Module Not Showing**: Check position and status in Module Manager.
- **DB Errors**: Verify table creation and permissions.

## Next Steps
Enhance with Joomla API integration. See [https://docs.joomla.org/Joomla_API](https://docs.joomla.org/Joomla_API) for details. **Note**: This guide will be replaced with instructions on adding this module to a user’s Joomla site.
md/magento.md
# Magento API Settings for Categories and Products

This guide explains how to obtain the `ACCESS_TOKEN` and `STORE_URL` for the Magento REST API, detailed in the [Magento REST API documentation](https://devdocs.magento.com/guides/v2.4/rest/bk-rest.html).

## Prerequisites
- A Magento 2 store (self-hosted or cloud).
- Admin access to the Magento Admin Panel.

## Obtaining the ACCESS_TOKEN
The `ACCESS_TOKEN` is an OAuth or integration token for API access.

1. **Log into Magento Admin**:
   - Access `https://{your-store}/admin`.

2. **Create an Integration**:
   - Go to "System" > "Integrations".
   - Click "Add New Integration".
   - Name it (e.g., "ClubMadeira Integration").
   - Set permissions (e.g., "Catalog" > "Categories" and "Products").

3. **Activate the Integration**:
   - Save and activate the integration.
   - Approve the permissions prompt.

4. **Copy the ACCESS_TOKEN**:
   - After activation, Magento provides:
     - `Consumer Key`
     - `Consumer Secret`
     - `Access Token` (this is your `ACCESS_TOKEN`)
     - `Access Token Secret`
   - Example: `abcdefghijklmnopqrstuvwxyz123456`.
   - Save the `ACCESS_TOKEN` securely.

## Obtaining the STORE_URL
The `STORE_URL` is your Magento store’s base URL.

1. **Find Your Store URL**:
   - In the Admin Panel, go to "Stores" > "Configuration" > "General" > "Web".
   - Under "Base URLs", note the "Base URL" (e.g., `https://example.com`).

2. **Verify API Endpoint**:
   - The REST API base URL is typically `{STORE_URL}/rest` (e.g., `https://example.com/rest`).

3. **Store the STORE_URL**:
   - Example: `https://example.com`.

## Usage
Authenticate API requests with the token:
```
GET {STORE_URL}/rest/V1/products
Authorization: Bearer {ACCESS_TOKEN}
```

Refer to the [Magento REST API docs](https://devdocs.magento.com/guides/v2.4/rest/bk-rest.html) for endpoints.


md/magento_readme.md
# Magento API Usage for Club Madeira

This document provides a detailed guide on using the Magento API to retrieve part category and part data for clubmadeira.io. This will later be replaced with instructions on how to obtain the API key details from Magento to use in the config.

## Prerequisites
- A Magento account (sign up at [https://magento.com/magento-commerce](https://magento.com/magento-commerce)).
- API credential (ACCESS_TOKEN) from Magento.
- Basic API knowledge.

## Step-by-Step Instructions

### Step 1: Verify API Credentials
Ensure you have your ACCESS_TOKEN from your Magento account (in config.json).

### Step 2: Access Magento API
Refer to the Magento REST API documentation: [https://devdocs.magento.com/guides/v2.4/rest/bk-rest.html](https://devdocs.magento.com/guides/v2.4/rest/bk-rest.html). Base URL: <STORE_URL>/rest/V1 (e.g., https://yourstore.com/rest/V1).

### Step 3: Retrieve Part Categories
API Endpoint: GET /categories. Request: Headers: Authorization: Bearer <ACCESS_TOKEN>. URL: <STORE_URL>/rest/V1/categories. Example with cURL: ``` curl -X GET "<STORE_URL>/rest/V1/categories" -H "Authorization: Bearer <ACCESS_TOKEN>" ``` Response: JSON with category data (e.g., {"id": 2, "name": "Brakes", "children_data": []}). Steps: 1. Replace <STORE_URL> and <ACCESS_TOKEN> with your config values. 2. Send the request. 3. Parse the response to list categories.

### Step 4: Retrieve Part Data
API Endpoint: GET /products. Request: Headers: Authorization: Bearer <ACCESS_TOKEN>. URL: <STORE_URL>/rest/V1/products?searchCriteria[filter_groups][0][filters][0][field]=category_id&searchCriteria[filter_groups][0][filters][0][value]=<category_id>. Example with cURL: ``` curl -X GET "<STORE_URL>/rest/V1/products?searchCriteria[filter_groups][0][filters][0][field]=category_id&searchCriteria[filter_groups][0][filters][0][value]=<category_id>" -H "Authorization: Bearer <ACCESS_TOKEN>" ``` Response: JSON with product data (e.g., {"items": [{"sku": "brakepad", "name": "Brake Pad", "price": "29.99"}]}). Steps: 1. Use a category_id from Step 3 (e.g., 2). 2. Send the request. 3. Parse the response to display parts.

### Step 5: Integrate with Club Madeira
Use the fetched data in clubmadeira.io (e.g., display parts in a catalog). Update your application to use these API calls with user-provided ACCESS_TOKEN and STORE_URL.

## Troubleshooting
- **401 Unauthorized**: Verify ACCESS_TOKEN is valid.
- **No Data**: Add categories and products in your Magento admin.

## Next Steps
Test with your Magento store data. **Note**: This guide will be replaced with instructions on how to obtain ACCESS_TOKEN from Magento for the config.
md/md_contents_text.txt
+ [md]


md/shopify.md
# Shopify API Settings for Categories and Products

This guide details how to obtain the `ACCESS_TOKEN`, `API_KEY`, `API_SECRET_KEY`, and `STORE_URL` for the Shopify Admin REST API, per the [Shopify API Docs](https://shopify.dev/api/admin-rest).

## Prerequisites
- A Shopify store.
- Admin access to the Shopify admin panel.

## Obtaining the API_KEY and API_SECRET_KEY
These are credentials for a custom app.

1. **Log into Shopify Admin**:
   - Access `https://{your-store}.myshopify.com/admin`.

2. **Create a Custom App**:
   - Go to "Apps" > "App and sales channel settings" > "Develop apps".
   - Click "Create an app".
   - Name it (e.g., "ClubMadeira Integration").

3. **Configure Admin API Scopes**:
   - In the app settings, go to "Configuration" > "Admin API integration".
   - Enable scopes (e.g., `read_products`, `write_products`, `read_product_listings`).

4. **Get API Credentials**:
   - Go to "API credentials".
   - Copy:
     - `API Key` (e.g., `1234567890abcdef1234567890abcdef`)
     - `API Secret Key` (e.g., `abcdef1234567890abcdef1234567890`)
   - Save these securely.

## Obtaining the ACCESS_TOKEN
The `ACCESS_TOKEN` is an admin API token.

1. **Generate an Admin API Token**:
   - In the same "API credentials" section, under "Admin API access token", click "Generate API token".
   - Select the same scopes as above.
   - Copy the token (e.g., `shpat_1234567890abcdef1234567890abcdef`).

2. **Store the ACCESS_TOKEN**:
   - Save it securely.

## Obtaining the STORE_URL
The `STORE_URL` is your Shopify store’s domain.

1. **Find Your Store URL**:
   - In the admin panel, it’s the URL you log into (e.g., `https://{your-store}.myshopify.com`).

2. **Store the STORE_URL**:
   - Example: `https://example-store.myshopify.com`.

## Usage
Authenticate API requests with the token:
```
GET {STORE_URL}/admin/api/2023-10/products.json
X-Shopify-Access-Token: {ACCESS_TOKEN}
```


md/shopify_readme.md
# Shopify API Usage for Club Madeira

This document provides a detailed guide on using the Shopify API to retrieve part category and part data for clubmadeira.io. This will later be replaced with instructions on how to obtain the API key details from Shopify to use in the config.

## Prerequisites
- A Shopify account (sign up at [https://www.shopify.com/signup](https://www.shopify.com/signup)).
- API credentials (API_KEY, API_SECRET_KEY, ACCESS_TOKEN) from Shopify.
- Basic API knowledge.

## Step-by-Step Instructions

### Step 1: Verify API Credentials
Ensure you have your API_KEY, API_SECRET_KEY, and ACCESS_TOKEN from your Shopify account (in config.json).

### Step 2: Access Shopify API
Refer to the Shopify API documentation: [https://shopify.dev/api](https://shopify.dev/api). Base URL: <STORE_URL>/admin/api/2023-10 (e.g., https://yourstore.myshopify.com/admin/api/2023-10).

### Step 3: Retrieve Part Categories
API Endpoint: GET /collections. Request: Headers: X-Shopify-Access-Token: <ACCESS_TOKEN>. URL: <STORE_URL>/admin/api/2023-10/collections.json. Example with cURL: ``` curl -X GET "<STORE_URL>/admin/api/2023-10/collections.json" -H "X-Shopify-Access-Token: <ACCESS_TOKEN>" ``` Response: JSON with collection data (e.g., {"collections": [{"id": 123456, "title": "Brakes"}]}). Steps: 1. Replace <STORE_URL> and <ACCESS_TOKEN> with your config values. 2. Send the request. 3. Parse the response to list categories (collections).

### Step 4: Retrieve Part Data
API Endpoint: GET /products. Request: Headers: X-Shopify-Access-Token: <ACCESS_TOKEN>. URL: <STORE_URL>/admin/api/2023-10/products.json?collection_id=<collection_id>. Example with cURL: ``` curl -X GET "<STORE_URL>/admin/api/2023-10/products.json?collection_id=<collection_id>" -H "X-Shopify-Access-Token: <ACCESS_TOKEN>" ``` Response: JSON with product data (e.g., {"products": [{"id": 789012, "title": "Brake Pad", "variants": [{"price": "29.99"}]}]}). Steps: 1. Use a collection_id from Step 3 (e.g., 123456). 2. Send the request. 3. Parse the response to display parts.

### Step 5: Integrate with Club Madeira
Use the fetched data in clubmadeira.io (e.g., display parts in a search UI). Update your application to use these API calls with user-provided credentials.

## Troubleshooting
- **401 Unauthorized**: Verify ACCESS_TOKEN is correct.
- **No Data**: Add collections and products in your Shopify admin.

## Next Steps
Test with your Shopify store data. **Note**: This guide will be replaced with instructions on how to obtain API_KEY, API_SECRET_KEY, and ACCESS_TOKEN from Shopify for the config.
md/squarespace_readme.md
# Squarespace Module Creation for Club Madeira

This document explains how Squarespace uses modules (via Developer Mode) and provides a step-by-step guide to creating a module for clubmadeira.io. This will later be replaced with instructions on how to add the created module to a user’s Squarespace site.

## How Squarespace Uses Modules
Squarespace supports "modules" through Developer Mode, allowing custom code (HTML, CSS, JavaScript) and API integrations. Modules can add features like car part search for clubmadeira.io.

## Prerequisites
- A Squarespace account (sign up at [https://www.squarespace.com/signup](https://www.squarespace.com/signup)).
- Basic HTML, CSS, and JavaScript knowledge.
- Git and SFTP access (for Developer Mode).

## Step-by-Step Instructions

### Step 1: Sign Up for Squarespace
Go to [https://www.squarespace.com/signup](https://www.squarespace.com/signup) and create an account. Choose a plan (Business or higher for Developer Mode).

### Step 2: Create a Site
Start a new site with a template (e.g., "Commerce"). Name it (e.g., ClubMadeiraTest).

### Step 3: Enable Developer Mode
From the site dashboard, go to "Settings" > "Developer Mode". Toggle Developer Mode ON. Follow prompts to set up Git or SFTP access (SFTP recommended for simplicity).

### Step 4: Access Site Files
Use an SFTP client (e.g., FileZilla). Connect using credentials from Squarespace (e.g., host: sftp.squarespace.com, username/password provided). Download the site template files locally.

### Step 5: Create a Custom Module
Add a page: Locally, open pages/ and create clubmadeira-parts.page with this content: ``` --- layout: default --- <div id="parts-search"> <input type="text" id="searchInput" placeholder="Search Parts"> <button id="searchButton">Search</button> <div id="partsResults"></div> </div> ``` Add JavaScript: Open scripts/site.js and append: ``` document.addEventListener("DOMContentLoaded", function() { document.getElementById("searchButton").addEventListener("click", function() { var query = document.getElementById("searchInput").value; var results = "<p>Results for: " + query + "</p>"; document.getElementById("partsResults").innerHTML = results; }); }); ``` Style with CSS: Open styles/site.css and add: ``` #parts-search { margin: 20px; } #searchInput { padding: 5px; } #partsResults { margin-top: 10px; } ```

### Step 6: Upload and Test
Upload modified files via SFTP. In the Squarespace Editor, add the "Club Madeira Parts" page to the navigation. Preview and test the search functionality.

## Troubleshooting
- **SFTP Issues**: Verify credentials and connection.
- **Code Not Loading**: Clear Squarespace cache or check file paths.

## Next Steps
Integrate with Squarespace API for dynamic data. See [https://developers.squarespace.com/](https://developers.squarespace.com/) for API details. **Note**: This guide will be replaced with instructions on adding this module to a user’s Squarespace site.
md/weebly_readme.md
# Weebly Module Creation for Club Madeira

This document explains how Weebly uses modules (via apps or custom code) and provides a step-by-step guide to creating a module for clubmadeira.io. This will later be replaced with instructions on how to add the created module to a user’s Weebly site.

## How Weebly Uses Modules
Weebly supports "modules" through its App Center or custom HTML/CSS/JavaScript embeds. Custom code can create features like car part search for clubmadeira.io.

## Prerequisites
- A Weebly account (sign up at [https://www.weebly.com/signup](https://www.weebly.com/signup)).
- Basic HTML and JavaScript knowledge.

## Step-by-Step Instructions

### Step 1: Sign Up for Weebly
Go to [https://www.weebly.com/signup](https://www.weebly.com/signup) and create an account. Choose a plan (Pro or higher for custom code).

### Step 2: Create a Site
Start a new site with a template (e.g., "Online Store"). Name it (e.g., ClubMadeiraTest).

### Step 3: Open the Editor
From the Weebly dashboard, click "Edit Site" for your new site.

### Step 4: Add a Custom Module
Add a page: Click "Pages" > "Add Page". Name it "Club Madeira Parts". Embed code: Drag an "Embed Code" element onto the page from the left sidebar. Click the element and select "Edit Custom HTML". Add: ``` <div id="parts-search"> <input type="text" id="searchInput" placeholder="Search Parts"> <button id="searchButton">Search</button> <div id="partsResults"></div> </div> <script> document.getElementById("searchButton").addEventListener("click", function() { var query = document.getElementById("searchInput").value; document.getElementById("partsResults").innerHTML = "<p>Results for: " + query + "</p>"; }); </script> <style> #parts-search { margin: 20px; } #searchInput { padding: 5px; } #partsResults { margin-top: 10px; } </style> ```

### Step 5: Test the Module
Click "Preview" to test the search functionality. Enter a part name and click "Search" to see results.

### Step 6: Publish
Click "Publish" to make the site live (optional for development).

## Troubleshooting
- **Code Not Working**: Ensure JavaScript is enabled; check for syntax errors.
- **Limited Features**: Upgrade plan for more customization options.

## Next Steps
Integrate with Weebly API for dynamic data. See [https://www.weebly.com/developer](https://www.weebly.com/developer) for API details. **Note**: This guide will be replaced with instructions on adding this module to a user’s Weebly site.
md/wix.md
# Wix API Integration for Categories and Products

This guide covers programmatic access to category and product information from Wix Stores using the Wix eCommerce API.

## Prerequisites
- A Wix account with a store enabled (Wix Stores app added).
- Admin access to generate API credentials.

## Required Credentials
- **API Token**: A single token for authentication, generated in the Wix dashboard.
- **Site ID**: Unique identifier for your Wix site (found in API calls or dashboard).

To get credentials:
1. Log in to your Wix account.
2. Go to **Settings > Advanced Settings > API Tokens**.
3. Generate a new token with scopes `STORE_READ_PRODUCTS` and `STORE_READ_CATEGORIES`.
4. Copy the API Token. The Site ID is available in the dashboard or via API calls.

## Authentication
Use the API Token in the request header:

Authorization: Bearer {api_token}

## Retrieving Categories
Wix calls categories "Collections." To list all collections:

@bash
curl -X GET "https://www.wixapis.com/stores/v1/collections" \
-H "Authorization: Bearer {api_token}"
@

- Endpoint: `GET https://www.wixapis.com/stores/v1/collections`
- Response includes collection IDs, names, and slugs.

## Retrieving Products
To fetch all products:

@bash
curl -X GET "https://www.wixapis.com/stores/v1/products" \
-H "Authorization: Bearer {api_token}"
@

- Endpoint: `GET https://www.wixapis.com/stores/v1/products`
- Returns product IDs, names, prices, and more.
- Filter by collection: Add `?collectionId={collection_id}` to the query.

## Notes
- Wix APIs require HTTPS.
- Rate limits are not publicly detailed but monitored per app.
- Use pagination (`?paging.limit=100`) for large datasets.

See [Wix eCommerce API Docs](https://dev.wix.com/api/rest/wix-stores) for more details.
md/wixStore.md
# Wix Store API Settings

This document explains how to obtain the `API_TOKEN` and `SITE_ID` required to integrate with the Wix Stores API, as outlined in the [Wix Stores API documentation](https://dev.wix.com/api/rest/wix-stores).

## Prerequisites
- A Wix account with a store (e.g., a Wix site with the Stores app installed).
- Administrative access to your Wix site.
- A registered Wix app in the Wix Developers Center.

## Obtaining the API_TOKEN
The `API_TOKEN` is an OAuth access token used to authenticate API requests. Follow these steps:

1. **Log into Wix Developers Center**:
   - Go to [dev.wix.com](https://dev.wix.com/).
   - Sign in with your Wix account credentials.

2. **Create an App**:
   - Navigate to "My Apps" in the Developers Center.
   - Click "Create New App" and provide a name (e.g., "ClubMadeira Integration").
   - Save the app to generate its credentials.

3. **Get Client ID and Client Secret**:
   - In your app’s dashboard, go to the "OAuth" tab.
   - Note the `Client ID` and `Client Secret` (you’ll need these temporarily for OAuth).

4. **Set Up OAuth Flow**:
   - Use an OAuth 2.0 client or script to request an access token.
   - Redirect users to the authorization URL:
     ```
     https://www.wix.com/installer/install?appId={CLIENT_ID}&redirectUrl={YOUR_REDIRECT_URL}
     ```
   - After user approval, Wix redirects to your `redirectUrl` with a `code` parameter.

5. **Exchange Code for API_TOKEN**:
   - Make a POST request to:
     ```
     https://www.wix.com/oauth/access
     ```
     With the body:
     @@@json
     {
         "grant_type": "authorization_code",
         "client_id": "{CLIENT_ID}",
         "client_secret": "{CLIENT_SECRET}",
         "code": "{CODE_FROM_REDIRECT}"
     }
     @@@
   - Response includes the `access_token`, which is your `API_TOKEN`. Example:
     @@@json
     {
         "access_token": "your-api-token-here",
         "refresh_token": "your-refresh-token",
         "expires_in": 3600
     }
     @@@

6. **Store the API_TOKEN**:
   - Save this token securely for use in API requests.

## Obtaining the SITE_ID
The `SITE_ID` is the unique identifier for your Wix site.

1. **Access Your Site Dashboard**:
   - Log into your Wix account and open the site with the store.

2. **Find the Site ID**:
   - In the Wix Dashboard, go to "Settings" > "Developer Tools" (or use the Developers Center).
   - Alternatively, make an API call with your `API_TOKEN` to list sites:
     ```
     GET https://www.wixapis.com/site/v1/sites
     Authorization: Bearer {API_TOKEN}
     ```
   - Response includes site details:
     @@@json
     {
         "sites": [
             {
                 "id": "your-site-id-here",
                 "name": "Your Site Name",
                 ...
             }
         ]
     }
     @@@
   - The `id` field is your `SITE_ID`.

3. **Record the SITE_ID**:
   - Copy this value (e.g., a UUID like `9fa0f271-1600-4282-9fae-d841be6aaff6`) for integration.

## Usage
With `API_TOKEN` and `SITE_ID`, you can make authenticated requests to the Wix Stores API, such as retrieving products:
```
GET https://www.wixapis.com/stores/v1/products
Authorization: Bearer {API_TOKEN}
X-Wix-Site-Id: {SITE_ID}

```
Refer to the [Wix Stores API docs](https://dev.wix.com/api/rest/wix-stores) for full details.




md/wixStore_readme.md
# Wix Store API Usage for Club Madeira

This document provides a detailed guide on using the Wix Stores API to retrieve part category and part data for clubmadeira.io. This will later be replaced with instructions on how to obtain the API key details from Wix to use in the config.

## Prerequisites
- A Wix account with a store (sign up at [https://www.wix.com/signup](https://www.wix.com/signup)).
- API credentials (API_TOKEN, SITE_ID) from Wix.
- Basic API knowledge (e.g., REST, JSON).

## Step-by-Step Instructions

### Step 1: Verify API Credentials
Ensure you have your API_TOKEN and SITE_ID from your Wix account (to be added to config.json).

### Step 2: Access Wix Stores API
Refer to the Wix Stores API documentation: [https://dev.wix.com/api/rest/wix-stores](https://dev.wix.com/api/rest/wix-stores). Base URL: https://www.wixapis.com/stores/v1.

### Step 3: Retrieve Part Categories
API Endpoint: GET /catalog/categories. Request: Headers: Authorization: Bearer <API_TOKEN>. URL: https://www.wixapis.com/stores/v1/catalog/categories?siteId=<SITE_ID>. Example with cURL: ``` curl -X GET "https://www.wixapis.com/stores/v1/catalog/categories?siteId=<SITE_ID>" -H "Authorization: Bearer <API_TOKEN>" ``` Response: JSON with category data (e.g., {"categories": [{"id": "cat1", "name": "Brakes"}]}). Steps: 1. Replace <API_TOKEN> and <SITE_ID> with your config values. 2. Send the request. 3. Parse the response to list categories (e.g., "Brakes", "Engines").

### Step 4: Retrieve Part Data
API Endpoint: GET /catalog/products. Request: Headers: Authorization: Bearer <API_TOKEN>. URL: https://www.wixapis.com/stores/v1/catalog/products?siteId=<SITE_ID>&categoryId=<category_id>. Example with cURL: ``` curl -X GET "https://www.wixapis.com/stores/v1/catalog/products?siteId=<SITE_ID>&categoryId=<category_id>" -H "Authorization: Bearer <API_TOKEN>" ``` Response: JSON with product data (e.g., {"products": [{"id": "prod1", "name": "Brake Pad", "price": "29.99"}]}). Steps: 1. Use a category_id from Step 3 (e.g., cat1). 2. Send the request. 3. Parse the response to display parts (e.g., "Brake Pad - $29.99").

### Step 5: Integrate with Club Madeira
Use the fetched data in clubmadeira.io (e.g., display categories and parts in a search interface). Update your application code to handle these API calls dynamically with user-provided API_TOKEN and SITE_ID.

## Troubleshooting
- **401 Unauthorized**: Verify API_TOKEN is correct and not expired.
- **No Data**: Ensure categories and products are added to your Wix Store.

## Next Steps
Test API calls with your Wix Store data. **Note**: This guide will be replaced with instructions on how to obtain API_TOKEN and SITE_ID from Wix for the config.
md/wix_readme.md
# Wix Module Creation for Club Madeira

This document explains how Wix uses modules and provides a step-by-step guide to creating a module for `clubmadeira.io` using Wix’s Velo platform. This will later be replaced with instructions on how to add the created module to a user’s Wix site.

## How Wix Uses Modules
- Wix uses "modules" via Velo, a full-stack development platform integrated into Wix.
- Velo allows you to add custom code (JavaScript, APIs) to Wix sites, creating dynamic features like car part search or listings for `clubmadeira.io`.
- Modules are reusable code blocks or integrations that enhance site functionality.

## Prerequisites
- A Wix account (sign up at [https://www.wix.com/signup](https://www.wix.com/signup)).
- Basic JavaScript knowledge.
- Access to the Wix Editor and Velo.

## Step-by-Step Instructions

### Step 1: Create or Log In to Your Wix Account
- Go to [https://www.wix.com/signup](https://www.wix.com/signup) and sign up, or log in at [https://www.wix.com/](https://www.wix.com/).
- Use your email and a secure password.

### Step 2: Set Up a Wix Site
- From the Wix dashboard, click "Create New Site".
- Choose a template (e.g., "Business" or "Online Store").
- Name your site (e.g., `ClubMadeiraTest`); this can be temporary for development.

### Step 3: Enable Velo
- Open the Wix Editor for your site.
- Click "Dev Mode" in the top bar and toggle "Enable Velo" to ON.
- This activates Velo’s coding features.

### Step 4: Create a Custom Module
- **Add a Page**:
  - In the Editor, click "Pages" > "Add Page".
  - Name it "Club Madeira Parts" (or similar).
- **Design the UI**:
  - Add elements like a search bar (Text Input), a button (Button), and a repeater (Repeater) for part listings.
  - Assign IDs: `searchInput`, `searchButton`, `partsRepeater`.
- **Add Backend Code**:
  - In the left panel, click "Code Files" > "+ New.js" under "Backend".
  - Name it `clubmadeira.jsw`.
  - Add a function to fetch data (example):
    ```
    import wixData from 'wix-data';

    export async function getClubMadeiraParts(query) {
        const results = await wixData.query("ClubMadeiraParts")
            .contains("name", query)
            .find();
        return results.items;
    }
    ```
- **Add Frontend Code**:
  - On the page, right-click `searchButton`, select "View Properties" > "OnClick" > "Add Code".
  - Write:
    ```
    import { getClubMadeiraParts } from 'backend/clubmadeira.jsw';

    $w.onReady(function () {
        $w("#searchButton").onClick(async () => {
            const query = $w("#searchInput").value;
            const parts = await getClubMadeiraParts(query);
            $w("#partsRepeater").data = parts;
            $w("#partsRepeater").forEachItem(($item, itemData) => {
                $item("#partName").text = itemData.name;
                $item("#partPrice").text = itemData.price;
            });
        });
    });
    ```
- **Create a Database**:
  - Go to "Databases" in the left panel > "+ Create Collection".
  - Name it `ClubMadeiraParts`.
  - Add fields: `name` (Text), `price` (Number).
  - Insert sample data (e.g., `{ "name": "Brake Pad", "price": "29.99" }`).

### Step 5: Test the Module
- Click "Preview" in the Editor.
- Enter a part name in the search bar and click the button.
- Verify the repeater displays matching parts.

### Step 6: Save and Publish
- Save your work in the Editor.
- Publish the site to test live (optional for development).

## Troubleshooting
- **Velo Not Enabled**: Ensure "Dev Mode" is ON.
- **Code Errors**: Check the console (F12) for syntax issues.
- **No Data**: Verify database permissions are set to "Site Content" readable.

## Next Steps
- This module can be integrated into `clubmadeira.io` via the Wix API.
- Refer to [https://dev.wix.com/api/rest/wix-stores](https://dev.wix.com/api/rest/wix-stores) for API details.
- **Note**: This guide will be replaced with instructions on adding this module to a user’s Wix site.
md/woocommerce.md
# WooCommerce API Settings for Categories and Products

This document outlines how to get the `CONSUMER_KEY`, `CONSUMER_SECRET`, and `STORE_URL` for the WooCommerce REST API, per the [WooCommerce REST API Docs](https://woocommerce.github.io/woocommerce-rest-api-docs/).

## Prerequisites
- A WordPress site with WooCommerce installed.
- Admin access to the WordPress dashboard.

## Obtaining the CONSUMER_KEY and CONSUMER_SECRET
These are API keys for authenticating requests.

1. **Log into WordPress Admin**:
   - Access `https://{your-store}/wp-admin`.

2. **Navigate to WooCommerce Settings**:
   - Go to "WooCommerce" > "Settings" > "Advanced" > "REST API".

3. **Add a Key**:
   - Click "Add Key".
   - Enter a description (e.g., "ClubMadeira Integration").
   - Select a user with admin rights.
   - Set permissions to "Read/Write".

4. **Generate and Save Keys**:
   - Click "Generate API Key".
   - Copy:
     - `Consumer Key` (e.g., `ck_1234567890abcdef1234567890abcdef12345678`)
     - `Consumer Secret` (e.g., `cs_1234567890abcdef1234567890abcdef12345678`)
   - Save these securely as they won’t be shown again.

## Obtaining the STORE_URL
The `STORE_URL` is your WooCommerce store’s domain.

1. **Find Your Store URL**:
   - In WordPress, go to "Settings" > "General".
   - Note the "Site Address (URL)" (e.g., `https://example.com`).

2. **Store the STORE_URL**:
   - Example: `https://example.com`.

## Usage
Make API requests with basic auth:
```
GET {STORE_URL}/wp-json/wc/v3/products
Authorization: Basic {Base64 encoded CONSUMER_KEY:CONSUMER_SECRET}
```
Or use query parameters:

GET {STORE_URL}/wp-json/wc/v3/products?consumer_key={CONSUMER_KEY}&consumer_secret={CONSUMER_SECRET}

See the [WooCommerce API Docs](https://w


md/woocommerce_readme.md
# WooCommerce API Usage for Club Madeira

This document provides a detailed guide on using the WooCommerce API to retrieve part category and part data for clubmadeira.io. This will later be replaced with instructions on how to obtain the API key details from WooCommerce to use in the config.

## Prerequisites
- A WooCommerce site (sign up at [https://woocommerce.com/start](https://woocommerce.com/start)).
- API credentials (CONSUMER_KEY, CONSUMER_SECRET) from WooCommerce.
- Basic API knowledge.

## Step-by-Step Instructions

### Step 1: Verify API Credentials
Ensure you have your CONSUMER_KEY and CONSUMER_SECRET from your WooCommerce site (in config.json).

### Step 2: Access WooCommerce API
Refer to the WooCommerce REST API documentation: [https://woocommerce.github.io/woocommerce-rest-api-docs/](https://woocommerce.github.io/woocommerce-rest-api-docs/). Base URL: <STORE_URL>/wp-json/wc/v3 (e.g., https://yourstore.com/wp-json/wc/v3).

### Step 3: Retrieve Part Categories
API Endpoint: GET /products/categories. Request: Headers: Authorization: Basic <base64(<CONSUMER_KEY>:<CONSUMER_SECRET>)>. URL: <STORE_URL>/wp-json/wc/v3/products/categories. Example with cURL: ``` curl -X GET "<STORE_URL>/wp-json/wc/v3/products/categories" -u <CONSUMER_KEY>:<CONSUMER_SECRET> ``` Response: JSON with category data (e.g., [{"id": 15, "name": "Brakes"}]). Steps: 1. Replace <STORE_URL>, <CONSUMER_KEY>, and <CONSUMER_SECRET> with your config values. 2. Send the request (use -u for basic auth). 3. Parse the response to list categories.

### Step 4: Retrieve Part Data
API Endpoint: GET /products. Request: Headers: Authorization: Basic <base64(<CONSUMER_KEY>:<CONSUMER_SECRET>)>. URL: <STORE_URL>/wp-json/wc/v3/products?category=<category_id>. Example with cURL: ``` curl -X GET "<STORE_URL>/wp-json/wc/v3/products?category=<category_id>" -u <CONSUMER_KEY>:<CONSUMER_SECRET> ``` Response: JSON with product data (e.g., [{"id": 101, "name": "Brake Pad", "price": "29.99"}]). Steps: 1. Use a category_id from Step 3 (e.g., 15). 2. Send the request. 3. Parse the response to display parts.

### Step 5: Integrate with Club Madeira
Use the fetched data in clubmadeira.io (e.g., populate a parts list). Update your application to use these API calls with user-provided credentials.

## Troubleshooting
- **401 Unauthorized**: Check CONSUMER_KEY and CONSUMER_SECRET.
- **Empty Response**: Add categories and products in WooCommerce admin.

## Next Steps
Test with your WooCommerce store data. **Note**: This guide will be replaced with instructions on how to obtain CONSUMER_KEY and CONSUMER_SECRET from WooCommerce for the config.
md/wordpress_readme.md
# WordPress Module Creation for Club Madeira

This document explains how WordPress uses modules (plugins) and provides a step-by-step guide to creating a plugin for clubmadeira.io. This will later be replaced with instructions on how to add the created plugin to a user's WordPress site.

## How WordPress Uses Modules
WordPress uses "modules" as plugins—custom PHP code extending site functionality. Plugins can add features like car part listings or search for clubmadeira.io. They leverage WordPress APIs (e.g., REST API, shortcodes) for integration.

## Prerequisites
- A WordPress site (sign up at [https://wordpress.com/start](https://wordpress.com/start)).
- Basic PHP and WordPress development knowledge.
- Local development environment (e.g., XAMPP) or access to a WordPress install.

## Step-by-Step Instructions

### Step 1: Sign Up or Access WordPress
Go to [https://wordpress.com/start](https://wordpress.com/start) and create a site, or log in to an existing one. For self-hosted, download WordPress from [https://wordpress.org/download/](https://wordpress.org/download/) and install it locally or on a server following their instructions.

### Step 2: Set Up Development Environment
Access your WordPress installation’s file system (e.g., via FTP or local wp-content/plugins/). Navigate to the wp-content/plugins/ directory where plugins are stored.

### Step 3: Create a Plugin Folder
In the wp-content/plugins/ directory, create a new folder named clubmadeira-parts. This will contain your plugin files.

### Step 4: Write the Plugin Code
Create a file named clubmadeira-parts.php inside the clubmadeira-parts folder. Open it in a text editor and add the following code: ```php <?php /* Plugin Name: Club Madeira Parts Description: A plugin to display car parts for clubmadeira.io. Version: 1.0 Author: Club Madeira Team */ function clubmadeira_parts_search() { ob_start(); ?> <form method="post"> <input type="text" name="part_search" id="part_search" placeholder="Search Parts"> <button type="submit">Search</button> </form> <?php if ($_SERVER["REQUEST_METHOD"] == "POST" && !empty($_POST["part_search"])) { $search = sanitize_text_field($_POST["part_search"]); echo "<p>Search results for: " . esc_html($search) . "</p>"; $args = array( 'post_type' => 'part', 's' => $search ); $query = new WP_Query($args); if ($query->have_posts()) { while ($query->have_posts()) { $query->the_post(); echo '<div>' . get_the_title() . ' - $' . get_post_meta(get_the_ID(), 'price', true) . '</div>'; } } else { echo "<p>No parts found.</p>"; } wp_reset_postdata(); } return ob_get_clean(); } add_shortcode('clubmadeira_parts', 'clubmadeira_parts_search'); function clubmadeira_register_parts() { register_post_type('part', array( 'labels' => array('name' => 'Parts', 'singular_name' => 'Part'), 'public' => true, 'has_archive' => true, 'supports' => array('title', 'editor') )); register_post_meta('part', 'price', array('type' => 'string', 'single' => true, 'show_in_rest' => true)); } add_action('init', 'clubmadeira_register_parts'); ``` This code defines a plugin with a shortcode [clubmadeira_parts] that creates a searchable parts list using a custom post type called "part".

### Step 5: Activate the Plugin
Log in to your WordPress admin panel (e.g., http://localhost/wp-admin or yourdomain.com/wp-admin). Go to **Plugins** > **Installed Plugins**. Find "Club Madeira Parts" in the list and click **Activate**.

### Step 6: Add Parts Data
In the admin menu, go to **Parts** > **Add New**. Create a new part with a title (e.g., "Brake Pad"). In the custom fields section, add a field named "price" with a value (e.g., "29.99"). If custom fields aren’t visible, enable them under **Screen Options** at the top. Click **Publish** to save. Add more parts as needed.

### Step 7: Add the Shortcode
Go to **Pages** > **Add New**, or edit an existing page. In the editor, insert [clubmadeira_parts] where you want the search form. Save or update the page, then click **Preview** to test. Enter a part name (e.g., "Brake Pad") and click **Search** to see results.

## Troubleshooting
- **Shortcode Not Working**: Ensure the plugin is activated and check for PHP errors by enabling debug mode in wp-config.php with define('WP_DEBUG', true);.
- **No Results**: Verify parts are added under the "Parts" post type and the price field is set correctly.

## Next Steps
Enhance the plugin with REST API integration for clubmadeira.io. Refer to [https://developer.wordpress.com/docs/api/](https://developer.wordpress.com/docs/api/) for API details. **Note**: This guide will be replaced with instructions on how to add this plugin to a user's WordPress site.
static_contents_css.txt
+ [static]
+----icons.css
+----[js]
+------admin-page.js
+------category-management.js
+------common.js
+------community-page.js
+------merchant-page.js
+------page-load.js
+------partner-page.js
+------site-auth.js
+------site-navigation.js
+------site-request.js
+------user-management.js
+----[old]
+------admin copy.html
+------all.js
+------community copy.html
+------configuration.py
+------data_retrieval.py
+------madeira.py
+------merchant copy.html
+------partner.old.html
+------user_management.py
+----signup.css
+----styles.css

icons.css

/* icons.css */

/* Size classes for branding and menu icons */
.branding-size {
    display: inline-block;
    width: 100px;
    height: 80px;
    vertical-align: middle;
    margin-right: 8px;
}

.menu-size {
    display: inline-block;
    width: 20px;
    height: 20px;
    vertical-align: middle;
    margin-right: 8px;
}

/* Icon classes with SVG background images */

/* Admin icon (used in branding) */
.icon-admin {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='white' d='M256 48C141.1 48 48 141.1 48 256l0 40c0 13.3-10.7 24-24 24s-24-10.7-24-24l0-40C0 114.6 114.6 0 256 0S512 114.6 512 256l0 144.1c0 48.6-39.4 88-88.1 88L313.6 488c-8.3 14.3-23.8 24-41.6 24l-32 0c-26.5 0-48-21.5-48-48s21.5-48 48-48l32 0c17.8 0 33.3 9.7 41.6 24l110.4 .1c22.1 0 40-17.9 40-40L464 256c0-114.9-93.1-208-208-208zM144 208l16 0c17.7 0 32 14.3 32 32l0 112c0 17.7-14.3 32-32 32l-16 0c-35.3 0-64-28.7-64-64l0-48c0-35.3 28.7-64 64-64zm224 0c35.3 0 64 28.7 64 64l0 48c0 35.3-28.7 64-64 64l-16 0c-17.7 0-32-14.3-32-32l0-112c0-17.7 14.3-32 32-32l16 0z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Merchant icon (used in both branding and menu) */
.icon-merchant {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='white' d='M96 128a128 128 0 1 0 256 0A128 128 0 1 0 96 128zm94.5 200.2l18.6 31L175.8 483.1l-36-146.9c-2-8.1-9.8-13.4-17.9-11.3C51.9 342.4 0 405.8 0 481.3c0 17 13.8 30.7 30.7 30.7l131.7 0c0 0 0 0 .1 0l5.5 0 112 0 5.5 0c0 0 0 0 .1 0l131.7 0c17 0 30.7-13.8 30.7-30.7c0-75.5-51.9-138.9-121.9-156.4c-8.1-2-15.9 3.3-17.9 11.3l-36 146.9L238.9 359.2l18.6-31c6.4-10.7-1.3-24.2-13.7-24.2L224 304l-19.7 0c-12.4 0-20.1 13.6-13.7 24.2z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Community icon (used in both branding and menu) */
.icon-community {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 512'%3E%3Cpath fill='white' d='M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Partner icon (used in both branding and menu) */
.icon-partner {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='white' d='M512 256c0 .9 0 1.8 0 2.7c-.4 36.5-33.6 61.3-70.1 61.3L344 320c-26.5 0-48 21.5-48 48c0 3.4 .4 6.7 1 9.9c2.1 10.2 6.5 20 10.8 29.9c6.1 13.8 12.1 27.5 12.1 42c0 31.8-21.6 60.7-53.4 62c-3.5 .1-7 .2-10.6 .2C114.6 512 0 397.4 0 256S114.6 0 256 0S512 114.6 512 256zM128 288a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm0-96a32 32 0 1 0 0-64 32 32 0 1 0 0 64zM288 96a32 32 0 1 0 -64 0 32 32 0 1 0 64 0zm96 96a32 32 0 1 0 0-64 32 32 0 1 0 0 64z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Favicon icon */
.icon-favicon {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 512 512'%3E%3Cpath fill='white' d='M201.4 137.4c12.5-12.5 32.8-12.5 45.3 0l160 160c12.5 12.5 12.5 32.8 0 45.3s-32.8 12.5-45.3 0L224 205.3 86.6 342.6c-12.5 12.5-32.8 12.5-45.3 0s-12.5-32.8 0-45.3l160-160zM201.4 374.6c12.5 12.5 32.8 12.5 45.3 0l160-160c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0L224 306.7 86.6 169.4c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3l160 160z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
}

/* Amazon UK Icon */
.icon-amazon-uk {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 448 512'%3E%3Cpath fill='white' d='M257.2 162.7c-48.7 1.8-169.5 15.5-169.5 117.5 0 109.5 138.3 114 183.5 43.2 6.5 10.2 35.4 37.5 45.3 46.8l56.8-56S341 288.9 341 261.4V114.3C341 89 316.5 32 228.7 32 140.7 32 94 87 94 136.3l73.5 6.8c16.3-49.5 54.2-49.5 54.2-49.5 40.7-.1 35.5 29.8 35.5 69.1zm0 86.8c0 80-84.2 68-84.2 17.2 0-47.2 50.5-56.7 84.2-57.8v40.6zm136 163.5c-7.7 10-70 67-174.5 67S34.2 408.5 9.7 379c-6.8-7.7 1-11.3 5.5-8.3C88.5 415.2 203 488.5 387.7 401c7.5-3.7 13.3 2 5.5 12zm39.8 2.2c-6.5 15.8-16 26.8-21.2 31-5.5 4.5-9.5 2.7-6.5-3.8s19.3-46.5 12.7-55c-6.5-8.3-37-4.3-48-3.2-10.8 1-13 2-14-.3-2.3-5.7 21.7-15.5 37.5-17.5 15.7-1.8 41-.8 46 5.7 3.7 5.1 0 27.1-6.5 43.1z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
    display: inline-block;
    width: 20px; /* Default size for menu icons */
    height: 20px;
    vertical-align: middle;
}

/* eBay UK Icon */
.icon-ebay-uk {
    background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 640 512'%3E%3Cpath fill='white' d='M606 189.5l-54.8 109.9-54.9-109.9h-37.5l10.9 20.6c-11.5-19-35.9-26-63.3-26-31.8 0-67.9 8.7-71.5 43.1h33.7c1.4-13.8 15.7-21.8 35-21.8 26 0 41 9.6 41 33v3.4c-12.7 0-28 .1-41.7 .4-42.4 .9-69.6 10-76.7 34.4 1-5.2 1.5-10.6 1.5-16.2 0-52.1-39.7-76.2-75.4-76.2-21.3 0-43 5.5-58.7 24.2v-80.6h-32.1v169.5c0 10.3-.6 22.9-1.1 33.1h31.5c.7-6.3 1.1-12.9 1.1-19.5 13.6 16.6 35.4 24.9 58.7 24.9 36.9 0 64.9-21.9 73.3-54.2-.5 2.8-.7 5.8-.7 9 0 24.1 21.1 45 60.6 45 26.6 0 45.8-5.7 61.9-25.5 0 6.6 .3 13.3 1.1 20.2h29.8c-.7-8.2-1-17.5-1-26.8v-65.6c0-9.3-1.7-17.2-4.8-23.8l61.5 116.1-28.5 54.1h35.9L640 189.5zM243.7 313.8c-29.6 0-50.2-21.5-50.2-53.8 0-32.4 20.6-53.8 50.2-53.8 29.8 0 50.2 21.4 50.2 53.8 0 32.3-20.4 53.8-50.2 53.8zm200.9-47.3c0 30-17.9 48.4-51.6 48.4-25.1 0-35-13.4-35-25.8 0-19.1 18.1-24.4 47.2-25.3 13.1-.5 27.6-.6 39.4-.6zm-411.9 1.6h128.8v-8.5c0-51.7-33.1-75.4-78.4-75.4-56.8 0-83 30.8-83 77.6 0 42.5 25.3 74 82.5 74 31.4 0 68-11.7 74.4-46.1h-33.1c-12 35.8-87.7 36.7-91.2-21.6zm95-21.4H33.3c6.9-56.6 92.1-54.7 94.4 0z'/%3E%3C/svg%3E");
    background-size: contain;
    background-repeat: no-repeat;
    display: inline-block;
    width: 20px; /* Default size for menu icons */
    height: 20px;
    vertical-align: middle;
}

js/admin-page.js

function initializeAdmin(pageType) {
    console.log('initializeAdmin - Initializing admin page with type: ' + pageType);
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('initializeAdmin - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token); // Add permission check for robustness
    if (!decoded || !decoded.permissions || !decoded.permissions.includes('admin')) {
        console.error('initializeAdmin - Invalid token or no admin permission, redirecting to /');
        toastr.error('Permission denied: Admin access required');
        window.location.href = '/';
        return;
    }

    // Load initial content
    loadBranding(pageType, 'brandingContent');
    setupNavigation();
    showSection('welcome');
    loadInitialData();
    setupEventListeners();

    // Call shared "Change Password" logic
    if (typeof setupChangePassword === 'function') {
        setupChangePassword();
        console.log('initializeAdmin - Change Password logic initialized');
    } else {
        console.error('initializeAdmin - setupChangePassword function not found');
    }

    // Ensure loading overlay is hidden
    hideLoadingOverlay();
    console.log('Admin page initialized');
}

function setupNavigation() {
    console.log('setupNavigation - Setting up navigation');
    // Delegate to site-navigation.js's initializeNavigation
    if (typeof window.siteNavigation?.initializeNavigation === 'function') {
        window.siteNavigation.initializeNavigation();
    } else {
        console.warn('setupNavigation - window.siteNavigation.initializeNavigation not found, using fallback');
        // Fallback logic
        document.querySelectorAll('.menu button[data-section]').forEach(button => {
            button.addEventListener('click', function() {
                const sectionId = this.getAttribute('data-section');
                const submenuId = this.getAttribute('data-submenu');
                if (submenuId) {
                    const submenu = document.getElementById(submenuId);
                    const caret = this.querySelector('.caret');
                    if (submenu && caret) {
                        if (submenu.style.display === 'block') {
                            submenu.style.display = 'none';
                            caret.classList.remove('fa-caret-down');
                            caret.classList.add('fa-caret-right');
                        } else {
                            submenu.style.display = 'block';
                            caret.classList.remove('fa-caret-right');
                            caret.classList.add('fa-caret-down');
                        }
                    }
                }
            });
        });
    }
}

function loadInitialData() {
    console.log('loadInitialData - Loading initial data');
    authenticatedFetch(`${window.apiUrl}/deals`)
        .then(response => {
            if (!response.ok) throw new Error('Failed to fetch deals');
            return response.json();
        })
        .then(data => {
            console.log('loadInitialData - Deals fetched:', data);
            // Placeholder for deal list population
        })
        .catch(error => {
            console.error('loadInitialData - Error:', error);
            toastr.error('Failed to load deal listings');
        });
}

function setupEventListeners() {
    const saveSettingsButton = document.querySelector('button[data-action="saveSettings"]');
    if (saveSettingsButton) {
        saveSettingsButton.addEventListener('click', function() {
            const userId = document.getElementById('userId')?.value || '';
            const contactName = document.getElementById('contactName')?.value || '';
            const websiteUrl = document.getElementById('websiteUrl')?.value || '';
            const emailAddress = document.getElementById('emailAddress')?.value || '';

            console.log('setupEventListeners - Saving settings for user:', userId);
            authenticatedFetch(`${window.apiUrl}/settings`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ userId, contactName, websiteUrl, emailAddress })
            })
            .then(response => {
                if (!response.ok) throw new Error('Failed to save settings');
                return response.json();
            })
            .then(data => {
                console.log('setupEventListeners - Settings saved:', data);
                toastr.success('Settings updated successfully');
            })
            .catch(error => {
                console.error('setupEventListeners - Error saving settings:', error);
                toastr.error('Failed to save settings');
            });
        });
    } else {
        console.warn('setupEventListeners - Save settings button not found');
    }
}

// Export for use in other scripts
window.initializeAdmin = initializeAdmin;
window.loadInitialData = loadInitialData;
window.setupEventListeners = setupEventListeners;
// Removed: window.setupNavigation = setupNavigation;

js/category-management.js

// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}

js/common.js

// common.js
// Purpose: Provides core shared utilities for all pages, specifically Toastr configuration.

// Configures Toastr for consistent toast notifications across the application.
function setupToastr() {
    console.log('setupToastr - Initiating Toastr configuration');
    if (typeof toastr === 'undefined') {
        console.error('setupToastr - Toastr library not loaded');
        return;
    }
    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        timeOut: 5000,
        showMethod: 'slideDown',
        hideMethod: 'slideUp'
    };
    console.log('setupToastr - Toastr options configured:', JSON.stringify(toastr.options));
    console.log('setupToastr - Configuration completed');
}

// Export for use in other scripts
window.setupToastr = setupToastr;

js/community-page.js

// community-page.js
// Purpose: Manages page-specific functionality for the /community page.

// Initializes the community page with permission checks.
function initializeCommunity() {
    console.log('initializeCommunity - Initializing community page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeCommunity - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeCommunity - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('community')) {
        toastr.error('Permission denied: Community permission required');
        console.error('initializeCommunity - No community permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (!userId) {
        toastr.error('User ID not found in session, redirecting to login');
        console.error('initializeCommunity - No userId found in localStorage');
        window.location.href = '/';
        return;
    }
    const userIdInput = document.getElementById('userId');
    if (userIdInput) {
        userIdInput.value = userId;
    } else {
        console.warn('initializeCommunity - userId input not found');
    }

    // Set up navigation and event listeners to fix button functionality
    setupNavigation(); // From site-navigation.js (CREQ Requirement 1)
    attachEventListeners(); // From page-load.js (CREQ Requirement 1)

    // Load branding and initial data
    loadBranding('community', 'brandingContent');
    updateMenu();
    showSection('welcome');
    waitForTinyMCE(() => initializeTinyMCE('#aboutCommunity, #stylingDetails, #page1Content'));
    loadVisits();
    loadOrders();

    // Set up shared "Change Password" logic
    if (typeof setupChangePassword === 'function') {
        setupChangePassword(); // From user-management.js (CREQ Requirement 2)
        console.log('initializeCommunity - Change Password logic initialized');
    } else {
        console.error('initializeCommunity - setupChangePassword function not found');
    }

    // Hide loading overlay after initialization
    hideLoadingOverlay(); // From page-load.js (CREQ Requirement 3)
    console.log('initializeCommunity - Community page initialized successfully');
}

// Updates the menu dynamically based on permissions.
function updateMenu() {
    console.log('updateMenu - Updating menu');
    const menu = document.getElementById('menu');
    const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
    if (menu) {
        menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
        menu.innerHTML += `
            <button data-section="welcome">
                <span class="button-content"><i class="fas fa-home"></i> Dashboard</span>
            </button>
            <button data-submenu="my_website_intro" data-section="my_website_intro">
                <span class="button-content"><i class="fas fa-globe"></i> My Web Site</span>
                <i class="fas fa-caret-right caret"></i>
            </button>
            <div id="my_website_intro" class="submenu">
                <button data-section="wix">
                    <span class="button-content"><i class="fab fa-wix-simple"></i> Wix</span>
                </button>
                <button data-section="wordpress">
                    <span class="button-content"><i class="fab fa-wordpress"></i> WordPress</span>
                </button>
                <button data-section="squarespace">
                    <span class="button-content"><i class="fab fa-squarespace"></i> Squarespace</span>
                </button>
                <button data-section="weebly">
                    <span class="button-content"><i class="fab fa-weebly"></i> Weebly</span>
                </button>
                <button data-section="joomla">
                    <span class="button-content"><i class="fab fa-joomla"></i> Joomla</span>
                </button>
                <button data-section="no_website">
                    <span class="button-content"><i class="fas fa-question-circle"></i> I Don’t Have a Website Yet</span>
                </button>
            </div>
            <button data-section="categories">
                <span class="button-content"><i class="fas fa-list"></i> My Categories</span>
            </button>
            <button data-submenu="referrals_intro" data-section="referrals_intro">
                <span class="button-content">
                    <span class="svg-icon">
                        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 640 512" preserveAspectRatio="xMidYMid meet">
                            <path d="M72 88a56 56 0 1 1 112 0A56 56 0 1 1 72 88zM64 245.7C54 256.9 48 271.8 48 288s6 31.1 16 42.3l0-84.7zm144.4-49.3C178.7 222.7 160 261.2 160 304c0 34.3 12 65.8 32 90.5l0 21.5c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-26.8C26.2 371.2 0 332.7 0 288c0-61.9 50.1-112 112-112l32 0c24 0 46.2 7.5 64.4 20.3zM448 416l0-21.5c20-24.7 32-56.2 32-90.5c0-42.8-18.7-81.3-48.4-107.7C449.8 183.5 472 176 496 176l32 0c61.9 0 112 50.1 112 112c0 44.7-26.2 83.2-64 101.2l0 26.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32zm8-328a56 56 0 1 1 112 0A56 56 0 1 1 456 88zM576 245.7l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM320 32a64 64 0 1 1 0 128 64 64 0 1 1 0-128zM240 304c0 16.2 6 31 16 42.3l0-84.7c-10 11.3-16 26.1-16 42.3zm144-42.3l0 84.7c10-11.3 16-26.1 16-42.3s-6-31.1-16-42.3zM448 304c0 44.7-26.2 83.2-64 101.2l0 42.8c0 17.7-14.3 32-32 32l-64 0c-17.7 0-32-14.3-32-32l0-42.8c-37.8-18-64-56.5-64-101.2c0-61.9 50.1-112 112-112l32 0c61.9 0 112 50.1 112 112z"/>
                        </svg>
                    </span> My Referrals
                </span>
                <i class="fas fa-caret-right caret"></i>
            </button>
            <div id="referrals_intro" class="submenu">
                <button data-section="visits">
                    <span class="button-content"><i class="fas fa-eye"></i> Visits</span>
                </button>
                <button data-section="orders">
                    <span class="button-content"><i class="fas fa-shopping-cart"></i> Orders</span>
                </button>
            </div>
            <button data-submenu="my-account-submenu" data-section="my-account">
                <span class="button-content"><i class="fas fa-cog"></i> My Account</span>
                <i class="fas fa-caret-right caret"></i>
            </button>
            <div id="my-account-submenu" class="submenu">
                <button data-section="my-account">
                    <span class="button-content"><i class="fas fa-address-book"></i> Contact</span>
                </button>
                <button data-section="change-password">
                    <span class="button-content"><i class="fas fa-key"></i> Change Password</span>
                </button>
            </div>
        `;
        if (window.userPermissions.includes('admin')) {
            menu.innerHTML += `
                <button data-href="/admin" class="btn-admin">
                    <span class="button-content"><i class="fas fa-arrow-left"></i> Back to Admin</span>
                </button>
            `;
        }
        menu.innerHTML += `
            <button id="logOffBtn" class="btn-logoff">
                <span class="button-content"><i class="fas fa-sign-out-alt"></i> Log Off</span>
            </button>
        `;
        console.log('updateMenu - Menu updated');
    } else {
        console.error('updateMenu - Menu element not found');
    }
}

function updateIntegrationCode(section) {
    console.log('updateIntegrationCode - Updating integration code - Section:', section);
    const codeElements = {
        'wix': 'wixCode',
        'wordpress': 'wordpressCode',
        'squarespace': 'squarespaceCode',
        'weebly': 'weeblyCode',
        'joomla': 'joomlaCode'
    };
    const codeId = codeElements[section];
    const userId = document.getElementById('userId')?.value || 'unknown'; // Null-safe
    if (codeId) {
        const codeElement = document.getElementById(codeId);
        if (codeElement) {
            codeElement.textContent = `<iframe src="https://clubmadeira.io/discounts?referrer=${userId}" width="100%" height="600"></iframe>`;
            console.log('updateIntegrationCode - Code updated - ID:', codeId);
        } else {
            console.warn('updateIntegrationCode - Code element not found - ID:', codeId);
        }
    }
}

async function loadVisits() {
    console.log('loadVisits - Loading visits');
    const userId = document.getElementById('userId')?.value || '';
    if (!userId) {
        console.error('loadVisits - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadVisits - Fetching visits - URL:', `${window.apiUrl}/${userId}/visits`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/visits`);
        if (!response.ok) throw new Error(`Failed to fetch visits: ${response.status}`);
        const data = await response.json();
        console.log('loadVisits - Visits fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const visitsThisMonth = [];
            const visitsLastMonth = [];
            const visitsEarlier = [];
            data.visits.forEach(visit => {
                const visitDate = new Date(visit.timestamp);
                if (visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth) {
                    visitsThisMonth.push(visit);
                } else if ((visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth - 1) ||
                          (visitDate.getFullYear() === thisYear - 1 && thisMonth === 0 && visitDate.getMonth() === 11)) {
                    visitsLastMonth.push(visit);
                } else {
                    visitsEarlier.push(visit);
                }
            });
            updateVisitsTable('visitsListThisMonth', visitsThisMonth);
            updateVisitsTable('visitsListLastMonth', visitsLastMonth);
            updateVisitsTable('visitsListEarlier', visitsEarlier);
            console.log('loadVisits - Visits loaded - Counts:', { 
                thisMonth: visitsThisMonth.length, 
                lastMonth: visitsLastMonth.length, 
                earlier: visitsEarlier.length 
            });
        }
    } catch (error) {
        console.error('loadVisits - Error loading visits:', error.message, error.stack);
        toastr.error(`Error loading visits: ${error.message}`);
    }
}

function updateVisitsTable(tableId, visits) {
    console.log('updateVisitsTable - Updating table - Table ID:', tableId, 'Visits:', visits.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = visits.length === 0 ? '<tr><td colspan="2">No visits found</td></tr>' : '';
        visits.forEach(visit => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${visit.page || 'N/A'}</td><td>${visit.timestamp || 'N/A'}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateVisitsTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateVisitsTable - Table element not found - ID:', tableId);
    }
}

async function loadOrders() {
    console.log('loadOrders - Loading orders');
    const userId = document.getElementById('userId')?.value || '';
    if (!userId) {
        console.error('loadOrders - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadOrders - Fetching orders - URL:', `${window.apiUrl}/${userId}/orders`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/orders`);
        if (!response.ok) throw new Error(`Failed to fetch orders: ${response.status}`);
        const data = await response.json();
        console.log('loadOrders - Orders fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const ordersThisMonth = [];
            const ordersLastMonth = [];
            const ordersEarlier = [];
            data.orders.forEach(order => {
                const orderDate = new Date(order.timestamp);
                if (orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth) {
                    ordersThisMonth.push(order);
                } else if ((orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth - 1) ||
                          (orderDate.getFullYear() === thisYear - 1 && thisMonth === 0 && orderDate.getMonth() === 11)) {
                    ordersLastMonth.push(order);
                } else {
                    ordersEarlier.push(order);
                }
            });
            updateOrdersTable('ordersListThisMonth', ordersThisMonth);
            updateOrdersTable('ordersListLastMonth', ordersLastMonth);
            updateOrdersTable('ordersListEarlier', ordersEarlier);
            console.log('loadOrders - Orders loaded - Counts:', { 
                thisMonth: ordersThisMonth.length, 
                lastMonth: ordersLastMonth.length, 
                earlier: ordersEarlier.length 
            });
        }
    } catch (error) {
        console.error('loadOrders - Error loading orders:', error.message, error.stack);
        toastr.error(`Error loading orders: ${error.message}`);
    }
}

function updateOrdersTable(tableId, orders) {
    console.log('updateOrdersTable - Updating table - Table ID:', tableId, 'Orders:', orders.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = orders.length === 0 ? '<tr><td colspan="4">No orders found</td></tr>' : '';
        orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${order.orderId || 'N/A'}</td><td>${order.buyer || 'N/A'}</td><td>$${order.total || '0.00'}</td><td>${order.timestamp || 'N/A'}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateOrdersTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateOrdersTable - Table element not found - ID:', tableId);
    }
}

function waitForTinyMCE(callback) {
    console.log('waitForTinyMCE - Checking if TinyMCE is loaded');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('waitForTinyMCE - TinyMCE is loaded, executing callback');
        callback();
    } else {
        console.log('waitForTinyMCE - Waiting for TinyMCE to load...');
        const script = document.querySelector('script[src*="tinymce.min.js"]');
        if (script) {
            script.onload = () => {
                console.log('waitForTinyMCE - TinyMCE script loaded');
                callback();
            };
            script.onerror = () => console.error('waitForTinyMCE - TinyMCE failed to load');
        } else {
            setTimeout(() => waitForTinyMCE(callback), 100);
        }
    }
}

// Export for use in other scripts
window.initializeCommunity = initializeCommunity;
window.updateMenu = updateMenu;
window.updateIntegrationCode = updateIntegrationCode;
window.loadVisits = loadVisits;
window.updateVisitsTable = updateVisitsTable;
window.loadOrders = loadOrders;
window.updateOrdersTable = updateOrdersTable;
window.waitForTinyMCE = waitForTinyMCE;

js/merchant-page.js

// merchant-page.js
// Purpose: Manages page-specific functionality for the /merchant page.

// Initializes the merchant page with permission checks.
function initializeMerchant() {
    console.log('initializeMerchant - Initializing merchant page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeMerchant - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeMerchant - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('merchant') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: Merchant or Admin permission required');
        console.error('initializeMerchant - No merchant/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    const userIdInput = document.getElementById('userId');
    if (userIdInput && userId) {
        userIdInput.value = userId;
    } else if (!userId) {
        console.warn('initializeMerchant - No userId found in localStorage');
    } else {
        console.warn('initializeMerchant - userId input element not found');
    }

    // Set up navigation and event listeners
    setupNavigation(); // From site-navigation.js
    checkAdminPermission();
    loadBranding('merchant', 'brandingContent'); // Adjusted to match typical usage
    showSection('info');
    loadProducts(); // Load merchant products
    loadStoreRequest(); // Load store request data
    attachEventListeners(); // From page-load.js

    // Call shared "Change Password" logic
    if (typeof setupChangePassword === 'function') {
        setupChangePassword(); // From user-management.js
        console.log('initializeMerchant - Change Password logic initialized');
    } else {
        console.error('initializeMerchant - setupChangePassword function not found');
    }

    // Hide loading overlay after initialization
    hideLoadingOverlay(); // From page-load.js
    console.log('initializeMerchant - Merchant page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays merchant products.
async function loadProducts() {
    console.log('loadProducts - Loading products');
    const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
    if (!userId) {
        console.error('loadProducts - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadProducts - Fetching products - URL:', `${window.apiUrl}/${userId}/products`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/products`);
        if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
        const data = await response.json();
        console.log('loadProducts - Products fetched - Data:', JSON.stringify(data));
        
        const tbody = document.getElementById('productList');
        if (tbody) {
            tbody.innerHTML = '';
            data.products.forEach(product => tbody.appendChild(createProductRow(product)));
            console.log('loadProducts - Product table updated - Count:', data.products.length);
        } else {
            console.warn('loadProducts - Product list element not found');
        }
    } catch (error) {
        console.error('loadProducts - Error loading products - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading products: ${error.message}`);
    }
}

// Creates a table row for a product.
function createProductRow(product) {
    console.log('createProductRow - Creating row - Product:', JSON.stringify(product));
    const tr = document.createElement('tr');
    tr.innerHTML = `
        <td class="hidden">${product.id || ''}</td>
        <td>${product.category || 'N/A'}</td>
        <td>${product.title || 'N/A'}</td>
        <td><a href="${product.product_url || '#'}" target="_blank">${product.product_url ? 'Link' : 'N/A'}</a></td>
        <td>${product.current_price || 'N/A'}</td>
        <td>${product.original_price || 'N/A'}</td>
        <td><img src="${product.image_url || ''}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
        <td>${product.qty || 'N/A'}</td>
    `;
    return tr;
}

// Loads store request data specific to merchant page.
async function loadStoreRequest() {
    console.log('loadStoreRequest - Loading store request');
    const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
    if (!userId) {
        console.error('loadStoreRequest - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadStoreRequest - Fetching store request - URL:', `${window.apiUrl}/${userId}/siterequest`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/siterequest`);
        if (!response.ok) throw new Error(`Failed to fetch store request: ${response.status}`);
        const data = await response.json();
        const storeRequest = data.site_request || {};
        console.log('loadStoreRequest - Store request fetched - Data:', JSON.stringify(storeRequest));

        document.getElementById('storeName').value = storeRequest.storeName || '';
        if (window.tinyMCELoaded) {
            tinymce.get('aboutStore')?.setContent(storeRequest.aboutStore || '');
        } else {
            document.getElementById('aboutStore').value = storeRequest.aboutStore || '';
        }
        document.getElementById('colorPrefs').value = storeRequest.colorPrefs || '';
        document.getElementById('stylingDetails').value = storeRequest.stylingDetails || '';
        document.getElementById('preferredDomain').value = storeRequest.preferredDomain || 'mystore.uk';

        const emails = storeRequest.emails || ['info'];
        window.emailCount = 0;
        const emailsContainer = document.getElementById('emailsContainer');
        if (emailsContainer) {
            emailsContainer.innerHTML = '';
            emails.forEach((email, index) => {
                window.emailCount++;
                const emailDiv = document.createElement('div');
                emailDiv.className = 'email-section';
                emailDiv.dataset.email = window.emailCount;
                emailDiv.innerHTML = `
                    <label for="email${window.emailCount}Name">Email Name:</label>
                    <input type="text" id="email${window.emailCount}Name" name="email${window.emailCount}Name" value="${email}">
                    <span id="email${window.emailCount}Domain">@${storeRequest.preferredDomain || 'mystore.uk'}</span>
                    ${window.emailCount > 1 ? `<button type="button" class="remove-email-btn" onclick="removeEmail(${window.emailCount})">Remove Email</button>` : ''}
                `;
                emailsContainer.appendChild(emailDiv);
            });
        } else {
            console.warn('loadStoreRequest - Emails container not found');
        }

        const pages = storeRequest.pages && storeRequest.pages.length >= 2 ? storeRequest.pages : [
            { name: 'Home', content: '' },
            { name: 'Returns Policy', content: '' }
        ];
        window.pageCount = 0;
        const pagesContainer = document.getElementById('pagesContainer');
        if (pagesContainer) {
            pagesContainer.innerHTML = '';
            pages.forEach((page, index) => {
                window.pageCount++;
                const pageDiv = document.createElement('div');
                pageDiv.className = 'page-section';
                pageDiv.dataset.page = window.pageCount;
                pageDiv.innerHTML = `
                    <label for="page${window.pageCount}Name">Page Name:</label>
                    <input type="text" id="page${window.pageCount}Name" name="page${window.pageCount}Name" value="${page.name || ''}" ${window.pageCount <= 2 ? 'readonly' : ''}>
                    <br><br>
                    <label for="page${window.pageCount}Content">${window.pageCount === 1 ? 'Home Page' : window.pageCount === 2 ? 'Returns Policy' : 'Page'} Content:</label>
                    <textarea id="page${window.pageCount}Content" name="page${window.pageCount}Content">${page.content || ''}</textarea>
                    <label for="page${window.pageCount}Images">Additional Images:</label>
                    <input type="file" id="page${window.pageCount}Images" name="page${window.pageCount}Images" accept="image/*" multiple>
                    ${window.pageCount > 2 ? `<button type="button" class="remove-page-btn" onclick="removePage(${window.pageCount})">Remove Page</button>` : ''}
                `;
                pagesContainer.appendChild(pageDiv);
                if (window.tinyMCELoaded) {
                    tinymce.init({
                        selector: `#page${window.pageCount}Content`,
                        height: 200,
                        menubar: false,
                        plugins: 'lists',
                        toolbar: 'bold italic | bullist numlist',
                        setup: editor => {
                            editor.on('init', () => console.log(`TinyMCE editor initialized for page${window.pageCount}`));
                        }
                    });
                }
            });
        } else {
            console.warn('loadStoreRequest - Pages container not found');
        }

        const widgets = storeRequest.widgets || [];
        document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
            checkbox.checked = widgets.includes(checkbox.value);
        });

        updateDomainPreview(); // Assumed function from site-request.js
        console.log('loadStoreRequest - Store request loaded successfully');
    } catch (error) {
        console.error('loadStoreRequest - Error loading store request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading store request: ${error.message}`);
    }
}

// Export for use in other scripts
window.initializeMerchant = initializeMerchant;
window.checkAdminPermission = checkAdminPermission;
window.loadProducts = loadProducts;
window.createProductRow = createProductRow;
window.loadStoreRequest = loadStoreRequest;

js/page-load.js

// /static/js/page-load.js
// Purpose: Manages page initialization, event listener attachment for navigation and section handling, and loading overlay behavior.

// Function to show the loading overlay
function showLoadingOverlay() {
    let loadingOverlay = document.getElementById('loadingOverlay');
    if (!loadingOverlay) {
        loadingOverlay = document.createElement('div');
        loadingOverlay.id = 'loadingOverlay';
        loadingOverlay.innerHTML = `
            <div class="multicircle-loader">
                <div class="circle circle1"></div>
                <div class="circle circle2"></div>
                <div class="circle circle3"></div>
                <div class="circle circle4"></div>
            </div>
        `;
        document.body.prepend(loadingOverlay);
        console.log('showLoadingOverlay - Created and prepended loading overlay');
    }
    loadingOverlay.style.display = 'flex';
    console.log('showLoadingOverlay - Loading overlay set to visible');
    return loadingOverlay;
}

// Function to hide the loading overlay and show the main content with a minimum visibility delay
async function hideLoadingOverlay(minDelay = 1000) {
    const loadingOverlay = document.getElementById('loadingOverlay');
    const layoutWrapper = document.querySelector('.layout-wrapper');
    
    if (loadingOverlay && layoutWrapper) {
        await new Promise(resolve => setTimeout(resolve, minDelay));
        loadingOverlay.style.display = 'none';
        layoutWrapper.style.display = 'block';
        console.log('hideLoadingOverlay - Loading overlay hidden, main content displayed');
    } else {
        console.warn('hideLoadingOverlay - Loading overlay or layout wrapper not found');
    }
}

// Loads branding content into #brandingContent
async function loadBranding(brandingType) {
    console.log('loadBranding - Loading branding - Type:', brandingType);
    const brandingContent = document.getElementById('brandingContent');
    if (!brandingContent) {
        console.error('loadBranding - Branding container not found - ID: brandingContent');
        return;
    }
    try {
        console.log('loadBranding - Fetching branding from /branding - Type:', brandingType);
        const response = await authenticatedFetch(`${window.apiUrl}/branding?type=${brandingType}`);
        if (!response.ok) {
            const errorData = await response.json();
            throw new Error(`Failed to fetch branding: ${response.status} - ${errorData.message || 'Unknown error'}`);
        }
        const data = await response.json();
        if (data.status === 'success' && data.branding) {
            brandingContent.innerHTML = data.branding;
            console.log('loadBranding - Branding loaded successfully - Type:', brandingType);
        } else {
            throw new Error('Invalid branding response');
        }
    } catch (error) {
        console.error('loadBranding - Error fetching branding:', error.message);
        brandingContent.innerHTML = `<h1>${brandingType.charAt(0).toUpperCase() + brandingType.slice(1)} Dashboard</h1>`;
        console.log('loadBranding - Fallback branding applied - Type:', brandingType);
    }
}

// Attaches event listeners for navigation and section handling.
function attachEventListeners() {
    console.log('attachEventListeners - Attaching event listeners');
    const buttons = document.querySelectorAll('button[data-section], button[data-href]'); // Exclude data-submenu to avoid overlap
    console.log('attachEventListeners - Found buttons with data attributes:', buttons.length);
    buttons.forEach(button => {
        const sectionId = button.getAttribute('data-section');
        const href = button.getAttribute('data-href');
        if (sectionId || href) { // Only handle sections or SPA links, not submenus
            button.addEventListener('click', (event) => {
                if (href) {
                    event.preventDefault();
                    fetchProtectedPage(href, '.content-wrapper');
                } else if (sectionId) {
                    siteNavigation.showSection(sectionId);
                }
            });
            console.log('attachEventListeners - Added click listener to button with data:', sectionId || href);
        }
    });
    // Log off button logic remains
    const contentWrapper = document.querySelector('.content-wrapper');
    if (contentWrapper) {
        contentWrapper.addEventListener('click', (event) => {
            if (event.target.id === 'logOffBtn') handleLogOff(event);
        });
    }
    console.log('attachEventListeners - Event listeners attached');
}

// Base initialization function ensuring permission checks before page setup.
function initializePage(requiredPermissions, callback) {
    console.log('initializePage - Starting initialization - Permissions required:', requiredPermissions);
    const token = localStorage.getItem('authToken');
    console.log('initializePage - Retrieved token from localStorage:', token || 'None');
    if (!token) {
        console.warn('initializePage - No auth token found - Redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    console.log('initializePage - Decoded token:', decoded ? JSON.stringify(decoded) : 'null');
    if (!decoded) {
        console.warn('initializePage - Failed to decode token - Redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    console.log('initializePage - User permissions set:', JSON.stringify(window.userPermissions));
    if (!requiredPermissions.some(perm => window.userPermissions.includes(perm))) {
        console.warn('initializePage - Required permissions not found - Required:', requiredPermissions, 'Permissions:', window.userPermissions);
        toastr.error(`Permission denied: one of ${requiredPermissions.join(', ')} required`);
        window.location.href = '/';
        return;
    }
    console.log('initializePage - Permission check passed - Executing callback');
    callback();
    console.log('initializePage - Initialization completed for permissions:', requiredPermissions);
}

// Common initialize function handling page-specific setup based on page type.
async function initialize(pageType) {
    console.log('initialize - Starting page initialization - Page type:', pageType);
    
    showLoadingOverlay();

    const pageConfigs = {
        'partner': {
            permissions: ["wixpro", "admin"],
            brandingType: 'partner',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing partner-specific steps');
                initializePartner(); // From partner-page.js
                attachEventListeners();
                console.log('initialize - Partner-specific steps completed');
            }
        },
        'merchant': {
            permissions: ["merchant", "admin"],
            brandingType: 'merchant',
            initialSection: 'info',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing merchant-specific steps');
                initializeMerchant(); // From merchant-page.js
                attachEventListeners();
                console.log('initialize - Merchant-specific steps completed');
            }
        },
        'community': {
            permissions: ["community", "admin"],
            brandingType: 'community',
            initialSection: 'welcome',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing community-specific steps');
                initializeCommunity(); // From community-page.js
                attachEventListeners();
                console.log('initialize - Community-specific steps completed');
            }
        },
        'admin': {
            permissions: ["admin"],
            brandingType: 'admin',
            initialSection: 'welcome',
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing admin-specific steps');
                initializeAdmin('admin'); // From admin-page.js
                attachEventListeners();
                console.log('initialize - Admin-specific steps completed');
            }
        },
        'login': {
            permissions: [],
            brandingType: 'login',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing login-specific steps');
                console.log('initialize - Login-specific steps completed');
            }
        },
        'signup': {
            permissions: [],
            brandingType: 'signup',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing signup-specific steps');
                console.log('initialize - Signup-specific steps completed');
            }
        }
    };

    const config = pageConfigs[pageType];
    if (!config) {
        console.error('initialize - Invalid page type provided - Type:', pageType);
        toastr.error('Invalid page type');
        await hideLoadingOverlay();
        return;
    }
    console.log('initialize - Configuration loaded for page type:', pageType, 'Config:', JSON.stringify(config));

    if (config.permissions && config.permissions.length > 0) {
        console.log('initialize - Performing permission check for:', config.permissions);
        initializePage(config.permissions, async () => {
            console.log('initialize - Permission validated for:', config.permissions);
            await performPageSetup(pageType, config);
            await hideLoadingOverlay();
        });
    } else {
        console.log('initialize - No permissions required for:', pageType);
        await performPageSetup(pageType, config);
        await hideLoadingOverlay();
    }
    console.log('initialize - Initialization process completed for:', pageType);
}

// Attach initialize to the window object to ensure it's globally available
window.initialize = initialize;

// Helper function to perform page setup after permission checks.
async function performPageSetup(pageType, config) {
    console.log('performPageSetup - Starting setup - Page type:', pageType);
    
    console.log('performPageSetup - Loading branding - Type:', config.brandingType);
    await loadBranding(config.brandingType);

    if (config.initialSection) {
        console.log('performPageSetup - Showing initial section - ID:', config.initialSection);
        showSection(config.initialSection);
    } else {
        console.log('performPageSetup - No initial section specified for:', pageType);
    }

    if (typeof config.extraSteps === 'function') {
        console.log('performPageSetup - Executing extra steps for:', pageType);
        config.extraSteps();
    } else {
        console.log('performPageSetup - No extra steps defined for:', pageType);
    }

    console.log('performPageSetup - Page setup completed for:', pageType);
}

// Attaches click event listeners for section navigation.
function handleSectionClick(event) {
    console.log('handleSectionClick - Section click event triggered');
    const target = event.target.closest('button[data-section], button[data-submenu]');
    console.log('handleSectionClick - Event target:', target);
    if (!target) return;

    event.stopPropagation(); // Stop bubbling to parent elements

    const sectionId = target.getAttribute('data-section');
    const submenuId = target.getAttribute('data-submenu');
    console.log(`handleSectionClick - Extracted attributes - Section: ${sectionId} Submenu: ${submenuId}`);

    // Toggle submenu if the button has a data-submenu attribute
    if (submenuId) {
        console.log(`handleSectionClick - Toggling submenu - ID: ${submenuId}`);
        toggleSubmenu(submenuId);
    }

    // Show section if the button has a data-section attribute
    if (sectionId) {
        console.log(`handleSectionClick - Showing section - ID: ${sectionId}`);
        showSection(sectionId);
    }
    console.log('handleSectionClick - Event handling completed');
}

// Attaches click event listeners for href navigation with SPA support.
async function handleHrefClick(event, options = {}) {
    console.log('handleHrefClick - Href click event triggered');
    const target = event.currentTarget;
    console.log('handleHrefClick - Event target:', target);
    const href = target.getAttribute('data-href');
    console.log('handleHrefClick - Extracted href:', href);
    console.log('handleHrefClick - Options provided:', JSON.stringify(options));
    if (!href) {
        console.warn('handleHrefClick - No href attribute found - Target:', target);
        return;
    }

    showLoadingOverlay();
    try {
        console.log('handleHrefClick - Initiating fetch for protected page - Href:', href);
        const startTime = Date.now();
        const html = await fetchProtectedPage(href);
        const duration = Date.now() - startTime;
        if (!html) {
            console.error('handleHrefClick - No HTML returned - Href:', href);
            return;
        }
        console.log('handleHrefClick - HTML fetched successfully - Length:', html.length, 'Duration:', `${duration}ms`);

        const { spaPaths = ['/partner'], containerSelector = '.content-container', onLoad = null } = options;
        console.log('handleHrefClick - SPA paths:', spaPaths, 'Container selector:', containerSelector);

        // Update URL for all navigations
        history.pushState({ page: href.slice(1) }, `${href} Page`, href);
        console.log('handleHrefClick - URL updated via history.pushState - New URL:', window.location.href);

        const contentContainer = document.querySelector(containerSelector);
        console.log('handleHrefClick - Content container:', contentContainer);
        if (contentContainer) {
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const content = doc.querySelector(containerSelector) || doc.body;
            console.log('handleHrefClick - Extracted content element:', content.tagName);
            contentContainer.innerHTML = content.innerHTML;
            console.log('handleHrefClick - Content container updated - Href:', href);
            const scripts = doc.querySelectorAll('script:not([src])');
            console.log('handleHrefClick - Found inline scripts:', scripts.length);
            scripts.forEach((script, index) => {
                if (script.innerHTML.trim()) {
                    console.log('handleHrefClick - Executing inline script', index + 1);
                    try {
                        new Function(script.innerHTML)();
                        console.log('handleHrefClick - Inline script', index + 1, 'executed successfully');
                    } catch (e) {
                        console.error('handleHrefClick - Error executing inline script', index + 1, 'Error:', e.message);
                    }
                }
            });
            // Re-initialize after content update
            const pageType = href.split('/')[1] || 'login';
            console.log('handleHrefClick - Re-initializing page - Page type:', pageType);
            initialize(pageType);
        } else {
            console.error('handleHrefClick - Content container not found - Selector:', containerSelector);
            toastr.error('Failed to update page content: container missing');
            document.body.innerHTML = html;
            console.log('handleHrefClick - Body updated with full HTML - Href:', href);
            // Re-initialize after full body update
            const pageType = href.split('/')[1] || 'login';
            console.log('handleHrefClick - Re-initializing page after full update - Page type:', pageType);
            initialize(pageType);
        }

        if (typeof onLoad === 'function') {
            console.log('handleHrefClick - Executing onLoad callback - Href:', href);
            onLoad(href, html);
        }
    } catch (error) {
        console.error('handleHrefClick - Error handling href click - Href:', href, 'Error:', error.message);
        toastr.error('Navigation failed: ' + error.message);
    } finally {
        await hideLoadingOverlay();
    }
    console.log('handleHrefClick - Event handling completed');
}

// Initialize on DOM load (fallback, though fetchProtectedPage should handle it)
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOMContentLoaded - Starting initialization');
    const pageType = window.location.pathname.split('/')[1] || 'login';
    console.log('DOMContentLoaded - Determined page type:', pageType);
    initialize(pageType);
});

// Common initialize function handling page-specific setup based on page type.
async function initialize(pageType) {
    console.log('initialize - Starting page initialization - Page type:', pageType);
    
    showLoadingOverlay();

    const pageConfigs = {
        'partner': {
            permissions: ["wixpro", "admin"],
            brandingType: 'partner',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing partner-specific steps');
                attachEventListeners();
                console.log('initialize - Partner-specific steps completed');
            }
        },
        'merchant': {
            permissions: ["merchant", "admin"],
            brandingType: 'merchant',
            initialSection: 'info',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing merchant-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (userId) {
                    console.log('initialize - Setting userId in DOM - ID:', userId);
                    document.getElementById('userId').value = userId;
                } else {
                    console.warn('initialize - No userId found for merchant - Proceeding without setting');
                }                
                attachEventListeners();
                console.log('initialize - Merchant-specific steps completed');
            }
        },
        'community': {
            permissions: ["community", "admin"],
            brandingType: 'community',
            initialSection: 'welcome',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing community-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (!userId) {
                    console.warn('initialize - User ID not found for community - Redirecting to /');
                    toastr.error('User ID not found in session');
                    window.location.href = '/';
                    return;
                }
                console.log('initialize - Setting userId in DOM - ID:', userId);
                document.getElementById('userId').value = userId;
                updateMenu();
                waitForTinyMCE(initializeTinyMCE);
                attachEventListeners();
                console.log('initialize - Community-specific steps completed');
            }
        },
        'admin': {
            permissions: ["admin"],
            brandingType: 'admin',
            initialSection: 'welcome',
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing admin-specific steps');
                attachEventListeners();
                console.log('initialize - Admin-specific steps completed');
            }
        },
        'login': {
            permissions: [],
            brandingType: 'login',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing login-specific steps');
                console.log('initialize - Login-specific steps completed');
            }
        },
        'signup': {
            permissions: [],
            brandingType: 'signup',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing signup-specific steps');
                console.log('initialize - Signup-specific steps completed');
            }
        }
    };

    const config = pageConfigs[pageType];
    if (!config) {
        console.error('initialize - Invalid page type provided - Type:', pageType);
        toastr.error('Invalid page type');
        await hideLoadingOverlay();
        return;
    }
    console.log('initialize - Configuration loaded for page type:', pageType, 'Config:', JSON.stringify(config));

    if (config.permissions && config.permissions.length > 0) {
        console.log('initialize - Performing permission check for:', config.permissions);
        initializePage(config.permissions, async () => {
            console.log('initialize - Permission validated for:', config.permissions);
            await performPageSetup(pageType, config);
            await hideLoadingOverlay();
        });
    } else {
        console.log('initialize - No permissions required for:', pageType);
        await performPageSetup(pageType, config);
        await hideLoadingOverlay();
    }
    console.log('initialize - Initialization process completed for:', pageType);
}

// Attach initialize to the window object to ensure it's globally available
window.initialize = initialize;

js/partner-page.js

// partner-page.js
// Purpose: Manages page-specific functionality for the /partner page.

// Initializes the partner page with permission checks.
function initializePartner() {
    console.log('initializePartner - Initializing partner page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializePartner - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializePartner - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('wixpro') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: WixPro or Admin permission required');
        console.error('initializePartner - No wixpro/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    const userIdInput = document.getElementById('userId');
    if (userIdInput && userId) {
        userIdInput.value = userId;
    } else if (!userId) {
        console.warn('initializePartner - No userId found in localStorage');
    } else {
        console.warn('initializePartner - userId input element not found');
    }

    // Set up navigation and load initial content
    setupNavigation(); // From site-navigation.js
    checkAdminPermission();
    loadBranding('partner', 'brandingContent'); // Adjusted to match typical usage
    showSection('welcome');
    loadPartnerIntegrations(); // Load partner-specific integrations
    attachEventListeners(); // From page-load.js

    // Call shared "Change Password" logic
    if (typeof setupChangePassword === 'function') {
        setupChangePassword(); // From user-management.js
        console.log('initializePartner - Change Password logic initialized');
    } else {
        console.error('initializePartner - setupChangePassword function not found');
    }

    // Hide loading overlay after initialization
    hideLoadingOverlay(); // From page-load.js
    console.log('initializePartner - Partner page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays partner-specific integrations or tests.
async function loadPartnerIntegrations() {
    console.log('loadPartnerIntegrations - Loading partner integrations');
    const userId = document.getElementById('userId') ? document.getElementById('userId').value : '';
    if (!userId) {
        console.error('loadPartnerIntegrations - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadPartnerIntegrations - Fetching integrations - URL:', `${window.apiUrl}/${userId}/integrations`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/integrations`);
        if (!response.ok) throw new Error(`Failed to fetch integrations: ${response.status}`);
        const data = await response.json();
        console.log('loadPartnerIntegrations - Integrations fetched - Data:', JSON.stringify(data));

        const integrationList = document.getElementById('integrationList');
        if (integrationList) {
            integrationList.innerHTML = '';
            data.integrations.forEach(integration => {
                const li = document.createElement('li');
                li.textContent = `${integration.name} - Status: ${integration.status}`;
                integrationList.appendChild(li);
            });
            console.log('loadPartnerIntegrations - Integration list updated - Count:', data.integrations.length);
        } else {
            console.warn('loadPartnerIntegrations - Integration list element not found');
        }
    } catch (error) {
        console.error('loadPartnerIntegrations - Error loading integrations - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading integrations: ${error.message}`);
    }
}

// Export for use in other scripts
window.initializePartner = initializePartner;
window.checkAdminPermission = checkAdminPermission;
window.loadPartnerIntegrations = loadPartnerIntegrations;

js/site-auth.js

// site-auth.js
// Purpose: Manages authentication-related functionality, including password visibility toggling, 
// user logout, JWT token decoding, and password saving for user management.

// Toggles the visibility of a password input field, updating associated icon.
function togglePassword(fieldId) {
    console.log('togglePassword - Initiating visibility toggle - Field ID:', fieldId);
    const input = document.getElementById(fieldId);
    const icon = input ? input.nextElementSibling : null;
    console.log('togglePassword - Input element retrieved:', input, 'Icon element:', icon);

    if (!input) {
        console.error('togglePassword - Password input not found - Field ID:', fieldId);
        return;
    }
    if (!icon) {
        console.error('togglePassword - Icon element not found for input - Field ID:', fieldId);
        return;
    }

    const isPassword = input.type === 'password';
    console.log('togglePassword - Current input type:', input.type);
    if (isPassword) {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
        console.log('togglePassword - Changed to text visibility - Field ID:', fieldId);
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
        console.log('togglePassword - Changed to password visibility - Field ID:', fieldId);
    }
    console.log('togglePassword - Toggle completed - New type:', input.type);
}

// Logs the user out, clearing session data and redirecting to home.
function logOff() {
    console.log('logOff - Initiating logout process');
    const confirmed = confirm('Are you sure you want to log off?');
    console.log('logOff - User confirmation received:', confirmed);

    if (confirmed) {
        console.log('logOff - User confirmed logout - Clearing session data');
        localStorage.removeItem('authToken');
        localStorage.removeItem('userId');
        console.log('logOff - Auth token and userId removed from localStorage - Current localStorage:', JSON.stringify(localStorage));
        toastr.success('Logged off successfully');
        console.log('logOff - Success toast displayed');

        setTimeout(() => {
            console.log('logOff - Redirecting to / after 1-second delay');
            window.location.href = '/';
            console.log('logOff - Redirect executed');
        }, 1000);
    } else {
        console.log('logOff - Logout cancelled by user');
    }
    console.log('logOff - Logout process completed');
}

// Decodes a JWT token to extract user data, such as permissions.
function decodeJWT(token) {
    console.log('decodeJWT - Starting JWT decoding - Input token:', token);
    if (!token || typeof token !== 'string') {
        console.warn('decodeJWT - Invalid token: null or not a string - Token:', token);
        return null;
    }
    if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
        console.warn('decodeJWT - Token does not match JWT format - Token:', token);
        return null;
    }
    console.log('decodeJWT - Token format validated - Proceeding with decode');

    const parts = token.split('.');
    console.log('decodeJWT - Token split into parts:', parts);

    try {
        const base64Url = parts[1];
        console.log('decodeJWT - Extracted base64Url from token:', base64Url);
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        console.log('decodeJWT - Converted to base64:', base64);
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
        console.log('decodeJWT - Decoded JSON payload:', jsonPayload);
        const decoded = JSON.parse(jsonPayload);
        console.log('decodeJWT - Parsed JWT payload:', JSON.stringify(decoded));
        return decoded;
    } catch (error) {
        console.error('decodeJWT - Error decoding JWT - Error:', error.message, 'Stack:', error.stack, 'Token:', token);
        return null;
    }
}

// Saves an updated user password via an authenticated request.
async function savePassword(newPassword) {
    console.log('savePassword - Starting password save - New password length:', newPassword ? newPassword.length : 'None');
    if (!newPassword || typeof newPassword !== 'string') {
        console.error('savePassword - Invalid password provided - Password:', newPassword);
        toastr.error('Invalid password provided');
        return;
    }

    try {
        console.log('savePassword - Sending password update via authenticatedFetch');
        const startTime = Date.now();
        const response = await authenticatedFetch('/update-password', { // Assumes endpoint exists
            method: 'POST',
            body: JSON.stringify({ password: newPassword })
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('savePassword - No response from fetch');
            toastr.error('Failed to save password: No server response');
            return;
        }

        console.log('savePassword - Response received - Status:', response.status, 'Duration:', `${duration}ms`);
        const result = await response.json();
        console.log('savePassword - Save response data:', JSON.stringify(result));

        if (result.status === 'success') {
            console.log('savePassword - Password saved successfully');
            toastr.success('Password updated successfully');
        } else {
            console.error('savePassword - Server reported failure - Message:', result.message);
            toastr.error(result.message || 'Failed to save password');
        }
    } catch (error) {
        console.error('savePassword - Error saving password - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to save password: ' + error.message);
    }
    console.log('savePassword - Password save process completed');
}

js/site-navigation.js

// site-navigation.js
// Purpose: Handles navigation, content loading, branding, and section/submenu management across the site.

// Check if window.apiUrl is defined, throw an error if not
if (!window.apiUrl) {
    console.error('site-navigation.js - window.apiUrl is not defined. Please set window.apiUrl before loading this script.');
    throw new Error('window.apiUrl is not defined');
}
console.log('site-navigation.js - Using apiUrl:', window.apiUrl);

// Performs authenticated fetch requests for protected resources
async function authenticatedFetch(url, options = {}) {
    console.log('authenticatedFetch - Initiating fetch - URL:', url);
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.warn('authenticatedFetch - No authentication token found - Redirecting to /');
        toastr.error('No authentication token found. Please log in.');
        window.location.href = '/';
        return null;
    }
    const headers = {
        ...options.headers,
        'Authorization': `Bearer ${token}`,
        'Content-Type': options.body instanceof FormData ? undefined : 'application/json'
    };
    const fetchUrl = `${url}${url.includes('?') ? '&' : '?'}t=${Date.now()}`;
    try {
        const response = await fetch(fetchUrl, { ...options, headers });
        if (!response.ok) {
            const errorText = await response.text();
            console.error('authenticatedFetch - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Server returned ${response.status}: ${errorText}`);
        }
        if (response.status === 401) {
            console.warn('authenticatedFetch - Unauthorized response (401) - Clearing token and redirecting to /');
            toastr.error('Session expired. Please log in again.');
            localStorage.removeItem('authToken');
            localStorage.removeItem('userId');
            window.location.href = '/';
            return null;
        }
        return response;
    } catch (error) {
        console.error('authenticatedFetch - Error during fetch:', error.message);
        toastr.error(error.message || 'Failed to connect to server');
        return null;
    }
}

// Fetches protected page content for navigation
async function fetchProtectedPage(url, targetContainer = null) {
    const token = localStorage.getItem('authToken');
    if (!token) {
        toastr.error('No authentication token found. Please log in.');
        showLogin(); // Assumes showLogin is defined elsewhere
        return;
    }
    const overlay = showLoadingOverlay(); // Assumes showLoadingOverlay is defined
    try {
        const response = await authenticatedFetch(`${window.apiUrl}${url}`, {
            method: 'GET',
            headers: { 'Accept': 'text/html' }
        });
        if (!response) throw new Error('No response from server');
        const html = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(html, 'text/html');
        const scripts = doc.querySelectorAll('script');
        scripts.forEach(script => script.remove());

        if (targetContainer) {
            const container = document.querySelector(targetContainer);
            if (!container) throw new Error(`Target container not found: ${targetContainer}`);
            const newContent = doc.querySelector('.content-wrapper') || doc.body;
            container.innerHTML = newContent.innerHTML;

            await Promise.all([...scripts].map(script => {
                if (script.src) {
                    return new Promise(resolve => {
                        const newScript = document.createElement('script');
                        newScript.src = script.src;
                        newScript.async = false;
                        newScript.onload = resolve;
                        newScript.onerror = () => console.error(`Failed to load script: ${script.src}`);
                        document.head.appendChild(newScript);
                    });
                } else if (script.innerHTML.trim()) {
                    new Function(script.innerHTML)();
                }
            }));

            if (typeof window.initialize === 'function') {
                const pageType = url.split('/')[1] || 'admin';
                window.initialize(pageType);
            }
            initializeNavigation();
            setTimeout(() => hideLoadingOverlay(), 500); // Assumes hideLoadingOverlay is defined
            return html;
        } else {
            document.documentElement.innerHTML = doc.documentElement.innerHTML;
            setTimeout(() => hideLoadingOverlay(), 1000);
            return html;
        }
    } catch (error) {
        console.error('fetchProtectedPage - Error:', error);
        toastr.error(error.message || 'Failed to load protected page');
        hideLoadingOverlay();
    }
}

// Loads page-specific branding content
async function loadBranding(brandingType, containerId = 'brandingContent') {
    console.log('loadBranding - Starting branding load - Type:', brandingType, 'Container ID:', containerId);
    const defaultContents = {
        'partner': '<h1>Partner Dashboard</h1>',
        'merchant': '<h1>Merchant Dashboard</h1>',
        'community': '<h1>Community Dashboard</h1>',
        'admin': '<h1>Admin Dashboard</h1>',
        'login': '<h1>Login</h1>',
        'signup': '<h1>Signup</h1>'
    };
    const defaultContent = defaultContents[brandingType] || '<h1>Dashboard</h1>';
    const container = document.getElementById(containerId);
    if (!container) {
        console.error('loadBranding - Container not found - ID:', containerId);
        return;
    }
    try {
        const response = await authenticatedFetch(`${window.apiUrl}/branding?type=${encodeURIComponent(brandingType)}`);
        if (!response) {
            container.innerHTML = defaultContent;
            return;
        }
        const data = await response.json();
        if (data.status === 'success' && data.branding) {
            container.innerHTML = data.branding;
        } else {
            container.innerHTML = defaultContent;
        }
    } catch (error) {
        console.error('loadBranding - Error:', error.message);
        toastr.error(`Error loading ${brandingType} branding: ${error.message}`);
        container.innerHTML = defaultContent;
    }
}

// Loads content for a specific section
async function loadSection(sectionId) {
    console.log('loadSection - Starting section load - Section ID:', sectionId);
    // Example stub; expand with actual logic from your app
    if (sectionId === 'deal_listings') {
        await loadCategories(); // Assumes loadCategories is defined elsewhere
    } else if (sectionId === 'merchants') {
        await loadMerchants(); // Assumes loadMerchants is defined elsewhere
    } else {
        try {
            const response = await authenticatedFetch(`${window.apiUrl}/config`);
            if (!response) throw new Error('No response from fetch');
            const data = await response.json();
            const config = data.config[sectionId] || {};
            // Populate section-specific fields (stubbed example)
            const el = document.getElementById(`${sectionId}Field`);
            if (el) el.value = config.value || '';
        } catch (error) {
            console.error('loadSection - Error:', error.message);
            toastr.error(`Error loading ${sectionId}: ${error.message}`);
        }
    }
}

// Function to show a section and hide others
function showSection(sectionId, onSectionLoad = null) {
    console.log('showSection - Starting section display - Section ID:', sectionId);
    const allSections = document.querySelectorAll('.section');
    allSections.forEach(s => {
        s.classList.remove('active');
        s.style.display = 'none';
    });
    const section = document.getElementById(sectionId);
    if (section) {
        section.style.display = 'block';
        section.classList.add('active');
        if (typeof onSectionLoad === 'function') {
            console.log('showSection - Executing callback for:', sectionId);
            onSectionLoad(sectionId);
        } else {
            loadSection(sectionId); // Default to loadSection if no callback
        }
    } else {
        console.error('showSection - Section not found - ID:', sectionId);
    }
}

// Function to toggle a submenu
function toggleSubmenu(submenuId) {
    console.log(`toggleSubmenu - Starting toggle - Submenu ID: ${submenuId}`);
    const submenu = document.getElementById(submenuId);
    const button = document.querySelector(`button[data-submenu="${submenuId}"]`);
    const caret = button ? button.querySelector('.caret') : null;
    if (submenu && button && caret) {
        const isOpen = submenu.classList.contains('open'); // Use class as source of truth
        submenu.classList.toggle('open', !isOpen);
        submenu.style.display = isOpen ? 'none' : 'block'; // Sync display with class
        caret.classList.toggle('fa-caret-down', !isOpen);
        caret.classList.toggle('fa-caret-right', isOpen);
        button.setAttribute('aria-expanded', !isOpen);
        console.log(`toggleSubmenu - Submenu ${submenuId} set to ${isOpen ? 'closed' : 'open'}`, {
            display: submenu.style.display,
            className: submenu.className
        });
    } else {
        console.error(`toggleSubmenu - Submenu or button not found - Submenu ID: ${submenuId}`);
    }
}

// Function to handle clicks on navigation buttons
function handleSectionClick(event) {
    const target = event.target.closest('button[data-section], button[data-submenu]');
    if (!target) return;
    event.stopPropagation();
    event.preventDefault();
    const sectionId = target.getAttribute('data-section');
    const submenuId = target.getAttribute('data-submenu');
    console.log('handleSectionClick - Clicked:', { sectionId, submenuId });

    // Debug: Log all top-level submenu buttons
    const topLevelButtons = document.querySelectorAll('.menu > button[data-submenu]');
    console.log('handleSectionClick - Found top-level submenu buttons:', topLevelButtons.length);
    topLevelButtons.forEach(button => {
        const otherSubmenuId = button.getAttribute('data-submenu');
        console.log(`handleSectionClick - Top-level button: ${otherSubmenuId}`);
    });

    // Close all other top-level submenus
    topLevelButtons.forEach(button => {
        const otherSubmenuId = button.getAttribute('data-submenu');
        if (submenuId && otherSubmenuId === submenuId) return;
        const otherSubmenu = document.getElementById(otherSubmenuId);
        if (otherSubmenu && otherSubmenu.classList.contains('open')) {
            console.log(`handleSectionClick - Closing other submenu: ${otherSubmenuId}`);
            toggleSubmenu(otherSubmenuId);
        }
    });

    if (submenuId === 'my-account-submenu') {
        showSection('my-account');
        toggleSubmenu(submenuId);
    } else if (submenuId) {
        toggleSubmenu(submenuId);
        if (sectionId) showSection(sectionId);
    } else if (sectionId) {
        showSection(sectionId);
    }
}

// Ensure toggleSubmenu uses class-based visibility for CSS control
function toggleSubmenu(submenuId) {
    console.log(`toggleSubmenu - Starting toggle - Submenu ID: ${submenuId}`);
    const submenu = document.getElementById(submenuId);
    const button = document.querySelector(`button[data-submenu="${submenuId}"]`);
    const caret = button ? button.querySelector('.caret') : null;
    if (submenu && button && caret) {
        const isOpen = submenu.classList.contains('open'); // Use class as source of truth
        submenu.classList.toggle('open', !isOpen);
        submenu.style.display = isOpen ? 'none' : 'block'; // Sync display with class
        caret.classList.toggle('fa-caret-down', !isOpen);
        caret.classList.toggle('fa-caret-right', isOpen);
        button.setAttribute('aria-expanded', !isOpen);
        const computedStyle = window.getComputedStyle(submenu);
        console.log(`toggleSubmenu - Submenu ${submenuId} set to ${isOpen ? 'closed' : 'open'}`, {
            inlineDisplay: submenu.style.display,
            computedDisplay: computedStyle.display,
            height: computedStyle.height,
            maxHeight: computedStyle.maxHeight,
            className: submenu.className
        });
    } else {
        console.error(`toggleSubmenu - Submenu or button not found - Submenu ID: ${submenuId}`);
    }
}

// Main function to initialize navigation
function initializeNavigation() {
    console.log('initializeNavigation - Starting navigation setup');
    document.querySelectorAll('.submenu').forEach(submenu => {
        submenu.style.display = 'none';
        submenu.classList.remove('open');
        const submenuId = submenu.id;
        const button = document.querySelector(`button[data-submenu="${submenuId}"]`);
        if (button) {
            button.setAttribute('aria-expanded', 'false');
            const caret = button.querySelector('.caret');
            if (caret) {
                caret.classList.remove('fa-caret-down');
                caret.classList.add('fa-caret-right');
            }
        }
    });
    document.querySelectorAll('.menu button[data-section], .menu button[data-submenu]').forEach(button => {
        button.addEventListener('click', handleSectionClick);
        console.log('initializeNavigation - Added click listener to button:', button.dataset.section || button.dataset.submenu);
    });

    document.querySelectorAll('button[data-href]').forEach(button => {
        button.addEventListener('click', async (e) => {
            e.preventDefault();
            e.stopPropagation();
            const href = button.getAttribute('data-href');
            await fetchProtectedPage(href, '.content-wrapper');
            const pageType = href.split('/')[1] || 'admin';
            await loadBranding(pageType);
        });
    });
}

// Export navigation functions under a namespace
window.siteNavigation = {
    showSection,
    toggleSubmenu,
    initializeNavigation,
    authenticatedFetch,
    fetchProtectedPage,
    loadBranding,
    loadSection
};

// Initialize navigation based on document readiness
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        console.log('DOMContentLoaded - Initializing navigation');
        initializeNavigation();
    });
} else {
    console.log('Document already loaded - Initializing navigation immediately');
    initializeNavigation();
}

js/site-request.js

// site-request.js
// Purpose: Manages site request functionality for merchants and communities using the consolidated siterequest.inc template,
// including page/email management, domain handling, and TinyMCE integration.

// Adds a page to the site request form based on user type (merchant/community).
function addPage(type) {
    console.log('addPage - Adding page to site request - Type:', type);
    const maxPages = 5;
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('addPage - Current page count:', pageCount);

    if (pageCount >= maxPages) {
        console.warn('addPage - Maximum pages reached - Max:', maxPages);
        toastr.error(`Maximum of ${maxPages} pages allowed`);
        return;
    }

    pageCount++;
    console.log('addPage - Incrementing page count to:', pageCount);
    localStorage.setItem(`${type}PageCount`, pageCount);

    const container = document.getElementById('pagesContainer');
    console.log('addPage - Pages container:', container);
    if (!container) {
        console.error('addPage - Pages container not found');
        return;
    }

    const pageDiv = document.createElement('div');
    pageDiv.className = 'page-section';
    pageDiv.dataset.page = pageCount;
    const isMerchantDefault = type === 'merchant' && pageCount <= 2;
    const pageName = isMerchantDefault ? (pageCount === 1 ? 'Home' : 'Returns Policy') : '';
    pageDiv.innerHTML = `
        <label for="page${pageCount}Name">Page Name:</label>
        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${pageName}" ${isMerchantDefault ? 'readonly' : ''} placeholder="e.g., ${type === 'merchant' ? 'Products' : 'Events'}">
        <br><br>
        <label for="page${pageCount}Content">${isMerchantDefault ? (pageCount === 1 ? 'Home Page' : 'Returns Policy') : 'Page'} Content:</label>
        <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
        <label for="page${pageCount}Images">Additional Images:</label>
        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
        ${pageCount > (type === 'merchant' ? 2 : 1) ? `<button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>` : ''}
    `;
    container.appendChild(pageDiv);
    console.log('addPage - New page section added - Page number:', pageCount);

    tinymce.remove(`#page${pageCount}Content`);
    initializeTinyMCE(`#page${pageCount}Content`);
    console.log('addPage - TinyMCE initialized for new page');
    console.log('addPage - Page addition completed');
}

// Removes a page from the site request form based on user type (merchant/community).
function removePage(pageNum, type) {
    console.log('removePage - Removing page - Page number:', pageNum, 'Type:', type);
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('removePage - Current page count:', pageCount);
    const minPages = type === 'merchant' ? 2 : 1;

    if (pageCount <= minPages) {
        console.warn('removePage - Cannot remove below minimum pages - Min:', minPages);
        toastr.error(`Cannot remove the last ${type === 'merchant' ? 'Home or Returns Policy' : ''} page${minPages > 1 ? 's' : ''}`);
        return;
    }

    const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
    console.log('removePage - Page section to remove:', pageSection);
    if (pageSection) {
        tinymce.get(`page${pageNum}Content`)?.remove();
        console.log('removePage - Removed TinyMCE instance for page:', pageNum);
        pageSection.remove();
        pageCount--;
        localStorage.setItem(`${type}PageCount`, pageCount);
        console.log('removePage - Page removed, new page count:', pageCount);
    } else {
        console.error('removePage - Page section not found - Page number:', pageNum);
    }
    console.log('removePage - Removal completed');
}

// Adds an email to the site request form.
function addEmail(type) {
    console.log('addEmail - Adding email to site request - Type:', type);
    const maxEmails = 5;
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('addEmail - Current email count:', emailCount);

    if (emailCount >= maxEmails) {
        console.warn('addEmail - Maximum emails reached - Max:', maxEmails);
        toastr.error(`Maximum of ${maxEmails} email addresses allowed`);
        return;
    }

    emailCount++;
    console.log('addEmail - Incrementing email count to:', emailCount);
    localStorage.setItem(`${type}EmailCount`, emailCount);

    const container = document.getElementById('emailsContainer');
    console.log('addEmail - Emails container:', container);
    if (!container) {
        console.error('addEmail - Emails container not found');
        return;
    }

    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('addEmail - Using domain:', domain);
    const emailDiv = document.createElement('div');
    emailDiv.className = 'email-section';
    emailDiv.dataset.email = emailCount;
    emailDiv.innerHTML = `
        <label for="email${emailCount}Name">Email Name:</label>
        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
        <span id="email${emailCount}Domain">@${domain}</span>
        <button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>
    `;
    container.appendChild(emailDiv);
    console.log('addEmail - New email section added - Email number:', emailCount);

    updateDomainPreview(type);
    console.log('addEmail - Email addition completed');
}

// Removes an email from the site request form.
function removeEmail(emailNum, type) {
    console.log('removeEmail - Removing email - Email number:', emailNum, 'Type:', type);
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('removeEmail - Current email count:', emailCount);

    if (emailCount <= 1) {
        console.warn('removeEmail - Cannot remove the last email');
        toastr.error('Cannot remove the last email');
        return;
    }

    const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
    console.log('removeEmail - Email section to remove:', emailSection);
    if (emailSection) {
        emailSection.remove();
        emailCount--;
        localStorage.setItem(`${type}EmailCount`, emailCount);
        console.log('removeEmail - Email removed, new email count:', emailCount);
        updateDomainPreview(type);
    } else {
        console.error('removeEmail - Email section not found - Email number:', emailNum);
    }
    console.log('removeEmail - Removal completed');
}

// Updates the domain preview and email domain spans for the site request.
function updateDomainPreview(type) {
    console.log('updateDomainPreview - Updating domain preview - Type:', type);
    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('updateDomainPreview - Domain value:', domain);

    const previewElement = document.getElementById('domainPreview');
    if (previewElement) {
        previewElement.textContent = `@${domain}`;
        console.log('updateDomainPreview - Updated domain preview to:', `@${domain}`);
    }

    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('updateDomainPreview - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const domainSpan = document.getElementById(`email${i}Domain`);
        console.log('updateDomainPreview - Checking domain span - ID:', `email${i}Domain`, 'Element:', domainSpan);
        if (domainSpan) {
            domainSpan.textContent = `@${domain}`;
            console.log('updateDomainPreview - Updated email domain - ID:', `email${i}Domain`, 'to:', `@${domain}`);
        }
    }
    console.log('updateDomainPreview - Update completed');
}

// Checks domain availability for the site request.
async function checkDomainAvailability() {
    console.log('checkDomainAvailability - Starting domain availability check');
    const domainInput = document.getElementById('preferredDomain');
    const domain = domainInput?.value;
    console.log('checkDomainAvailability - Domain to check:', domain);

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domain) {
        console.warn('checkDomainAvailability - No domain provided');
        toastr.error('Please enter a preferred domain name');
        return false;
    }
    if (!domainRegex.test(domain)) {
        console.warn('checkDomainAvailability - Invalid domain format - Domain:', domain);
        toastr.error('Invalid domain name (e.g., mystore.uk)');
        return false;
    }

    console.log('checkDomainAvailability - Domain format valid, proceeding with check');
    toastr.info(`Checking availability for ${domain}...`);

    try {
        const startTime = Date.now();
        const response = await fetch(`https://clubmadeira.io/check-domain?domain=${encodeURIComponent(domain)}`, {
            method: 'GET',
            credentials: 'same-origin'
        });
        const duration = Date.now() - startTime;
        console.log('checkDomainAvailability - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('checkDomainAvailability - Fetch failed - Status:', response.status, 'Error text:', errorText);
            if (response.status === 403) {
                throw new Error('Permission denied - please log in');
            }
            throw new Error(`Server error: ${errorText}`);
        }

        const result = await response.json();
        console.log('checkDomainAvailability - Availability result:', JSON.stringify(result));
        if (result.available) {
            console.log('checkDomainAvailability - Domain available:', domain);
            toastr.success(`${result.domain} is available!`);
            return true;
        } else {
            console.warn('checkDomainAvailability - Domain not available:', domain);
            toastr.error(`${result.domain} is not available`);
            if (domainInput) domainInput.value = '';
            return false;
        }
    } catch (error) {
        console.error('checkDomainAvailability - Error checking domain - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to check domain availability: ${error.message}`);
        return false;
    }
}

// Loads TinyMCE editor for site request content editing.
async function loadTinyMCE() {
    console.log('loadTinyMCE - Starting TinyMCE load');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('loadTinyMCE - TinyMCE already loaded');
        initializeTinyMCE();
        return;
    }

    console.log('loadTinyMCE - Loading TinyMCE script');
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js';
        script.referrerpolicy = 'origin';
        document.head.appendChild(script);
        console.log('loadTinyMCE - Script element added to head:', script.src);

        script.onload = () => {
            console.log('loadTinyMCE - TinyMCE script loaded successfully');
            initializeTinyMCE();
            resolve();
        };
        script.onerror = () => {
            console.error('loadTinyMCE - Failed to load TinyMCE script');
            toastr.error('Failed to load rich text editor');
            reject(new Error('TinyMCE load failed'));
        };
    });
}

// Initializes TinyMCE editor for site request content editing with a specific selector.
function initializeTinyMCE(selector = 'textarea[name$="Content"], #about') {
    console.log('initializeTinyMCE - Starting TinyMCE initialization - Selector:', selector);
    if (!window.tinymce) {
        console.error('initializeTinyMCE - TinyMCE not available');
        return;
    }

    tinymce.remove(selector);
    console.log('initializeTinyMCE - Removed existing TinyMCE instances for selector:', selector);

    tinymce.init({
        selector: selector,
        height: 200,
        menubar: false,
        plugins: 'lists',
        toolbar: 'bold italic | bullist numlist',
        setup: editor => {
            editor.on('init', () => {
                console.log('initializeTinyMCE - TinyMCE editor initialized for:', editor.id);
            });
        }
    });
    console.log('initializeTinyMCE - TinyMCE initialization completed');
}

// Generates a formatted timestamp for site request forms.
function getCurrentTimestamp() {
    console.log('getCurrentTimestamp - Generating current timestamp');
    const now = new Date();
    console.log('getCurrentTimestamp - Current date object:', now);
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    console.log('getCurrentTimestamp - Extracted components - Year:', year, 'Month:', month, 'Day:', day, 'Hours:', hours, 'Minutes:', minutes, 'Seconds:', seconds);
    const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    console.log('getCurrentTimestamp - Generated timestamp:', timestamp);
    return timestamp;
}

// Saves the site request form data for either a merchant store or community site.
async function saveSiteRequest() {
    console.log('saveSiteRequest - Starting site request save');
    const userId = document.getElementById('userId')?.value || localStorage.getItem('userId');
    const userType = document.getElementById('userType')?.value;
    console.log('saveSiteRequest - Retrieved userId:', userId, 'userType:', userType);

    if (!userId) {
        console.error('saveSiteRequest - User ID not found in session or DOM');
        toastr.error('User ID not found in session');
        return;
    }

    if (!userType) {
        console.error('saveSiteRequest - User type not found in form');
        toastr.error('User type not specified');
        return;
    }

    const defaultDomain = userType === 'merchant' ? 'mystore.uk' : 'mycommunity.org';
    const siteRequest = {
        userId: userId,
        type: userType,
        name: document.getElementById('name')?.value.trim() || '',
        about: tinymce.get('about')?.getContent() || document.getElementById('about')?.value || '',
        logos: [],
        colorPrefs: document.getElementById('colorPrefs')?.value.trim() || '',
        stylingDetails: document.getElementById('stylingDetails')?.value.trim() || '',
        preferredDomain: document.getElementById('preferredDomain')?.value.trim() || defaultDomain,
        emails: [],
        pages: [],
        widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
    };
    console.log('saveSiteRequest - Initial site request object:', JSON.stringify(siteRequest));

    // Validation
    if (!siteRequest.name) {
        console.warn('saveSiteRequest - Name field is empty');
        toastr.error(`${userType === 'merchant' ? 'Store' : 'Community'} name is required`);
        return;
    }

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(siteRequest.preferredDomain)) {
        console.warn('saveSiteRequest - Invalid domain format - Domain:', siteRequest.preferredDomain);
        toastr.error(`Invalid domain name (e.g., ${defaultDomain})`);
        return;
    }

    // Handle logos
    const logoFiles = document.getElementById('logos')?.files || [];
    console.log('saveSiteRequest - Logo files count:', logoFiles.length);
    if (logoFiles.length > 5) {
        console.warn('saveSiteRequest - Too many logos - Count:', logoFiles.length);
        toastr.error('Maximum of 5 logos allowed');
        return;
    }
    for (let i = 0; i < logoFiles.length; i++) {
        const reader = new FileReader();
        await new Promise(resolve => {
            reader.onload = () => {
                siteRequest.logos.push(reader.result);
                console.log('saveSiteRequest - Added logo - Index:', i, 'Result length:', reader.result.length);
                resolve();
            };
            reader.readAsDataURL(logoFiles[i]);
        });
    }

    // Collect emails
    let emailCount = parseInt(localStorage.getItem(`${userType}EmailCount`) || 1);
    console.log('saveSiteRequest - Collecting emails - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const emailInput = document.getElementById(`email${i}Name`);
        if (emailInput && emailInput.value.trim()) {
            siteRequest.emails.push(emailInput.value.trim());
            console.log('saveSiteRequest - Added email - Index:', i, 'Value:', emailInput.value.trim());
        }
    }

    // Collect pages
    let pageCount = parseInt(localStorage.getItem(`${userType}PageCount`) || (userType === 'merchant' ? 2 : 1));
    console.log('saveSiteRequest - Collecting pages - Page count:', pageCount);
    for (let i = 1; i <= pageCount; i++) {
        const nameInput = document.getElementById(`page${i}Name`);
        const contentEditor = tinymce.get(`page${i}Content`);
        const contentFallback = document.getElementById(`page${i}Content`);
        const imagesInput = document.getElementById(`page${i}Images`);
        if (nameInput && nameInput.value.trim()) {
            const page = {
                name: nameInput.value.trim(),
                content: contentEditor ? contentEditor.getContent() : (contentFallback?.value || ''),
                images: []
            };
            console.log('saveSiteRequest - Processing page - Index:', i, 'Name:', page.name);

            if (imagesInput && imagesInput.files.length > 0) {
                for (let j = 0; j < imagesInput.files.length; j++) {
                    const reader = new FileReader();
                    await new Promise(resolve => {
                        reader.onload = () => {
                            page.images.push(reader.result);
                            console.log('saveSiteRequest - Added image to page - Page:', i, 'Image index:', j, 'Result length:', reader.result.length);
                            resolve();
                        };
                        reader.readAsDataURL(imagesInput.files[j]);
                    });
                }
            }
            siteRequest.pages.push(page);
        }
    }

    const minPages = userType === 'merchant' ? 2 : 1;
    if (siteRequest.pages.length < minPages || (userType === 'merchant' && (!siteRequest.pages.some(p => p.name === 'Home') || !siteRequest.pages.some(p => p.name === 'Returns Policy')))) {
        console.warn('saveSiteRequest - Insufficient or missing required pages - Pages:', siteRequest.pages.length, 'Required:', minPages);
        toastr.error(userType === 'merchant' ? 'Home and Returns Policy pages are required' : 'At least one page is required');
        return;
    }

    // Save to server
    try {
        console.log('saveSiteRequest - Sending site request to server - URL:', `${apiUrl}/${userId}/siterequest`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`, {
            method: 'POST',
            body: JSON.stringify(siteRequest)
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('saveSiteRequest - No response from fetch');
            toastr.error('Failed to save site request: No server response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSiteRequest - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to save site request: ${response.status} - ${errorText}`);
        }

        console.log('saveSiteRequest - Save successful - Duration:', `${duration}ms`);
        toastr.success(`${userType === 'merchant' ? 'Store' : 'Site'} request saved successfully`);
    } catch (error) {
        console.error('saveSiteRequest - Error saving site request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error saving ${userType === 'merchant' ? 'store' : 'site'} request: ${error.message}`);
    }
    console.log('saveSiteRequest - Save process completed');
}

js/user-management.js

// user-management.js
// Purpose: Manages user-specific settings, Wix client ID operations, and shared "Change Password" logic.

// Loads user settings into the DOM.
async function loadSettings() {
    console.log('loadSettings - Starting settings load');
    const userId = localStorage.getItem('userId');
    console.log('loadSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadSettings - Fetching settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch settings: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSettings - Settings fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with settings
        const referrerId = document.getElementById('referrerId');
        const contactName = document.getElementById('contactName');
        const websiteUrl = document.getElementById('websiteUrl');
        const emailAddress = document.getElementById('emailAddress');
        const phoneNumber = document.getElementById('phoneNumber');

        if (referrerId) referrerId.textContent = userId;
        if (contactName) contactName.value = data.contact_name || '';
        if (websiteUrl) websiteUrl.value = data.website_url || '';
        if (emailAddress) emailAddress.value = data.email_address || '';
        if (phoneNumber) phoneNumber.value = data.phone_number || '';

        console.log('loadSettings - DOM updated - Fields:', {
            referrerId: userId,
            contactName: data.contact_name || '',
            websiteUrl: data.website_url || '',
            emailAddress: data.email_address || '',
            phoneNumber: data.phone_number || ''
        });
    } catch (error) {
        console.error('loadSettings - Error loading settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading settings: ${error.message}`);
    }
    console.log('loadSettings - Settings load completed');
}

// Saves user settings from the DOM.
async function saveSettings(settings) {
    console.log('saveSettings - Starting settings save - Settings:', JSON.stringify(settings));
    const userId = localStorage.getItem('userId');
    console.log('saveSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveSettings - Sending settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`, {
            method: 'PUT',
            body: JSON.stringify(settings)
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save settings: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveSettings - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Settings saved successfully');
    } catch (error) {
        console.error('saveSettings - Error saving settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save settings: ${error.message}`);
    }
    console.log('saveSettings - Save process completed');
}

// Loads Wix client ID into the DOM.
async function loadWixClientId() {
    console.log('loadWixClientId - Starting Wix client ID load');
    const userId = localStorage.getItem('userId');
    console.log('loadWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadWixClientId - Fetching Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch Wix client ID: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadWixClientId - Wix client ID fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with Wix client ID
        const wixClientIdField = document.getElementById('wixClientId');
        if (wixClientIdField) {
            wixClientIdField.value = data.client_id || data.clientId || '';
            console.log('loadWixClientId - DOM updated - wixClientId:', data.client_id || data.clientId || '');
        } else {
            console.warn('loadWixClientId - Wix client ID field not found - ID: wixClientId');
        }
    } catch (error) {
        console.error('loadWixClientId - Error loading Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading Wix client ID: ${error.message}`);
    }
    console.log('loadWixClientId - Wix client ID load completed');
}

// Saves Wix client ID from the DOM.
async function saveWixClientId(clientId) {
    console.log('saveWixClientId - Starting Wix client ID save - Client ID:', clientId);
    const userId = localStorage.getItem('userId');
    console.log('saveWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveWixClientId - Sending Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`, {
            method: 'POST',
            body: JSON.stringify({ clientId })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save Wix client ID: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveWixClientId - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Wix client ID saved successfully');
    } catch (error) {
        console.error('saveWixClientId - Error saving Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save Wix client ID: ${error.message}`);
    }
    console.log('saveWixClientId - Save process completed');
}

// Validates password complexity
function validatePassword(password) {
    console.log('validatePassword - Validating password');
    const minLength = 8;
    const hasUpperCase = /[A-Z]/.test(password);
    const hasLowerCase = /[a-z]/.test(password);
    const hasNumber = /\d/.test(password);
    const hasSpecialChar = /[!@#$%^&*(),.?":{}|<>]/.test(password);

    if (password.length < minLength) {
        toastr.error('Password must be at least 8 characters long.');
        console.log('validatePassword - Failed: Length < 8');
        return false;
    }
    if (!hasUpperCase) {
        toastr.error('Password must contain at least one uppercase letter.');
        console.log('validatePassword - Failed: No uppercase');
        return false;
    }
    if (!hasLowerCase) {
        toastr.error('Password must contain at least one lowercase letter.');
        console.log('validatePassword - Failed: No lowercase');
        return false;
    }
    if (!hasNumber) {
        toastr.error('Password must contain at least one number.');
        console.log('validatePassword - Failed: No number');
        return false;
    }
    if (!hasSpecialChar) {
        toastr.error('Password must contain at least one special character.');
        console.log('validatePassword - Failed: No special character');
        return false;
    }
    console.log('validatePassword - Password valid');
    return true;
}

// Sets up the "Change Password" form submission logic
function setupChangePassword() {
    console.log('setupChangePassword - Setting up change password logic');
    const changePasswordButton = document.querySelector('button[data-action="savePassword"]');
    if (!changePasswordButton) {
        console.warn('setupChangePassword - Change password button not found');
        return;
    }

    changePasswordButton.addEventListener('click', async () => {
        console.log('setupChangePassword - Change password button clicked');
        const currentPasswordInput = document.getElementById('currentPassword');
        const newPasswordInput = document.getElementById('newPassword');
        const confirmPasswordInput = document.getElementById('confirmPassword');

        // Validate input elements exist
        if (!currentPasswordInput || !newPasswordInput || !confirmPasswordInput) {
            toastr.error('Password fields are missing on this page.');
            console.error('setupChangePassword - One or more password input elements not found');
            return;
        }

        const currentPassword = currentPasswordInput.value.trim();
        const newPassword = newPasswordInput.value.trim();
        const confirmPassword = confirmPasswordInput.value.trim();

        // Check for empty fields
        if (!currentPassword || !newPassword || !confirmPassword) {
            toastr.error('All password fields are required.');
            console.log('setupChangePassword - Empty password field detected');
            return;
        }

        // Check password match
        if (newPassword !== confirmPassword) {
            toastr.error('New password and confirmation do not match.');
            console.log('setupChangePassword - Passwords do not match');
            return;
        }

        // Validate password complexity
        if (!validatePassword(newPassword)) {
            console.log('setupChangePassword - Password complexity validation failed');
            return;
        }

        // Submit password change request
        try {
            console.log('setupChangePassword - Submitting password change request');
            const token = localStorage.getItem('authToken');
            if (!token) {
                throw new Error('No authentication token found');
            }

            const response = await authenticatedFetch(`${window.apiUrl}/update-password`, {
                method: 'POST',
                body: JSON.stringify({
                    current_password: currentPassword,
                    new_password: newPassword
                })
            });

            if (!response.ok) {
                const errorData = await response.json();
                throw new Error(errorData.message || `Failed to update password: ${response.status}`);
            }

            const data = await response.json();
            console.log('setupChangePassword - Password updated successfully:', data);
            toastr.success('Password updated successfully!');
            // Clear form fields after success
            currentPasswordInput.value = '';
            newPasswordInput.value = '';
            confirmPasswordInput.value = '';
        } catch (error) {
            console.error('setupChangePassword - Error updating password:', error.message);
            toastr.error(error.message || 'An error occurred while updating the password.');
        }
    });
    console.log('setupChangePassword - Event listener attached');
}

// Export for use in other scripts
window.loadSettings = loadSettings;
window.saveSettings = saveSettings;
window.loadWixClientId = loadWixClientId;
window.saveWixClientId = saveWixClientId;
window.validatePassword = validatePassword;
window.setupChangePassword = setupChangePassword;

old/admin copy.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Admin</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            display: block;
        }
        .header { 
            height: 150px; 
            width: 100%;
            background-color: #f4f4f4; 
            margin-bottom: 25px; 
            overflow: hidden;
            position: relative;
            display: block;
        }
        .header-content { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .main-container { 
            max-width: 1200px; 
            margin: 0 auto; 
            display: flex; 
            gap: 20px; 
        }
        .menu-container { 
            flex: 1; 
            max-width: 300px; 
        }
        .content-container { 
            flex: 2; 
        }
        .menu { 
            margin-bottom: 20px; 
            text-align: left; 
        }
        .menu button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            text-align: left; 
            width: 100%; 
            margin-bottom: 5px; 
            display: block; 
        }
        .menu button:hover { 
            background-color: #0056b3; 
        }
        .submenu { 
            display: none; 
            padding-left: 20px; 
        }
        .submenu.open { 
            display: block; 
        }
        .section { 
            display: none; 
        }
        .section.active { 
            display: block; 
        }
        .form { 
            display: flex; 
            flex-direction: column; 
            gap: 10px; 
            max-width: 400px; 
        }
        .form label { 
            font-weight: bold; 
        }
        .form input, .form select { 
            padding: 5px; 
        }
        .form button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            cursor: pointer; 
        }
        .form button:hover { 
            background-color: #0056b3; 
        }
        .signup-instructions { 
            margin-top: 15px; 
            font-size: 0.9em; 
            color: #555; 
        }
        .signup-instructions a { 
            color: #007BFF; 
            text-decoration: none; 
        }
        .signup-instructions a:hover { 
            text-decoration: underline; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 8px; 
            text-align: left; 
        }
        .deals-table th { 
            background-color: #f2f2f2; 
        }
        .treeview { 
            max-height: 600px; 
            overflow-y: auto; 
            margin-bottom: 10px; 
        }
        .treeview, .treeview ul, .treeview li { 
            list-style-type: none; 
            padding: 0; 
            margin: 0; 
        }
        .treeview .node { 
            display: flex; 
            align-items: center; 
        }
        .treeview .toggle { 
            cursor: pointer; 
            width: 20px; 
            text-align: center; 
            font-weight: bold; 
        }
        .treeview .subcategories { 
            display: none; 
            padding-left: 20px; 
        }
        .treeview .subcategories.open { 
            display: block; 
        }
        #toast-container > .toast-success { 
            background-color: #28a745; 
            border-color: #218838; 
        }
        #toast-container > .toast-error { 
            background-color: #dc3545; 
            border-color: #c82333; 
        }
        .action-cell { 
            display: flex; 
            gap: 10px; 
            align-items: center; 
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu">
                <button data-section="deal_listings">Deal Listings</button>
                <button data-submenu="affiliatePrograms" data-section="affiliateProgramsIntro">Affiliate Programs <i class="fas fa-caret-down"></i></button>
                <div id="affiliatePrograms" class="submenu">
                    <button data-section="amazon_uk">Amazon UK</button>
                    <button data-section="ebay_uk">eBay UK</button>
                    <button data-section="awin">Awin</button>
                    <button data-section="cj">CJ</button>
                    <button data-section="textmagic">TextMagic</button>
                    <button data-section="tiny">tiny</button>
                </div>
                <button data-submenu="userManagement" data-section="userManagementIntro">User Management <i class="fas fa-caret-down"></i></button>
                <div id="userManagement" class="submenu">
                    <button data-section="partners">Partners</button>
                    <button data-section="communities">Communities</button>
                    <button data-section="merchants">Merchants</button>
                </div>
                <button data-submenu="testScripts" data-section="testScriptsIntro">Test Scripts <i class="fas fa-caret-down"></i></button>
                <div id="testScripts" class="submenu">
                    <button data-href="/partner">Partner</button>
                    <button data-href="/community">Community</button>
                    <button data-href="/merchant">Merchant</button>
                    <button data-submenu="referralTests" data-section="referralTestsIntro">Referral Tests <i class="fas fa-caret-down"></i></button>
                    <div id="referralTests" class="submenu">
                        <button data-section="page_visit_test">Page Visit Referral Test</button>
                        <button data-section="order_test">Order Referral Test</button>
                    </div>
                </div>
                <button id="logOffBtn" style="background-color: #dc3545;">Log Off</button>
            </div>
        </div>
        <div class="content-container">
            <div id="welcome" class="section">
                <h2>Welcome to Admin Dashboard</h2>
                <p>This is the main administration tool for managing your affiliate programs and deal listings.</p>
                <p>Use the menu on the left to:</p>
                <ul>
                    <li>View and filter discounted deals in "Deal Listings"</li>
                    <li>Manage affiliate credentials under "Affiliate Programs"</li>
                    <li>Manage users under "User Management"</li>
                    <li>Test referral tracking with "Test Scripts"</li>
                </ul>
            </div>

            <div id="deal_listings" class="section">
                <h2>Discounted Deal Listings</h2>
                <p>This section displays all currently active deal listings available across your affiliate programs.</p>
                <div style="display: flex; gap: 20px;">
                    <div style="flex: 1; max-width: 300px;">
                        <h3>Categories</h3>
                        <div class="treeview" id="categoryTree"></div>
                    </div>
                    <div style="flex: 2;">
                        <table class="deals-table">
                            <thead>
                                <tr>
                                    <th>Category</th>
                                    <th>Title</th>
                                    <th>URL</th>
                                    <th>Price</th>
                                    <th>Original</th>
                                    <th>Discount %</th>
                                    <th>Image</th>
                                    <th>QTY</th>
                                </tr>
                            </thead>
                            <tbody id="dealList"></tbody>
                        </table>
                    </div>
                </div>
            </div>

            <div id="affiliateProgramsIntro" class="section">
                <h2>Affiliate Programs</h2>
                <p>Use this section to manage your affiliate program credentials.</p>
                <p>Select an affiliate program from the menu to enter or update your API keys, access tokens, or other necessary credentials.</p>
            </div>

            <div id="amazon_uk" class="section">
                <h2>Amazon UK Credentials</h2>
                <div class="form">
                    <label for="amazonAccessKey">Access Key:</label>
                    <input type="text" id="amazonAccessKey" placeholder="Enter Access Key">
                    <label for="amazonSecretKey">Secret Key:</label>
                    <input type="text" id="amazonSecretKey" placeholder="Enter Secret Key">
                    <label for="amazonAssociateTag">Associate Tag:</label>
                    <input type="text" id="amazonAssociateTag" placeholder="Enter Associate Tag">
                    <label for="amazonCountry">Country:</label>
                    <input type="text" id="amazonCountry" placeholder="Enter Country (e.g., UK)">
                    <button data-affiliate="amazon_uk">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://affiliate-program.amazon.com/" target="_blank">Amazon Associates</a>.
                </div>
            </div>

            <div id="ebay_uk" class="section">
                <h2>eBay UK Credentials</h2>
                <div class="form">
                    <label for="ebayAppId">App ID:</label>
                    <input type="text" id="ebayAppId" placeholder="Enter App ID">
                    <button data-affiliate="ebay_uk">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Go to <a href="https://partnernetwork.ebay.com/" target="_blank">eBay Partner Network</a>.
                </div>
            </div>

            <div id="awin" class="section">
                <h2>Awin Credentials</h2>
                <div class="form">
                    <label for="awinApiToken">API Token:</label>
                    <input type="text" id="awinApiToken" placeholder="Enter API Token">
                    <button data-affiliate="awin">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://www.awin.com/" target="_blank">Awin</a>.
                </div>
            </div>

            <div id="cj" class="section">
                <h2>CJ Credentials</h2>
                <div class="form">
                    <label for="cjApiKey">API Key:</label>
                    <input type="text" id="cjApiKey" placeholder="Enter API Key">
                    <label for="cjWebsiteId">Website ID:</label>
                    <input type="text" id="cjWebsiteId" placeholder="Enter Website ID">
                    <button data-affiliate="cj">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Go to <a href="https://www.cj.com/" target="_blank">CJ Affiliate</a>.
                </div>
            </div>

            <div id="textmagic" class="section">
                <h2>TextMagic Credentials</h2>
                <div class="form">
                    <label for="textmagicUsername">Username:</label>
                    <input type="text" id="textmagicUsername" placeholder="Enter Username">
                    <label for="textmagicApiKey">API Key:</label>
                    <input type="text" id="textmagicApiKey" placeholder="Enter API Key">
                    <button data-affiliate="textmagic">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://www.textmagic.com/" target="_blank">TextMagic</a>.
                </div>
            </div>

            <div id="tiny" class="section">
                <h2>tiny Credentials</h2>
                <div class="form">
                    <label for="tinyApiKey">API Key:</label>
                    <input type="text" id="tinyApiKey" placeholder="Enter API Key">
                    <button data-affiliate="tiny">Update Credentials</button>
                </div>
                <div class="signup-instructions">
                    <strong>Sign Up:</strong> Visit <a href="https://www.tiny.cloud/" target="_blank">tiny</a>.
                </div>
            </div>

            <div id="userManagementIntro" class="section">
                <h2>User Management</h2>
                <p>This section allows you to manage different types of users in your system.</p>
                <p>Select a user type from the menu to view their details or modify their permissions:</p>
                <ul>
                    <li><strong>Partners:</strong> Manage users with Partner permissions.</li>
                    <li><strong>Communities:</strong> View community users.</li>
                    <li><strong>Merchants:</strong> Manage merchant users.</li>
                </ul>
            </div>

            <div id="merchants" class="section">
                <h2>Merchant Management</h2>
                <table>
                    <thead>
                        <tr><th>USERid</th><th>Contact Name</th><th>Email</th><th>Actions</th></tr>
                    </thead>
                    <tbody id="merchantsList"></tbody>
                </table>
            </div>

            <div id="communities" class="section">
                <h2>Communities Management</h2>
                <table>
                    <thead>
                        <tr><th>USERid</th><th>Contact Name</th><th>Email</th></tr>
                    </thead>
                    <tbody id="communitiesList"></tbody>
                </table>
            </div>

            <div id="partners" class="section">
                <h2>Partner Management</h2>
                <table>
                    <thead>
                        <tr><th>USERid</th><th>Contact Name</th><th>Email</th><th>Actions</th></tr>
                    </thead>
                    <tbody id="partnersList"></tbody>
                </table>
            </div>

            <div id="testScriptsIntro" class="section">
                <h2>Test Scripts</h2>
                <p>Use this section to test referral tracking and other scripts.</p>
                <p>Select an option from the menu to visit endpoints or run referral tests under "Referral Tests."</p>
            </div>

            <div id="referralTestsIntro" class="section">
                <h2>Referral Tests</h2>
                <p>This section contains tools to test referral tracking functionality.</p>
                <p>Choose "Page Visit Referral Test" or "Order Referral Test" to submit test data and verify tracking behavior.</p>
            </div>

            <div id="page_visit_test" class="section">
                <h2>Page Visit Referral Test</h2>
                <div class="form">
                    <form id="pageVisitForm">
                        <table>
                            <tr><td><label for="pageReferer">Referer:</label></td><td><select id="pageReferer" name="referer"></select></td></tr>
                            <tr><td><label for="page">Page:</label></td><td><input type="text" id="page" name="page" value="/home"></td></tr>
                            <tr><td><label for="pageTimestamp">Timestamp:</label></td><td><input type="text" id="pageTimestamp" name="timestamp"></td></tr>
                            <tr><td colspan="2"><button type="submit">Submit Page Visit</button></td></tr>
                        </table>
                    </form>
                </div>
            </div>

            <div id="order_test" class="section">
                <h2>Order Referral Test</h2>
                <div class="form">
                    <form id="orderForm">
                        <table>
                            <tr><td><label for="orderReferer">Referer:</label></td><td><select id="orderReferer" name="referer"></select></td></tr>
                            <tr><td><label for="orderId">Order ID:</label></td><td><input type="text" id="orderId" name="orderId" value="ORD12345"></td></tr>
                            <tr><td><label for="buyer">Buyer Name:</label></td><td><input type="text" id="buyer" name="buyer" value="John Doe"></td></tr>
                            <tr><td><label for="total">Total Amount (£):</label></td><td><input type="number" id="total" name="total" value="99.99" step="0.01"></td></tr>
                            <tr><td><label for="orderTimestamp">Timestamp:</label></td><td><input type="text" id="orderTimestamp" name="timestamp"></td></tr>
                            <tr><td colspan="2"><button type="submit">Submit Order</button></td></tr>
                        </table>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <script>
        // Global variables defined once
        if (typeof window.apiUrl === 'undefined') window.apiUrl = 'https://clubmadeira.io';
        if (typeof window.userPermissions === 'undefined') window.userPermissions = [];
        if (typeof window.currentState === 'undefined') window.currentState = { activeSection: 'welcome', openSubmenus: [] };

        (function() { // Self-executing function to isolate scope
            function decodeJWT(token) {
                if (!token || typeof token !== 'string') return null;
                if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) return null;
                const parts = token.split('.');
                try {
                    const base64Url = parts[1];
                    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                    return JSON.parse(jsonPayload);
                } catch (error) {
                    console.error('Error decoding JWT:', error.message);
                    return null;
                }
            }

            function initializeAdmin() {
                console.log('Initializing admin page');
                const token = localStorage.getItem('authToken');
                if (!token) {
                    window.location.href = '/';
                    return;
                }
                const decoded = decodeJWT(token);
                if (!decoded) {
                    window.location.href = '/';
                    return;
                }
                window.userPermissions = decoded.permissions || [];
                if (!window.userPermissions.includes('admin')) {
                    toastr.error('Permission denied: Admin permission required');
                    window.location.href = '/';
                    return;
                }
                loadBranding();
                restoreState();
                attachEventListeners();
            }

            toastr.options = { closeButton: true, progressBar: true, positionClass: 'toast-top-right', timeOut: 5000, showMethod: 'slideDown', hideMethod: 'slideUp' };

            async function fetchProtectedPage(url) {
                const token = localStorage.getItem('authToken');
                if (!token) {
                    toastr.error('No authentication token found. Please log in.');
                    window.location.href = '/';
                    return;
                }

                saveState();
                try {
                    const response = await fetch(`${window.apiUrl}${url}`, {
                        method: 'GET',
                        headers: {
                            'Authorization': `Bearer ${token}`,
                            'Accept': 'text/html'
                        }
                    });
                    if (!response.ok) {
                        const errorText = await response.text();
                        throw new Error(`Server returned ${response.status}: ${errorText}`);
                    }
                    const html = await response.text();

                    // Reset global state to ensure a clean reinitialization
                    window.currentState = { activeSection: 'welcome', openSubmenus: [] };
                    window.userPermissions = [];

                    document.body.innerHTML = html;

                    const parser = new DOMParser();
                    const doc = parser.parseFromString(html, 'text/html');

                    // Reload external scripts to ensure dependencies are fresh
                    const scripts = doc.querySelectorAll('script[src]');
                    const scriptPromises = [];
                    for (const script of scripts) {
                        const newScript = document.createElement('script');
                        newScript.src = script.src;
                        newScript.async = false;
                        document.head.appendChild(newScript);
                        scriptPromises.push(new Promise(resolve => {
                            newScript.onload = resolve;
                            newScript.onerror = () => {
                                console.error(`Failed to load script: ${script.src}`);
                                resolve();
                            };
                        }));
                    }
                    await Promise.all(scriptPromises);

                    // Execute inline scripts
                    doc.querySelectorAll('script:not([src])').forEach(script => {
                        if (script.innerHTML.trim()) {
                            try {
                                new Function(script.innerHTML)();
                            } catch (e) {
                                console.error('Error executing inline script:', e);
                            }
                        }
                    });

                    // Ensure admin initialization runs when returning to admin
                    if (url === '/admin') {
                        initializeAdmin();
                    }
                } catch (error) {
                    toastr.error(error.message || 'Failed to load protected page');
                    window.location.href = '/';
                }
            }

            function saveState() {
                const activeSection = document.querySelector('.section.active')?.id || 'welcome';
                const openSubmenus = Array.from(document.querySelectorAll('.submenu.open')).map(sub => sub.id);
                window.currentState = { activeSection, openSubmenus };
                localStorage.setItem('adminState', JSON.stringify(window.currentState));
            }

            function restoreState() {
                const savedState = JSON.parse(localStorage.getItem('adminState') || '{}');
                window.currentState = {
                    activeSection: savedState.activeSection || 'welcome',
                    openSubmenus: savedState.openSubmenus || []
                };
                showSection(window.currentState.activeSection);
                window.currentState.openSubmenus.forEach(submenuId => {
                    const submenu = document.getElementById(submenuId);
                    if (submenu) submenu.classList.add('open');
                });
            }

            function handleSectionClick(event) {
                const section = this.getAttribute('data-section');
                const submenu = this.getAttribute('data-submenu');
                if (submenu) toggleSubmenu(submenu);
                if (section) showSection(section);
            }

            function handleHrefClick() {
                const href = this.getAttribute('data-href');
                fetchProtectedPage(href);
            }

            function handleAffiliateClick() {
                const affiliate = this.getAttribute('data-affiliate');
                updateAffiliate(affiliate);
            }

            function attachEventListeners() {
                const sectionButtons = document.querySelectorAll('.menu button[data-section]');
                sectionButtons.forEach(button => {
                    button.removeEventListener('click', handleSectionClick);
                    button.addEventListener('click', handleSectionClick);
                });

                const hrefButtons = document.querySelectorAll('.menu button[data-href]');
                hrefButtons.forEach(button => {
                    button.removeEventListener('click', handleHrefClick);
                    button.addEventListener('click', handleHrefClick);
                });

                const affiliateButtons = document.querySelectorAll('.form button[data-affiliate]');
                affiliateButtons.forEach(button => {
                    button.removeEventListener('click', handleAffiliateClick);
                    button.addEventListener('click', handleAffiliateClick);
                });

                const logOffBtn = document.getElementById('logOffBtn');
                if (logOffBtn) {
                    logOffBtn.removeEventListener('click', logOff);
                    logOffBtn.addEventListener('click', logOff);
                }

                submitReferral('pageVisitForm', 'Page visit recorded successfully');
                submitReferral('orderForm', 'Order recorded successfully');
            }

            async function loadBranding() {
                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/branding`);
                    if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                    const data = await response.json();
                    document.getElementById('brandingContent').innerHTML = data.content || '<h1>Admin Dashboard</h1>';
                } catch (error) {
                    toastr.error(`Error loading branding: ${error.message}`);
                    document.getElementById('brandingContent').innerHTML = '<h1>Admin Dashboard</h1>';
                }
            }

            function getCurrentTimestamp() {
                const now = new Date();
                return `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(2, '0')}-${String(now.getDate()).padStart(2, '0')} ${String(now.getHours()).padStart(2, '0')}:${String(now.getMinutes()).padStart(2, '0')}:${String(now.getSeconds()).padStart(2, '0')}`;
            }

            async function authenticatedFetch(url, options = {}) {
                const token = localStorage.getItem('authToken');
                options.headers = {
                    ...options.headers,
                    'Authorization': `Bearer ${token}`,
                    'Content-Type': 'application/json'
                };
                const response = await fetch(url, options);
                if (response.status === 401) {
                    toastr.error('Session expired. Please log in again.');
                    localStorage.removeItem('authToken');
                    window.location.href = '/';
                }
                return response;
            }

            function toggleSubmenu(submenuId) {
                const submenu = document.getElementById(submenuId);
                if (submenu) {
                    submenu.classList.toggle('open');
                    if (submenu.classList.contains('open') && !window.currentState.openSubmenus.includes(submenuId)) {
                        window.currentState.openSubmenus.push(submenuId);
                    } else if (!submenu.classList.contains('open')) {
                        window.currentState.openSubmenus = window.currentState.openSubmenus.filter(id => id !== submenuId);
                    }
                    saveState();
                }
            }

            function showSection(section) {
                document.querySelectorAll('.section').forEach(s => {
                    s.classList.remove('active');
                    s.style.display = 'none';
                });
                const activeSection = document.getElementById(section);
                if (activeSection) {
                    activeSection.classList.add('active');
                    activeSection.style.display = 'block';
                    window.currentState.activeSection = section;
                    saveState();
                    loadSection(section);
                }
            }

            async function loadSection(section) {
                if (section === 'welcome' || section === 'page_visit_test' || section === 'order_test' || 
                    section === 'affiliateProgramsIntro' || section === 'userManagementIntro' || 
                    section === 'testScriptsIntro' || section === 'referralTestsIntro') {
                    if (section === 'page_visit_test' || section === 'order_test') {
                        document.getElementById(section === 'page_visit_test' ? 'pageTimestamp' : 'orderTimestamp').value = getCurrentTimestamp();
                        await populateRefererDropdown(section === 'page_visit_test' ? 'pageReferer' : 'orderReferer');
                    }
                    return;
                }

                if (section === 'deal_listings') {
                    await loadCategories();
                    return;
                }

                if (section === 'merchants') {
                    await loadMerchants();
                    return;
                }

                if (section === 'communities') {
                    await loadCommunities();
                    return;
                }

                if (section === 'partners') {
                    await loadPartners();
                    return;
                }

                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/config`);
                    if (!response.ok) throw new Error(`Failed to fetch /config: ${response.status}`);
                    const data = await response.json();
                    const config = data.config[section] || {};

                    if (section === 'amazon_uk') {
                        document.getElementById('amazonAccessKey').value = config.ACCESS_KEY || '';
                        document.getElementById('amazonSecretKey').value = config.SECRET_KEY || '';
                        document.getElementById('amazonAssociateTag').value = config.ASSOCIATE_TAG || '';
                        document.getElementById('amazonCountry').value = config.COUNTRY || '';
                    } else if (section === 'ebay_uk') {
                        document.getElementById('ebayAppId').value = config.APP_ID || '';
                    } else if (section === 'awin') {
                        document.getElementById('awinApiToken').value = config.API_TOKEN || '';
                    } else if (section === 'cj') {
                        document.getElementById('cjApiKey').value = config.API_KEY || '';
                        document.getElementById('cjWebsiteId').value = config.WEBSITE_ID || '';
                    } else if (section === 'textmagic') {
                        document.getElementById('textmagicUsername').value = config.USERNAME || '';
                        document.getElementById('textmagicApiKey').value = config.API_KEY || '';
                    } else if (section === 'tiny') {
                        document.getElementById('tinyApiKey').value = config.API_KEY || '';
                    }
                    toastr.success(`Loaded credentials for ${section}`);
                } catch (error) {
                    toastr.error(`Error loading credentials: ${error.message}`);
                }
            }

            async function populateRefererDropdown(selectId) {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const communityUsers = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('community') && !permissions.includes('admin')) {
                            communityUsers.push({ USERid: user.USERid, contact_name: user.contact_name });
                        }
                    }

                    const select = document.getElementById(selectId);
                    select.innerHTML = '';
                    communityUsers.forEach(user => {
                        const option = document.createElement('option');
                        option.value = user.USERid;
                        option.text = user.contact_name;
                        select.appendChild(option);
                    });
                    if (communityUsers.length === 0) {
                        select.innerHTML = '<option value="">No community users found</option>';
                    }
                } catch (error) {
                    toastr.error(`Error loading referer options: ${error.message}`);
                    document.getElementById(selectId).innerHTML = '<option value="">Error loading users</option>';
                }
            }

            async function loadMerchants() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const merchants = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('merchant') && !permissions.includes('admin')) {
                            merchants.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('merchantsList', merchants, 'merchants');
                    toastr.success('Merchants loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading merchants: ${error.message}`);
                }
            }

            async function loadCommunities() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const communities = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('community') && !permissions.includes('admin')) {
                            communities.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('communitiesList', communities, 'communities');
                    toastr.success('Communities loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading communities: ${error.message}`);
                }
            }

            async function loadPartners() {
                try {
                    const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
                    if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
                    const usersData = await usersResponse.json();
                    const users = usersData.users;

                    const partners = [];
                    for (const user of users) {
                        const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
                        if (!userResponse.ok) continue;
                        const userData = await userResponse.json();
                        const permissions = userData.user.permissions || [];
                        if (permissions.includes('wixpro')) {
                            partners.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
                        }
                    }

                    updateUserTable('partnersList', partners, 'partners');
                    toastr.success('Partners loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading partners: ${error.message}`);
                }
            }

            function updateUserTable(tableId, users, section) {
                const tbody = document.getElementById(tableId);
                tbody.innerHTML = '';
                if (users.length === 0) {
                    const colspan = section === 'communities' ? 3 : 4;
                    tbody.innerHTML = `<tr><td colspan="${colspan}">No users found</td></tr>`;
                    return;
                }
                users.forEach(user => {
                    const row = document.createElement('tr');
                    let actionsHtml = '';
                    if (section !== 'communities') {
                        const hasValidated = user.permissions.includes('validated');
                        actionsHtml = `
                            <input type="checkbox" ${hasValidated ? 'checked' : ''} 
                                onchange="togglePermission('${user.USERid}', 'validated', '${section}', this.checked)">
                            Validated
                        `;
                        if (section === 'partners') {
                            const hasAdmin = user.permissions.includes('admin');
                            const hasMerchant = user.permissions.includes('merchant');
                            actionsHtml = `
                                <input type="checkbox" ${hasAdmin ? 'checked' : ''} 
                                    onchange="togglePermission('${user.USERid}', 'admin', '${section}', this.checked)">
                                Admin
                                <input type="checkbox" ${hasMerchant ? 'checked' : ''} 
                                    onchange="togglePermission('${user.USERid}', 'merchant', '${section}', this.checked)">
                                Merchant
                            ` + actionsHtml;
                        }
                    }
                    row.innerHTML = `
                        <td>${user.USERid}</td>
                        <td>${user.contact_name}</td>
                        <td>${user.email_address}</td>
                        ${section !== 'communities' ? `<td class="action-cell">${actionsHtml}</td>` : ''}
                    `;
                    tbody.appendChild(row);
                });
            }

            async function togglePermission(userId, permission, section, isChecked) {
                try {
                    const method = isChecked ? 'POST' : 'DELETE';
                    const response = await authenticatedFetch(`${window.apiUrl}/permissions/${userId}`, {
                        method: method,
                        body: JSON.stringify({ permission })
                    });
                    if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
                    const data = await response.json();
                    toastr.success(data.message || `${isChecked ? 'Added' : 'Removed'} ${permission} permission for user ${userId}`);
                    loadSection(section);
                } catch (error) {
                    toastr.error(`Error: ${error.message}`);
                    loadSection(section);
                }
            }

            async function updateAffiliate(affiliate) {
                let credentials = {};
                if (affiliate === 'amazon_uk') {
                    credentials = {
                        ACCESS_KEY: document.getElementById('amazonAccessKey').value.trim(),
                        SECRET_KEY: document.getElementById('amazonSecretKey').value.trim(),
                        ASSOCIATE_TAG: document.getElementById('amazonAssociateTag').value.trim(),
                        COUNTRY: document.getElementById('amazonCountry').value.trim()
                    };
                } else if (affiliate === 'ebay_uk') {
                    credentials = { APP_ID: document.getElementById('ebayAppId').value.trim() };
                } else if (affiliate === 'awin') {
                    credentials = { API_TOKEN: document.getElementById('awinApiToken').value.trim() };
                } else if (affiliate === 'cj') {
                    credentials = {
                        API_KEY: document.getElementById('cjApiKey').value.trim(),
                        WEBSITE_ID: document.getElementById('cjWebsiteId').value.trim()
                    };
                } else if (affiliate === 'textmagic') {
                    credentials = {
                        USERNAME: document.getElementById('textmagicUsername').value.trim(),
                        API_KEY: document.getElementById('textmagicApiKey').value.trim()
                    };
                } else if (affiliate === 'tiny') {
                    credentials = { API_KEY: document.getElementById('tinyApiKey').value.trim() };
                }

                credentials = Object.fromEntries(Object.entries(credentials).filter(([_, v]) => v !== ''));
                if (Object.keys(credentials).length === 0) {
                    toastr.warning('No changes to update');
                    return;
                }

                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/config/${affiliate}`, {
                        method: 'PATCH',
                        body: JSON.stringify(credentials)
                    });
                    if (!response.ok) throw new Error(`Failed to update: ${response.status}`);
                    const data = await response.json();
                    toastr.success(`Update successful: ${data.message}`);
                } catch (error) {
                    toastr.error(`Error updating credentials: ${error.message}`);
                }
            }

            async function submitReferral(formId, successMessage) {
                const form = document.getElementById(formId);
                if (form.dataset.listenerAdded) return;
                form.addEventListener('submit', async function(e) {
                    e.preventDefault();
                    const formData = new FormData(form);
                    const jsonData = Object.fromEntries(formData.entries());
                    try {
                        const response = await authenticatedFetch(`${window.apiUrl}/referal`, {
                            method: 'POST',
                            body: JSON.stringify(jsonData),
                        });
                        if (!response.ok) throw new Error((await response.json()).message || 'Unknown error');
                        const data = await response.json();
                        if (data.status === 'success') {
                            toastr.success(`${successMessage} - Referer: ${data.referer}`);
                        } else {
                            toastr.error(data.message || 'Unknown error');
                        }
                    } catch (error) {
                        toastr.error(error.message || 'Failed to connect to server');
                    }
                });
                form.dataset.listenerAdded = 'true';
            }

            function logOff() {
                if (confirm('Are you sure you want to log off?')) {
                    localStorage.removeItem('authToken');
                    localStorage.removeItem('adminState');
                    toastr.success('Logged off successfully');
                    setTimeout(() => window.location.href = '/', 1000);
                }
            }

            async function loadCategories() {
                try {
                    const response = await authenticatedFetch(`${window.apiUrl}/categories`);
                    if (!response.ok) throw new Error(`Failed to fetch /categories: ${response.status}`);
                    const data = await response.json();
                    const tree = document.getElementById('categoryTree');
                    tree.innerHTML = '';
                    const ul = document.createElement('ul');
                    data.categories.forEach(cat => ul.appendChild(createTreeNode(cat)));
                    tree.appendChild(ul);
                    toastr.success('Categories loaded successfully');
                } catch (error) {
                    toastr.error(`Error loading categories: ${error.message}`);
                }
            }

            function createTreeNode(category) {
                const li = document.createElement('li');
                const nodeDiv = document.createElement('div');
                nodeDiv.className = 'node';

                const toggle = document.createElement('span');
                toggle.className = 'toggle';
                toggle.textContent = '+';
                toggle.onclick = () => toggleSubcategories(category.id, toggle);

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = category.id;
                checkbox.onchange = () => handleCategorySelection(category.id, checkbox);

                const span = document.createElement('span');
                span.textContent = `${category.name} (${category.id})`;

                nodeDiv.appendChild(toggle);
                nodeDiv.appendChild(checkbox);
                nodeDiv.appendChild(span);
                li.appendChild(nodeDiv);

                const subUl = document.createElement('ul');
                subUl.className = 'subcategories';
                li.appendChild(subUl);

                return li;
            }

            async function toggleSubcategories(parentId, toggle) {
                const li = toggle.closest('li');
                const subUl = li.querySelector('.subcategories');

                if (subUl.classList.contains('open')) {
                    subUl.classList.remove('open');
                    toggle.textContent = '+';
                } else {
                    if (subUl.children.length === 0) {
                        try {
                            const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${parentId}`);
                            if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                            const data = await response.json();
                            if (data.categories.length === 0) {
                                toastr.info(`No subcategories for ${parentId}`);
                                return;
                            }
                            data.categories.forEach(cat => subUl.appendChild(createTreeNode(cat)));
                            toastr.success(`Subcategories for ${parentId} loaded successfully`);
                        } catch (error) {
                            toastr.error(`Error loading subcategories: ${error.message}`);
                            return;
                        }
                    }
                    subUl.classList.add('open');
                    toggle.textContent = '-';
                }
            }

            async function handleCategorySelection(categoryId, checkbox) {
                document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
                    if (cb !== checkbox) cb.checked = false;
                });

                if (checkbox.checked) {
                    try {
                        const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
                        if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
                        const data = await response.json();
                        const tbody = document.getElementById('dealList');
                        tbody.innerHTML = '';
                        data.products.forEach(product => tbody.appendChild(createDealRow(product)));
                        toastr.success(`Loaded ${data.count} discounted products for category ${categoryId}`);
                    } catch (error) {
                        toastr.error(`Error loading discounted products: ${error.message}`);
                        checkbox.checked = false;
                    }
                } else {
                    document.getElementById('dealList').innerHTML = '';
                }
            }

            function createDealRow(product) {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                return tr;
            }

            initializeAdmin();
        })();
    </script>
</body>
</html>

old/all.js

// admin-page.js
// Purpose: Manages page-specific functionality for the /admin page.

// Initializes the admin page with permission checks.
function initializeAdmin() {
    console.log('initializeAdmin - Initializing admin page');
    const token = localStorage.getItem('authToken');
    if (!token) {
        console.error('initializeAdmin - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeAdmin - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: Admin permission required');
        console.error('initializeAdmin - No admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    loadBranding();
    restoreState();
    attachEventListeners();
    console.log('initializeAdmin - Admin page initialized successfully');
}

// Updates affiliate program credentials.
async function updateAffiliate(affiliate) {
    console.log('updateAffiliate - Updating affiliate - Affiliate:', affiliate);
    let credentials = {};
    if (affiliate === 'amazon_uk') {
        credentials = {
            ACCESS_KEY: document.getElementById('amazonAccessKey').value.trim(),
            SECRET_KEY: document.getElementById('amazonSecretKey').value.trim(),
            ASSOCIATE_TAG: document.getElementById('amazonAssociateTag').value.trim(),
            COUNTRY: document.getElementById('amazonCountry').value.trim()
        };
    } else if (affiliate === 'ebay_uk') {
        credentials = { APP_ID: document.getElementById('ebayAppId').value.trim() };
    } else if (affiliate === 'awin') {
        credentials = { API_TOKEN: document.getElementById('awinApiToken').value.trim() };
    } else if (affiliate === 'cj') {
        credentials = {
            API_KEY: document.getElementById('cjApiKey').value.trim(),
            WEBSITE_ID: document.getElementById('cjWebsiteId').value.trim()
        };
    } else if (affiliate === 'textmagic') {
        credentials = {
            USERNAME: document.getElementById('textmagicUsername').value.trim(),
            API_KEY: document.getElementById('textmagicApiKey').value.trim()
        };
    } else if (affiliate === 'tiny') {
        credentials = { API_KEY: document.getElementById('tinyApiKey').value.trim() };
    }

    credentials = Object.fromEntries(Object.entries(credentials).filter(([_, v]) => v !== ''));
    if (Object.keys(credentials).length === 0) {
        console.warn('updateAffiliate - No changes to update');
        toastr.warning('No changes to update');
        return;
    }

    try {
        console.log('updateAffiliate - Sending update - URL:', `${window.apiUrl}/config/${affiliate}`);
        const response = await authenticatedFetch(`${window.apiUrl}/config/${affiliate}`, {
            method: 'PATCH',
            body: JSON.stringify(credentials)
        });
        if (!response.ok) throw new Error(`Failed to update: ${response.status}`);
        const data = await response.json();
        console.log('updateAffiliate - Update successful - Response:', JSON.stringify(data));
        toastr.success(`Update successful: ${data.message}`);
    } catch (error) {
        console.error('updateAffiliate - Error updating affiliate - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error updating credentials: ${error.message}`);
    }
}

// Submits referral form data (page visits or orders).
async function submitReferral(formId, successMessage) {
    console.log('submitReferral - Setting up referral submission - Form ID:', formId);
    const form = document.getElementById(formId);
    if (form.dataset.listenerAdded) return;
    form.addEventListener('submit', async function(e) {
        e.preventDefault();
        console.log('submitReferral - Form submitted - Form ID:', formId);
        const formData = new FormData(form);
        const jsonData = Object.fromEntries(formData.entries());
        try {
            console.log('submitReferral - Sending referral data - URL:', `${window.apiUrl}/referal`);
            const response = await authenticatedFetch(`${window.apiUrl}/referal`, {
                method: 'POST',
                body: JSON.stringify(jsonData),
            });
            if (!response.ok) throw new Error((await response.json()).message || 'Unknown error');
            const data = await response.json();
            if (data.status === 'success') {
                console.log('submitReferral - Referral recorded - Referer:', data.referer);
                toastr.success(`${successMessage} - Referer: ${data.referer}`);
            } else {
                throw new Error(data.message || 'Unknown error');
            }
        } catch (error) {
            console.error('submitReferral - Error submitting referral - Error:', error.message, 'Stack:', error.stack);
            toastr.error(error.message || 'Failed to connect to server');
        }
    });
    form.dataset.listenerAdded = 'true';
    console.log('submitReferral - Listener added - Form ID:', formId);
}

// Populates the referer dropdown with community users.
async function populateRefererDropdown(selectId) {
    console.log('populateRefererDropdown - Populating dropdown - Select ID:', selectId);
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('populateRefererDropdown - Users fetched - Count:', users.length);

        const communityUsers = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('community') && !permissions.includes('admin')) {
                communityUsers.push({ USERid: user.USERid, contact_name: user.contact_name });
            }
        }
        console.log('populateRefererDropdown - Community users filtered - Count:', communityUsers.length);

        const select = document.getElementById(selectId);
        select.innerHTML = '';
        communityUsers.forEach(user => {
            const option = document.createElement('option');
            option.value = user.USERid;
            option.text = user.contact_name;
            select.appendChild(option);
        });
        if (communityUsers.length === 0) {
            select.innerHTML = '<option value="">No community users found</option>';
        }
        console.log('populateRefererDropdown - Dropdown populated - Select ID:', selectId);
    } catch (error) {
        console.error('populateRefererDropdown - Error loading referer options - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading referer options: ${error.message}`);
        document.getElementById(selectId).innerHTML = '<option value="">Error loading users</option>';
    }
}

// Loads and displays merchant users.
async function loadMerchants() {
    console.log('loadMerchants - Loading merchants');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadMerchants - Users fetched - Count:', users.length);

        const merchants = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('merchant') && !permissions.includes('admin')) {
                merchants.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
            }
        }
        console.log('loadMerchants - Merchants filtered - Count:', merchants.length);

        updateUserTable('merchantsList', merchants, 'merchants');
        toastr.success('Merchants loaded successfully');
    } catch (error) {
        console.error('loadMerchants - Error loading merchants - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading merchants: ${error.message}`);
    }
}

// Loads and displays community users.
async function loadCommunities() {
    console.log('loadCommunities - Loading communities');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadCommunities - Users fetched - Count:', users.length);

        const communities = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('community') && !permissions.includes('admin')) {
                communities.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
            }
        }
        console.log('loadCommunities - Communities filtered - Count:', communities.length);

        updateUserTable('communitiesList', communities, 'communities');
        toastr.success('Communities loaded successfully');
    } catch (error) {
        console.error('loadCommunities - Error loading communities - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading communities: ${error.message}`);
    }
}

// Loads and displays partner users.
async function loadPartners() {
    console.log('loadPartners - Loading partners');
    try {
        const usersResponse = await authenticatedFetch(`${window.apiUrl}/users`);
        if (!usersResponse.ok) throw new Error(`Failed to fetch users: ${usersResponse.status}`);
        const usersData = await usersResponse.json();
        const users = usersData.users;
        console.log('loadPartners - Users fetched - Count:', users.length);

        const partners = [];
        for (const user of users) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/users/${user.USERid}`);
            if (!userResponse.ok) continue;
            const userData = await userResponse.json();
            const permissions = userData.user.permissions || [];
            if (permissions.includes('wixpro')) {
                partners.push({ USERid: user.USERid, contact_name: user.contact_name, email_address: user.email_address, permissions });
            }
        }
        console.log('loadPartners - Partners filtered - Count:', partners.length);

        updateUserTable('partnersList', partners, 'partners');
        toastr.success('Partners loaded successfully');
    } catch (error) {
        console.error('loadPartners - Error loading partners - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading partners: ${error.message}`);
    }
}

// Updates the user table for merchants, communities, or partners.
function updateUserTable(tableId, users, section) {
    console.log('updateUserTable - Updating table - Table ID:', tableId, 'Section:', section, 'User count:', users.length);
    const tbody = document.getElementById(tableId);
    tbody.innerHTML = '';
    if (users.length === 0) {
        const colspan = section === 'communities' ? 3 : 4;
        tbody.innerHTML = `<tr><td colspan="${colspan}">No users found</td></tr>`;
        console.log('updateUserTable - No users found - Table ID:', tableId);
        return;
    }
    users.forEach(user => {
        const row = document.createElement('tr');
        let actionsHtml = '';
        if (section !== 'communities') {
            const hasValidated = user.permissions.includes('validated');
            actionsHtml = `
                <input type="checkbox" ${hasValidated ? 'checked' : ''} 
                    onchange="togglePermission('${user.USERid}', 'validated', '${section}', this.checked)">
                Validated
            `;
            if (section === 'partners') {
                const hasAdmin = user.permissions.includes('admin');
                const hasMerchant = user.permissions.includes('merchant');
                actionsHtml = `
                    <input type="checkbox" ${hasAdmin ? 'checked' : ''} 
                        onchange="togglePermission('${user.USERid}', 'admin', '${section}', this.checked)">
                    Admin
                    <input type="checkbox" ${hasMerchant ? 'checked' : ''} 
                        onchange="togglePermission('${user.USERid}', 'merchant', '${section}', this.checked)">
                    Merchant
                ` + actionsHtml;
            }
        }
        row.innerHTML = `
            <td>${user.USERid}</td>
            <td>${user.contact_name}</td>
            <td>${user.email_address}</td>
            ${section !== 'communities' ? `<td class="action-cell">${actionsHtml}</td>` : ''}
        `;
        tbody.appendChild(row);
    });
    console.log('updateUserTable - Table updated - Table ID:', tableId);
}

// Toggles a user’s permission status.
async function togglePermission(userId, permission, section, isChecked) {
    console.log('togglePermission - Toggling permission - User ID:', userId, 'Permission:', permission, 'Section:', section, 'Checked:', isChecked);
    try {
        const method = isChecked ? 'POST' : 'DELETE';
        const response = await authenticatedFetch(`${window.apiUrl}/permissions/${userId}`, {
            method: method,
            body: JSON.stringify({ permission })
        });
        if (!response.ok) throw new Error(`Failed to ${isChecked ? 'add' : 'remove'} permission: ${response.status}`);
        const data = await response.json();
        console.log('togglePermission - Permission toggled - Response:', JSON.stringify(data));
        toastr.success(data.message || `${isChecked ? 'Added' : 'Removed'} ${permission} permission for user ${userId}`);
        loadSection(section); // Refresh section
    } catch (error) {
        console.error('togglePermission - Error toggling permission - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error: ${error.message}`);
        loadSection(section); // Refresh on error
    }
}

// Creates a deal row for discounted products (admin-specific).
function createDealRow(product) {
    console.log('createDealRow - Creating deal row - Product:', JSON.stringify(product));
    const tr = document.createElement('tr');
    const discountPercent = product.discount_percent || 
        (product.original_price > product.current_price 
            ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
            : 'N/A');
    tr.innerHTML = `
        <td>${product.category || 'N/A'}</td>
        <td>${product.title}</td>
        <td><a href="${product.product_url}" target="_blank">Link</a></td>
        <td>${product.current_price}</td>
        <td>${product.original_price}</td>
        <td>${discountPercent}</td>
        <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
        <td>${product.QTY || 'N/A'}</td>
    `;
    console.log('createDealRow - Deal row created - Product ID:', product.id || 'N/A');
    return tr;
}// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}// category-management.js
// Purpose: Manages treeview functionality for displaying and editing nested category information (used in community.html and admin.html).

// Creates a treeview node for category display with configurable behavior.
function createTreeNode(category, level = 0, isAdmin = false, savedCategories = []) {
    console.log('createTreeNode - Creating node - Category:', JSON.stringify(category), 'Level:', level, 'IsAdmin:', isAdmin);
    const li = document.createElement('li');
    const nodeDiv = document.createElement('div');
    nodeDiv.className = 'node';

    const toggle = document.createElement('span');
    toggle.className = 'toggle';
    toggle.setAttribute('data-id', category.id);
    toggle.textContent = '+'; // Default to '+' assuming subcategories may exist
    toggle.addEventListener('click', () => toggleSubcategories(category.id, toggle));

    const checkbox = document.createElement('input');
    checkbox.type = 'checkbox';
    checkbox.value = category.id;
    if (isAdmin) {
        checkbox.addEventListener('change', () => handleCategorySelection(category.id, checkbox));
    } else {
        checkbox.checked = savedCategories.includes(category.id.toString());
    }

    const span = document.createElement('span');
    span.textContent = `${category.name} (${category.id})`;

    nodeDiv.appendChild(toggle);
    nodeDiv.appendChild(checkbox);
    nodeDiv.appendChild(span);
    li.appendChild(nodeDiv);

    const subUl = document.createElement('ul');
    subUl.className = 'subcategories';
    li.appendChild(subUl);

    console.log('createTreeNode - Node created - Category ID:', category.id);
    return li;
}

// Loads category data for treeview rendering, with options for admin or community context.
async function loadCategories(userId = null, isAdmin = false) {
    console.log('loadCategories - Starting category load - UserID:', userId, 'IsAdmin:', isAdmin);
    let savedCategories = [];
    try {
        console.log('loadCategories - Fetching categories via authenticatedFetch');
        const startTime = Date.now();

        // Load user's saved categories if not admin
        if (!isAdmin && userId) {
            const userResponse = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`);
            if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
            const userData = await userResponse.json();
            savedCategories = userData.categories || [];
            console.log('loadCategories - Saved categories fetched - Count:', savedCategories.length);
        }

        // Load all categories
        const response = await authenticatedFetch(`${window.apiUrl}/categories`);
        if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
        const data = await response.json();
        const duration = Date.now() - startTime;
        console.log('loadCategories - Categories fetched - Count:', data.categories?.length, 'Duration:', `${duration}ms`);

        const treeElement = document.getElementById('categoryTree');
        if (!treeElement) {
            console.error('loadCategories - Tree element not found - ID: categoryTree');
            return;
        }
        treeElement.innerHTML = '';
        const ul = document.createElement('ul');

        // Filter top-level categories for community, show all for admin
        const categoriesToRender = isAdmin ? data.categories : data.categories.filter(cat => !cat.parent_id);
        console.log('loadCategories - Categories to render - Count:', categoriesToRender.length);

        categoriesToRender.forEach(category => {
            const node = createTreeNode(category, 0, isAdmin, savedCategories);
            ul.appendChild(node);
        });
        treeElement.appendChild(ul);

        // Reattach listeners for community context
        if (!isAdmin) attachEventListeners();

        console.log('loadCategories - Treeview rendered successfully');
        toastr.success('Categories loaded successfully');
    } catch (error) {
        console.error('loadCategories - Error loading categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to load categories');
    }
    console.log('loadCategories - Category load completed');
}

// Toggles visibility of subcategories in treeview and loads them dynamically if needed.
async function toggleSubcategories(categoryId, toggle) {
    console.log('toggleSubcategories - Toggling subcategories - Category ID:', categoryId);
    const li = toggle.closest('li');
    const subUl = li.querySelector('.subcategories');

    if (!subUl) {
        console.error('toggleSubcategories - Subcategories element not found - Category ID:', categoryId);
        return;
    }

    if (subUl.classList.contains('open')) {
        subUl.classList.remove('open');
        toggle.textContent = '+';
        console.log('toggleSubcategories - Subcategories closed - ID:', categoryId);
    } else {
        if (subUl.children.length === 0) {
            try {
                console.log('toggleSubcategories - Fetching subcategories - Parent ID:', categoryId);
                const response = await authenticatedFetch(`${window.apiUrl}/categories?parent_id=${categoryId}`);
                if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                const data = await response.json();

                if (data.categories && data.categories.length > 0) {
                    data.categories.forEach(cat => {
                        const node = createTreeNode(cat, 1); // Level 1 for subcategories
                        subUl.appendChild(node);
                    });
                    console.log('toggleSubcategories - Subcategories loaded - Count:', data.categories.length, 'Parent ID:', categoryId);
                    toastr.success(`Subcategories for ${categoryId} loaded successfully`);
                } else {
                    toggle.textContent = ' '; // No subcategories
                    console.log('toggleSubcategories - No subcategories found - Parent ID:', categoryId);
                    toastr.info(`No subcategories for ${categoryId}`);
                    return;
                }
            } catch (error) {
                console.error('toggleSubcategories - Error loading subcategories - Error:', error.message, 'Stack:', error.stack);
                toastr.error(`Error loading subcategories: ${error.message}`);
                toggle.textContent = ' ';
                return;
            }
        }
        subUl.classList.add('open');
        toggle.textContent = '-';
        console.log('toggleSubcategories - Subcategories opened - ID:', categoryId);
    }
    console.log('toggleSubcategories - Toggle completed');
}

// Saves updated category structure from treeview (community context).
async function saveCategories(userId) {
    console.log('saveCategories - Starting category save - UserID:', userId);
    if (!userId) {
        console.error('saveCategories - User ID not provided');
        toastr.error('User ID not found in session');
        return;
    }

    const checkedCategories = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
    console.log('saveCategories - Checked categories - Count:', checkedCategories.length, 'Values:', checkedCategories);

    try {
        console.log('saveCategories - Sending categories via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/mycategories`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/mycategories`, {
            method: 'PUT',
            body: JSON.stringify({ categories: checkedCategories })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveCategories - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save categories: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveCategories - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Categories saved successfully');
    } catch (error) {
        console.error('saveCategories - Error saving categories - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save categories: ${error.message}`);
    }
    console.log('saveCategories - Save process completed');
}

// Handles category selection in admin context to load discounted products.
async function handleCategorySelection(categoryId, checkbox) {
    console.log('handleCategorySelection - Handling selection - Category ID:', categoryId, 'Checked:', checkbox.checked);
    document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(cb => {
        if (cb !== checkbox) cb.checked = false;
    });

    const tbody = document.getElementById('dealList');
    if (!tbody) {
        console.error('handleCategorySelection - Deal list element not found - ID: dealList');
        return;
    }

    if (checkbox.checked) {
        try {
            console.log('handleCategorySelection - Fetching discounted products - Category ID:', categoryId);
            const response = await authenticatedFetch(`${window.apiUrl}/discounted-products?category_id=${categoryId}&min_discount=20`);
            if (!response.ok) throw new Error(`Failed to fetch discounted products: ${response.status}`);
            const data = await response.json();

            tbody.innerHTML = '';
            data.products.forEach(product => {
                const tr = document.createElement('tr');
                const discountPercent = product.discount_percent || 
                    (product.original_price > product.current_price 
                        ? ((product.original_price - product.current_price) / product.original_price * 100).toFixed(2) 
                        : 'N/A');
                tr.innerHTML = `
                    <td>${product.category || 'N/A'}</td>
                    <td>${product.title}</td>
                    <td><a href="${product.product_url}" target="_blank">Link</a></td>
                    <td>${product.current_price}</td>
                    <td>${product.original_price}</td>
                    <td>${discountPercent}</td>
                    <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                    <td>${product.QTY || 'N/A'}</td>
                `;
                tbody.appendChild(tr);
            });
            console.log('handleCategorySelection - Products loaded - Count:', data.products.length);
            toastr.success(`Loaded ${data.products.length} discounted products for category ${categoryId}`);
        } catch (error) {
            console.error('handleCategorySelection - Error loading products - Error:', error.message, 'Stack:', error.stack);
            toastr.error(`Error loading discounted products: ${error.message}`);
            checkbox.checked = false;
            tbody.innerHTML = '';
        }
    } else {
        tbody.innerHTML = '';
        console.log('handleCategorySelection - Cleared deal list - Category deselected');
    }
    console.log('handleCategorySelection - Selection handling completed');
}// common.js
// Purpose: Provides core shared utilities for all pages, specifically Toastr configuration.

// Configures Toastr for consistent toast notifications across the application.
function setupToastr() {
    console.log('setupToastr - Initiating Toastr configuration');
    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        timeOut: 5000,
        showMethod: 'slideDown',
        hideMethod: 'slideUp'
    };
    console.log('setupToastr - Toastr options configured:', JSON.stringify(toastr.options));
    console.log('setupToastr - Configuration completed');
}// community-page.js
// Purpose: Manages page-specific functionality for the /community page.

// Initializes the community page with permission checks.
function initializeCommunity() {
    console.log('initializeCommunity - Initializing community page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeCommunity - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeCommunity - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('admin') && !window.userPermissions.includes('community')) {
        toastr.error('Permission denied: Community permission required');
        console.error('initializeCommunity - No community permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (!userId) {
        toastr.error('User ID not found in session, redirecting to login');
        console.error('initializeCommunity - No userId found in localStorage');
        window.location.href = '/';
        return;
    }
    document.getElementById('userId').value = userId;
    updateMenu();
    loadBranding();
    showSection('welcome');
    waitForTinyMCE(initializeTinyMCE);
    attachEventListeners();
    console.log('initializeCommunity - Community page initialized successfully');
}

// Updates the menu dynamically based on permissions.
function updateMenu() {
    console.log('updateMenu - Updating menu');
    const menu = document.getElementById('menu');
    const userId = document.getElementById('userId').value;
    menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${userId || ''}">`;
    menu.innerHTML += `
        <button data-submenu="my_website" data-section="my_website_intro">My Web Site <i class="fas fa-caret-down"></i></button>
        <div id="my_website" class="submenu">
            <button data-section="wix">Wix</button>
            <button data-section="wordpress">WordPress</button>
            <button data-section="squarespace">Squarespace</button>
            <button data-section="weebly">Weebly</button>
            <button data-section="joomla">Joomla</button>
            <button data-section="no_website">I Don’t Have a Website Yet</button>
        </div>
        <button data-section="categories">My Categories</button>
        <button data-submenu="referrals" data-section="referrals_intro">My Referrals <i class="fas fa-caret-down"></i></button>
        <div id="referrals" class="submenu">
            <button data-section="visits">Visits</button>
            <button data-section="orders">Orders</button>
        </div>
        <button data-section="settings">My Account</button>
    `;
    if (window.userPermissions.includes('admin')) {
        menu.innerHTML += '<button data-href="/admin" class="btn-admin">Back to Admin</button>';
    }
    menu.innerHTML += '<button id="logOffBtn" class="btn-logoff">Log Off</button>';
    console.log('updateMenu - Menu updated');
}

// Updates integration code for web platforms.
function updateIntegrationCode(section) {
    console.log('updateIntegrationCode - Updating integration code - Section:', section);
    const codeElements = {
        'wix': 'wixCode',
        'wordpress': 'wordpressCode',
        'squarespace': 'squarespaceCode',
        'weebly': 'weeblyCode',
        'joomla': 'joomlaCode'
    };
    const codeId = codeElements[section];
    const userId = document.getElementById('userId').value;
    if (codeId) {
        const codeElement = document.getElementById(codeId);
        if (codeElement) {
            codeElement.textContent = `<iframe src="https://clubmadeira.io/discounts?referrer=${userId || 'unknown'}" width="100%" height="600"></iframe>`;
            console.log('updateIntegrationCode - Code updated - ID:', codeId);
        } else {
            console.warn('updateIntegrationCode - Code element not found - ID:', codeId);
        }
    }
}

// Loads referral visits specific to community page.
async function loadVisits() {
    console.log('loadVisits - Loading visits');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadVisits - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadVisits - Fetching visits - URL:', `${window.apiUrl}/${userId}/visits`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/visits`);
        if (!response.ok) throw new Error(`Failed to fetch visits: ${response.status}`);
        const data = await response.json();
        console.log('loadVisits - Visits fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const visitsThisMonth = [];
            const visitsLastMonth = [];
            const visitsEarlier = [];
            data.visits.forEach(visit => {
                const visitDate = new Date(visit.timestamp);
                if (visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth) visitsThisMonth.push(visit);
                else if ((visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth - 1) || 
                         (visitDate.getFullYear() === thisYear - 1 && thisMonth === 0 && visitDate.getMonth() === 11)) visitsLastMonth.push(visit);
                else visitsEarlier.push(visit);
            });
            updateVisitsTable('visitsListThisMonth', visitsThisMonth);
            updateVisitsTable('visitsListLastMonth', visitsLastMonth);
            updateVisitsTable('visitsListEarlier', visitsEarlier);
            console.log('loadVisits - Visits loaded - Counts:', { thisMonth: visitsThisMonth.length, lastMonth: visitsLastMonth.length, earlier: visitsEarlier.length });
        }
    } catch (error) {
        console.error('loadVisits - Error loading visits - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading visits: ${error.message}`);
    }
}

// Updates the visits table.
function updateVisitsTable(tableId, visits) {
    console.log('updateVisitsTable - Updating table - Table ID:', tableId, 'Visits:', visits.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = visits.length === 0 ? '<tr><td colspan="2">No visits found</td></tr>' : '';
        visits.forEach(visit => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${visit.page}</td><td>${visit.timestamp}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateVisitsTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateVisitsTable - Table element not found - ID:', tableId);
    }
}

// Loads referral orders specific to community page.
async function loadOrders() {
    console.log('loadOrders - Loading orders');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadOrders - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadOrders - Fetching orders - URL:', `${window.apiUrl}/${userId}/orders`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/orders`);
        if (!response.ok) throw new Error(`Failed to fetch orders: ${response.status}`);
        const data = await response.json();
        console.log('loadOrders - Orders fetched - Data:', JSON.stringify(data));
        if (data.status === 'success') {
            const now = new Date();
            const thisMonth = now.getMonth();
            const thisYear = now.getFullYear();
            const ordersThisMonth = [];
            const ordersLastMonth = [];
            const ordersEarlier = [];
            data.orders.forEach(order => {
                const orderDate = new Date(order.timestamp);
                if (orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth) ordersThisMonth.push(order);
                else if ((orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth - 1) || 
                         (orderDate.getFullYear() === thisYear - 1 && thisMonth === 0 && orderDate.getMonth() === 11)) ordersLastMonth.push(order);
                else ordersEarlier.push(order);
            });
            updateOrdersTable('ordersListThisMonth', ordersThisMonth);
            updateOrdersTable('ordersListLastMonth', ordersLastMonth);
            updateOrdersTable('ordersListEarlier', ordersEarlier);
            console.log('loadOrders - Orders loaded - Counts:', { thisMonth: ordersThisMonth.length, lastMonth: ordersLastMonth.length, earlier: ordersEarlier.length });
        }
    } catch (error) {
        console.error('loadOrders - Error loading orders - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading orders: ${error.message}`);
    }
}

// Updates the orders table.
function updateOrdersTable(tableId, orders) {
    console.log('updateOrdersTable - Updating table - Table ID:', tableId, 'Orders:', orders.length);
    const tbody = document.getElementById(tableId);
    if (tbody) {
        tbody.innerHTML = orders.length === 0 ? '<tr><td colspan="4">No orders found</td></tr>' : '';
        orders.forEach(order => {
            const row = document.createElement('tr');
            row.innerHTML = `<td>${order.orderId}</td><td>${order.buyer}</td><td>$${order.total}</td><td>${order.timestamp}</td>`;
            tbody.appendChild(row);
        });
        console.log('updateOrdersTable - Table updated - ID:', tableId);
    } else {
        console.warn('updateOrdersTable - Table element not found - ID:', tableId);
    }
}

// Waits for TinyMCE to load before initializing (specific invocation).
function waitForTinyMCE(callback) {
    console.log('waitForTinyMCE - Checking if TinyMCE is loaded');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('waitForTinyMCE - TinyMCE is loaded, executing callback');
        callback();
    } else {
        console.log('waitForTinyMCE - Waiting for TinyMCE to load...');
        const script = document.querySelector('script[src*="tinymce.min.js"]');
        if (script) {
            script.onload = () => {
                console.log('waitForTinyMCE - TinyMCE script loaded');
                callback();
            };
            script.onerror = () => console.error('waitForTinyMCE - TinyMCE failed to load');
        } else {
            setTimeout(() => waitForTinyMCE(callback), 100);
        }
    }
}// merchant-page.js
// Purpose: Manages page-specific functionality for the /merchant page.

// Initializes the merchant page with permission checks.
function initializeMerchant() {
    console.log('initializeMerchant - Initializing merchant page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializeMerchant - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializeMerchant - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('merchant') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: Merchant or Admin permission required');
        console.error('initializeMerchant - No merchant/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (userId) document.getElementById('userId').value = userId;
    checkAdminPermission();
    loadBranding();
    showSection('info');
    attachEventListeners();
    console.log('initializeMerchant - Merchant page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays merchant products.
async function loadProducts() {
    console.log('loadProducts - Loading products');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadProducts - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadProducts - Fetching products - URL:', `${window.apiUrl}/${userId}/products`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/products`);
        if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
        const data = await response.json();
        console.log('loadProducts - Products fetched - Data:', JSON.stringify(data));
        
        const tbody = document.getElementById('productList');
        if (tbody) {
            tbody.innerHTML = '';
            data.products.forEach(product => tbody.appendChild(createProductRow(product)));
            console.log('loadProducts - Product table updated - Count:', data.products.length);
        } else {
            console.warn('loadProducts - Product list element not found');
        }
    } catch (error) {
        console.error('loadProducts - Error loading products - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading products: ${error.message}`);
    }
}

// Creates a table row for a product.
function createProductRow(product) {
    console.log('createProductRow - Creating row - Product:', JSON.stringify(product));
    const tr = document.createElement('tr');
    tr.innerHTML = `
        <td class="hidden">${product.id}</td>
        <td>${product.category || 'N/A'}</td>
        <td>${product.title}</td>
        <td><a href="${product.product_url}" target="_blank">Link</a></td>
        <td>${product.current_price}</td>
        <td>${product.original_price}</td>
        <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
        <td>${product.qty || 'N/A'}</td>
    `;
    return tr;
}

// Loads store request data specific to merchant page.
async function loadStoreRequest() {
    console.log('loadStoreRequest - Loading store request');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadStoreRequest - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadStoreRequest - Fetching store request - URL:', `${window.apiUrl}/${userId}/siterequest`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/siterequest`);
        if (!response.ok) throw new Error(`Failed to fetch store request: ${response.status}`);
        const data = await response.json();
        const storeRequest = data.site_request || {};
        console.log('loadStoreRequest - Store request fetched - Data:', JSON.stringify(storeRequest));

        document.getElementById('storeName').value = storeRequest.storeName || '';
        if (window.tinyMCELoaded) {
            tinymce.get('aboutStore')?.setContent(storeRequest.aboutStore || '');
        } else {
            document.getElementById('aboutStore').value = storeRequest.aboutStore || '';
        }
        document.getElementById('colorPrefs').value = storeRequest.colorPrefs || '';
        document.getElementById('stylingDetails').value = storeRequest.stylingDetails || '';
        document.getElementById('preferredDomain').value = storeRequest.preferredDomain || 'mystore.uk';

        const emails = storeRequest.emails || ['info'];
        window.emailCount = 0;
        const emailsContainer = document.getElementById('emailsContainer');
        emailsContainer.innerHTML = '';
        emails.forEach((email, index) => {
            window.emailCount++;
            const emailDiv = document.createElement('div');
            emailDiv.className = 'email-section';
            emailDiv.dataset.email = window.emailCount;
            emailDiv.innerHTML = `
                <label for="email${window.emailCount}Name">Email Name:</label>
                <input type="text" id="email${window.emailCount}Name" name="email${window.emailCount}Name" value="${email}">
                <span id="email${window.emailCount}Domain">@${storeRequest.preferredDomain || 'mystore.uk'}</span>
                ${window.emailCount > 1 ? `<button type="button" class="remove-email-btn" onclick="removeEmail(${window.emailCount})">Remove Email</button>` : ''}
            `;
            emailsContainer.appendChild(emailDiv);
        });

        const pages = storeRequest.pages && storeRequest.pages.length >= 2 ? storeRequest.pages : [
            { name: 'Home', content: '' },
            { name: 'Returns Policy', content: '' }
        ];
        window.pageCount = 0;
        const pagesContainer = document.getElementById('pagesContainer');
        pagesContainer.innerHTML = '';
        pages.forEach((page, index) => {
            window.pageCount++;
            const pageDiv = document.createElement('div');
            pageDiv.className = 'page-section';
            pageDiv.dataset.page = window.pageCount;
            pageDiv.innerHTML = `
                <label for="page${window.pageCount}Name">Page Name:</label>
                <input type="text" id="page${window.pageCount}Name" name="page${window.pageCount}Name" value="${page.name || ''}" ${window.pageCount <= 2 ? 'readonly' : ''}>
                <br><br>
                <label for="page${window.pageCount}Content">${window.pageCount === 1 ? 'Home Page' : window.pageCount === 2 ? 'Returns Policy' : 'Page'} Content:</label>
                <textarea id="page${window.pageCount}Content" name="page${window.pageCount}Content">${page.content || ''}</textarea>
                <label for="page${window.pageCount}Images">Additional Images:</label>
                <input type="file" id="page${window.pageCount}Images" name="page${window.pageCount}Images" accept="image/*" multiple>
                ${window.pageCount > 2 ? `<button type="button" class="remove-page-btn" onclick="removePage(${window.pageCount})">Remove Page</button>` : ''}
            `;
            pagesContainer.appendChild(pageDiv);
            if (window.tinyMCELoaded) {
                tinymce.init({
                    selector: `#page${window.pageCount}Content`,
                    height: 200,
                    menubar: false,
                    plugins: 'lists',
                    toolbar: 'bold italic | bullist numlist',
                    setup: editor => {
                        editor.on('init', () => console.log(`TinyMCE editor initialized for page${window.pageCount}`));
                    }
                });
            }
        });

        const widgets = storeRequest.widgets || [];
        document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
            checkbox.checked = widgets.includes(checkbox.value);
        });

        updateDomainPreview();
        console.log('loadStoreRequest - Store request loaded successfully');
    } catch (error) {
        console.error('loadStoreRequest - Error loading store request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading store request: ${error.message}`);
    }
}// page-load.js
// Purpose: Manages page initialization and event listener attachment for navigation and section handling.

// Base initialization function ensuring permission checks before page setup.
function initializePage(permissionRequired, callback) {
    console.log('initializePage - Starting initialization - Permission required:', permissionRequired);
    const token = localStorage.getItem('authToken');
    console.log('initializePage - Retrieved token from localStorage:', token || 'None');
    if (!token) {
        console.warn('initializePage - No auth token found - Redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token); // Assumes decodeJWT is available from site-auth.js
    console.log('initializePage - Decoded token:', JSON.stringify(decoded));
    if (!decoded) {
        console.warn('initializePage - Failed to decode token - Redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    console.log('initializePage - User permissions set:', JSON.stringify(window.userPermissions));
    if (!window.userPermissions.includes(permissionRequired)) {
        console.warn('initializePage - Required permission not found - Required:', permissionRequired, 'Permissions:', window.userPermissions);
        toastr.error(`Permission denied: ${permissionRequired} permission required`);
        window.location.href = '/';
        return;
    }
    console.log('initializePage - Permission check passed - Executing callback');
    callback();
    console.log('initializePage - Initialization completed for permission:', permissionRequired);
}

// Common initialize function handling page-specific setup based on page type.
function initialize(pageType) {
    console.log('initialize - Starting page initialization - Page type:', pageType);
    
    const pageConfigs = {
        'partner': {
            permission: 'admin',
            brandingType: 'partner',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing partner-specific steps');
                attachEventListeners();
                console.log('initialize - Partner-specific steps completed');
            }
        },
        'merchant': {
            permission: 'merchant',
            brandingType: 'merchant',
            initialSection: 'info',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing merchant-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (userId) {
                    console.log('initialize - Setting userId in DOM - ID:', userId);
                    document.getElementById('userId').value = userId;
                } else {
                    console.warn('initialize - No userId found for merchant - Proceeding without setting');
                }
                checkAdminPermission(); // From merchant.js stub
                attachEventListeners();
                console.log('initialize - Merchant-specific steps completed');
            }
        },
        'community': {
            permission: 'community',
            brandingType: 'community',
            initialSection: 'welcome',
            requiresUserId: true,
            extraSteps: () => {
                console.log('initialize - Executing community-specific steps');
                const userId = localStorage.getItem('userId');
                console.log('initialize - Retrieved userId from localStorage:', userId || 'None');
                if (!userId) {
                    console.warn('initialize - User ID not found for community - Redirecting to /');
                    toastr.error('User ID not found in session');
                    window.location.href = '/';
                    return;
                }
                console.log('initialize - Setting userId in DOM - ID:', userId);
                document.getElementById('userId').value = userId;
                updateMenu(); // From community.js stub
                waitForTinyMCE(initializeTinyMCE); // From site-request.js
                attachEventListeners();
                console.log('initialize - Community-specific steps completed');
            }
        },
        'admin': {
            permission: 'admin',
            brandingType: 'admin',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing admin-specific steps');
                attachEventListeners();
                console.log('initialize - Admin-specific steps completed');
            }
        },
        'login': {
            permission: null,
            brandingType: 'login',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing login-specific steps');
                // Minimal setup for login page
                console.log('initialize - Login-specific steps completed');
            }
        },
        'signup': {
            permission: null,
            brandingType: 'signup',
            initialSection: null,
            requiresUserId: false,
            extraSteps: () => {
                console.log('initialize - Executing signup-specific steps');
                // Minimal setup for signup page
                console.log('initialize - Signup-specific steps completed');
            }
        }
    };

    const config = pageConfigs[pageType];
    if (!config) {
        console.error('initialize - Invalid page type provided - Type:', pageType);
        toastr.error('Invalid page type');
        return;
    }
    console.log('initialize - Configuration loaded for page type:', pageType, 'Config:', JSON.stringify(config));

    if (config.permission) {
        console.log('initialize - Performing permission check for:', pageType);
        initializePage(config.permission, () => {
            console.log('initialize - Permission validated for:', pageType);
            performPageSetup(pageType, config);
        });
    } else {
        console.log('initialize - No permission required for:', pageType);
        performPageSetup(pageType, config);
    }
    console.log('initialize - Initialization process completed for:', pageType);
}

// Helper function to perform page setup after permission checks.
function performPageSetup(pageType, config) {
    console.log('performPageSetup - Starting setup - Page type:', pageType);
    
    console.log('performPageSetup - Loading branding - Type:', config.brandingType);
    loadBranding(config.brandingType); // From site-navigation.js

    if (config.initialSection) {
        console.log('performPageSetup - Showing initial section - ID:', config.initialSection);
        showSection(config.initialSection); // From site-navigation.js
    } else {
        console.log('performPageSetup - No initial section specified for:', pageType);
    }

    if (typeof config.extraSteps === 'function') {
        console.log('performPageSetup - Executing extra steps for:', pageType);
        config.extraSteps();
    } else {
        console.log('performPageSetup - No extra steps defined for:', pageType);
    }

    console.log('performPageSetup - Page setup completed for:', pageType);
}

// Attaches click event listeners for section navigation.
function handleSectionClick(event) {
    console.log('handleSectionClick - Section click event triggered');
    const target = event.currentTarget;
    console.log('handleSectionClick - Event target:', target);
    const section = target.getAttribute('data-section');
    const submenu = target.getAttribute('data-submenu');
    console.log('handleSectionClick - Extracted attributes - Section:', section, 'Submenu:', submenu);
    if (submenu) {
        console.log('handleSectionClick - Toggling submenu - ID:', submenu);
        toggleSubmenu(submenu); // From site-navigation.js
    }
    if (section) {
        console.log('handleSectionClick - Showing section - ID:', section);
        showSection(section); // From site-navigation.js
    }
    if (!section && !submenu) {
        console.warn('handleSectionClick - No section or submenu attribute found - Target:', target);
    }
    console.log('handleSectionClick - Event handling completed');
}

// Attaches click event listeners for href navigation with SPA support.
async function handleHrefClick(event, options = {}) {
    console.log('handleHrefClick - Href click event triggered');
    const target = event.currentTarget;
    console.log('handleHrefClick - Event target:', target);
    const href = target.getAttribute('data-href');
    console.log('handleHrefClick - Extracted href:', href);
    console.log('handleHrefClick - Options provided:', JSON.stringify(options));
    if (!href) {
        console.warn('handleHrefClick - No href attribute found - Target:', target);
        return;
    }

    try {
        console.log('handleHrefClick - Initiating fetch for protected page - Href:', href);
        const startTime = Date.now();
        const html = await fetchProtectedPage(href); // From site-navigation.js
        const duration = Date.now() - startTime;
        if (!html) {
            console.error('handleHrefClick - No HTML returned - Href:', href);
            return;
        }
        console.log('handleHrefClick - HTML fetched successfully - Length:', html.length, 'Duration:', `${duration}ms`);

        const { spaPaths = ['/partner'], containerSelector = '.content-container', onLoad = null } = options;
        console.log('handleHrefClick - SPA paths:', spaPaths, 'Container selector:', containerSelector);

        if (spaPaths.includes(href)) {
            console.log('handleHrefClick - Initiating SPA redirect - Href:', href);
            history.pushState({ page: href.slice(1) }, `${href} Page`, href);
            console.log('handleHrefClick - URL updated via history.pushState - New URL:', window.location.href);
            const contentContainer = document.querySelector(containerSelector);
            console.log('handleHrefClick - Content container:', contentContainer);
            if (contentContainer) {
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const content = doc.querySelector(containerSelector) || doc.body;
                console.log('handleHrefClick - Extracted content element:', content.tagName);
                contentContainer.innerHTML = content.innerHTML;
                console.log('handleHrefClick - Content container updated - Href:', href);
                const scripts = doc.querySelectorAll('script:not([src])');
                console.log('handleHrefClick - Found inline scripts:', scripts.length);
                scripts.forEach((script, index) => {
                    if (script.innerHTML.trim()) {
                        console.log('handleHrefClick - Executing inline script', index + 1, 'Content:', script.innerHTML.substring(0, 100) + '...');
                        try {
                            new Function(script.innerHTML)();
                            console.log('handleHrefClick - Inline script', index + 1, 'executed successfully');
                        } catch (e) {
                            console.error('handleHrefClick - Error executing inline script', index + 1, 'Error:', e.message, 'Stack:', e.stack);
                        }
                    }
                });
            } else {
                console.error('handleHrefClick - Content container not found - Selector:', containerSelector, 'Falling back to full reload');
                toastr.error('Failed to update page content: container missing');
                document.body.innerHTML = html;
                console.log('handleHrefClick - Body updated with full HTML - Href:', href);
                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const scripts = doc.querySelectorAll('script:not([src])');
                console.log('handleHrefClick - Found inline scripts for full reload:', scripts.length);
                scripts.forEach((script, index) => {
                    if (script.innerHTML.trim()) {
                        console.log('handleHrefClick - Executing inline script (full reload)', index + 1);
                        try {
                            new Function(script.innerHTML)();
                            console.log('handleHrefClick - Inline script (full reload)', index + 1, 'executed successfully');
                        } catch (e) {
                            console.error('handleHrefClick - Error executing inline script (full reload)', index + 1, 'Error:', e.message, 'Stack:', e.stack);
                        }
                    }
                });
                if (typeof window.initPage === 'function') {
                    console.log('handleHrefClick - Calling window.initPage after full reload');
                    window.initPage();
                }
            }
        } else {
            console.log('handleHrefClick - Performing full page load - Href:', href);
            document.body.innerHTML = html;
            console.log('handleHrefClick - Body updated with new HTML - Href:', href);
            const parser = new DOMParser();
            const doc = parser.parseFromString(html, 'text/html');
            const scripts = doc.querySelectorAll('script:not([src])');
            console.log('handleHrefClick - Found inline scripts for full reload:', scripts.length);
            scripts.forEach((script, index) => {
                if (script.innerHTML.trim()) {
                    console.log('handleHrefClick - Executing inline script (full reload)', index + 1);
                    try {
                        new Function(script.innerHTML)();
                        console.log('handleHrefClick - Inline script (full reload)', index + 1, 'executed successfully');
                    } catch (e) {
                        console.error('handleHrefClick - Error executing inline script (full reload)', index + 1, 'Error:', e.message, 'Stack:', e.stack);
                    }
                }
            });
            if (typeof window.initPage === 'function') {
                console.log('handleHrefClick - Calling window.initPage after full reload');
                window.initPage();
            }
        }

        if (typeof onLoad === 'function') {
            console.log('handleHrefClick - Executing onLoad callback - Href:', href);
            onLoad(href, html);
        }
    } catch (error) {
        console.error('handleHrefClick - Error handling href click - Href:', href, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error('Navigation failed: ' + error.message);
    }
    console.log('handleHrefClick - Event handling completed');
}// partner-page.js
// Purpose: Manages page-specific functionality for the /partner page.

// Initializes the partner page with permission checks.
function initializePartner() {
    console.log('initializePartner - Initializing partner page');
    const token = localStorage.getItem('authToken');
    const userId = localStorage.getItem('userId');
    if (!token) {
        console.error('initializePartner - No token found, redirecting to /');
        window.location.href = '/';
        return;
    }
    const decoded = decodeJWT(token);
    if (!decoded) {
        console.error('initializePartner - Invalid token, redirecting to /');
        window.location.href = '/';
        return;
    }
    window.userPermissions = decoded.permissions || [];
    if (!window.userPermissions.includes('wixpro') && !window.userPermissions.includes('admin')) {
        toastr.error('Permission denied: WixPro or Admin permission required');
        console.error('initializePartner - No wixpro/admin permission, redirecting to /');
        window.location.href = '/';
        return;
    }
    if (userId) document.getElementById('userId').value = userId;
    checkAdminPermission();
    loadBranding();
    showSection('welcome');
    attachEventListeners();
    console.log('initializePartner - Partner page initialized successfully');
}

// Checks and toggles visibility of admin-specific elements.
function checkAdminPermission() {
    console.log('checkAdminPermission - Checking admin permission');
    const backButton = document.querySelector('button[data-href="/admin"]');
    if (backButton) {
        backButton.style.display = window.userPermissions.includes('admin') ? 'block' : 'none';
        console.log('checkAdminPermission - Back button visibility:', backButton.style.display);
    } else {
        console.warn('checkAdminPermission - Back button not found');
    }
}

// Loads and displays partner-specific integrations or tests.
async function loadPartnerIntegrations() {
    console.log('loadPartnerIntegrations - Loading partner integrations');
    const userId = document.getElementById('userId').value;
    if (!userId) {
        console.error('loadPartnerIntegrations - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }
    try {
        console.log('loadPartnerIntegrations - Fetching integrations - URL:', `${window.apiUrl}/${userId}/integrations`);
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/integrations`);
        if (!response.ok) throw new Error(`Failed to fetch integrations: ${response.status}`);
        const data = await response.json();
        console.log('loadPartnerIntegrations - Integrations fetched - Data:', JSON.stringify(data));

        const integrationList = document.getElementById('integrationList');
        if (integrationList) {
            integrationList.innerHTML = '';
            data.integrations.forEach(integration => {
                const li = document.createElement('li');
                li.textContent = `${integration.name} - Status: ${integration.status}`;
                integrationList.appendChild(li);
            });
            console.log('loadPartnerIntegrations - Integration list updated - Count:', data.integrations.length);
        } else {
            console.warn('loadPartnerIntegrations - Integration list element not found');
        }
    } catch (error) {
        console.error('loadPartnerIntegrations - Error loading integrations - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading integrations: ${error.message}`);
    }
}// site-auth.js
// Purpose: Manages authentication-related functionality, including password visibility toggling, 
// user logout, JWT token decoding, and password saving for user management.

// Toggles the visibility of a password input field, updating associated icon.
function togglePassword(fieldId) {
    console.log('togglePassword - Initiating visibility toggle - Field ID:', fieldId);
    const input = document.getElementById(fieldId);
    const icon = input ? input.nextElementSibling : null;
    console.log('togglePassword - Input element retrieved:', input, 'Icon element:', icon);

    if (!input) {
        console.error('togglePassword - Password input not found - Field ID:', fieldId);
        return;
    }
    if (!icon) {
        console.error('togglePassword - Icon element not found for input - Field ID:', fieldId);
        return;
    }

    const isPassword = input.type === 'password';
    console.log('togglePassword - Current input type:', input.type);
    if (isPassword) {
        input.type = 'text';
        icon.classList.remove('fa-eye');
        icon.classList.add('fa-eye-slash');
        console.log('togglePassword - Changed to text visibility - Field ID:', fieldId);
    } else {
        input.type = 'password';
        icon.classList.remove('fa-eye-slash');
        icon.classList.add('fa-eye');
        console.log('togglePassword - Changed to password visibility - Field ID:', fieldId);
    }
    console.log('togglePassword - Toggle completed - New type:', input.type);
}

// Logs the user out, clearing session data and redirecting to home.
function logOff() {
    console.log('logOff - Initiating logout process');
    const confirmed = confirm('Are you sure you want to log off?');
    console.log('logOff - User confirmation received:', confirmed);

    if (confirmed) {
        console.log('logOff - User confirmed logout - Clearing session data');
        localStorage.removeItem('authToken');
        localStorage.removeItem('userId');
        console.log('logOff - Auth token and userId removed from localStorage - Current localStorage:', JSON.stringify(localStorage));
        toastr.success('Logged off successfully');
        console.log('logOff - Success toast displayed');

        setTimeout(() => {
            console.log('logOff - Redirecting to / after 1-second delay');
            window.location.href = '/';
            console.log('logOff - Redirect executed');
        }, 1000);
    } else {
        console.log('logOff - Logout cancelled by user');
    }
    console.log('logOff - Logout process completed');
}

// Decodes a JWT token to extract user data, such as permissions.
function decodeJWT(token) {
    console.log('decodeJWT - Starting JWT decoding - Input token:', token);
    if (!token || typeof token !== 'string') {
        console.warn('decodeJWT - Invalid token: null or not a string - Token:', token);
        return null;
    }
    if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
        console.warn('decodeJWT - Token does not match JWT format - Token:', token);
        return null;
    }
    console.log('decodeJWT - Token format validated - Proceeding with decode');

    const parts = token.split('.');
    console.log('decodeJWT - Token split into parts:', parts);

    try {
        const base64Url = parts[1];
        console.log('decodeJWT - Extracted base64Url from token:', base64Url);
        const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
        console.log('decodeJWT - Converted to base64:', base64);
        const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
        console.log('decodeJWT - Decoded JSON payload:', jsonPayload);
        const decoded = JSON.parse(jsonPayload);
        console.log('decodeJWT - Parsed JWT payload:', JSON.stringify(decoded));
        return decoded;
    } catch (error) {
        console.error('decodeJWT - Error decoding JWT - Error:', error.message, 'Stack:', error.stack, 'Token:', token);
        return null;
    }
}

// Saves an updated user password via an authenticated request.
async function savePassword(newPassword) {
    console.log('savePassword - Starting password save - New password length:', newPassword ? newPassword.length : 'None');
    if (!newPassword || typeof newPassword !== 'string') {
        console.error('savePassword - Invalid password provided - Password:', newPassword);
        toastr.error('Invalid password provided');
        return;
    }

    try {
        console.log('savePassword - Sending password update via authenticatedFetch');
        const startTime = Date.now();
        const response = await authenticatedFetch('/update-password', { // Assumes endpoint exists
            method: 'POST',
            body: JSON.stringify({ password: newPassword })
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('savePassword - No response from fetch');
            toastr.error('Failed to save password: No server response');
            return;
        }

        console.log('savePassword - Response received - Status:', response.status, 'Duration:', `${duration}ms`);
        const result = await response.json();
        console.log('savePassword - Save response data:', JSON.stringify(result));

        if (result.status === 'success') {
            console.log('savePassword - Password saved successfully');
            toastr.success('Password updated successfully');
        } else {
            console.error('savePassword - Server reported failure - Message:', result.message);
            toastr.error(result.message || 'Failed to save password');
        }
    } catch (error) {
        console.error('savePassword - Error saving password - Error:', error.message, 'Stack:', error.stack);
        toastr.error('Failed to save password: ' + error.message);
    }
    console.log('savePassword - Password save process completed');
}// site-navigation.js
// Purpose: Handles navigation and content loading across the site, including authenticated fetch requests, 
// protected page loading, branding, and section/submenu management.

const apiUrl = 'https://clubmadeira.io'; // Default API URL, override if needed

// Performs authenticated fetch requests for protected resources, ensuring proper authorization headers.
async function authenticatedFetch(url, options = {}) {
    console.log('authenticatedFetch - Initiating fetch - URL:', url);
    const token = localStorage.getItem('authToken');
    console.log('authenticatedFetch - Token retrieved from localStorage:', token || 'None');
    console.log('authenticatedFetch - Options provided:', JSON.stringify(options));

    if (!token) {
        console.warn('authenticatedFetch - No authentication token found - Redirecting to /');
        toastr.error('No authentication token found. Please log in.');
        window.location.href = '/';
        return null;
    }

    const headers = {
        ...options.headers,
        'Authorization': `Bearer ${token}`,
        'Content-Type': options.body instanceof FormData ? undefined : 'application/json'
    };
    console.log('authenticatedFetch - Request headers constructed:', JSON.stringify(headers));

    const finalOptions = {
        ...options,
        headers: headers
    };
    console.log('authenticatedFetch - Final fetch options:', JSON.stringify(finalOptions));

    try {
        console.log('authenticatedFetch - Sending fetch request to:', url);
        const startTime = Date.now();
        const response = await fetch(url, finalOptions);
        const duration = Date.now() - startTime;
        console.log('authenticatedFetch - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);
        console.log('authenticatedFetch - Response headers:', JSON.stringify([...response.headers.entries()]));
        console.log('authenticatedFetch - Response URL:', response.url);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('authenticatedFetch - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Server returned ${response.status}: ${errorText}`);
        }

        if (response.status === 401) {
            console.warn('authenticatedFetch - Unauthorized response (401) - Clearing token and redirecting to /');
            toastr.error('Session expired. Please log in again.');
            localStorage.removeItem('authToken');
            localStorage.removeItem('userId');
            window.location.href = '/';
            return null;
        }

        console.log('authenticatedFetch - Fetch successful - Response OK');
        return response;
    } catch (error) {
        console.error('authenticatedFetch - Error during fetch - URL:', url, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(error.message || 'Failed to connect to server');
        return null;
    }
}

// Fetches protected page content for navigation, ensuring cache-busting with timestamps.
async function fetchProtectedPage(url, options = {}) {
    console.log('fetchProtectedPage - Starting fetch - URL:', url);
    const token = localStorage.getItem('authToken');
    console.log('fetchProtectedPage - Token:', token || 'None');
    console.log('fetchProtectedPage - Options:', JSON.stringify(options));
    if (!token) {
        console.warn('fetchProtectedPage - No token found - Redirecting to /');
        toastr.error('No authentication token found. Please log in.');
        window.location.href = '/';
        return null;
    }
    try {
        const timestamp = Date.now();
        const fetchUrl = `${apiUrl}${url}?t=${timestamp}`;
        console.log('fetchProtectedPage - Constructed fetch URL with timestamp:', fetchUrl);
        const startTime = Date.now();
        const response = await fetch(fetchUrl, {
            method: 'GET',
            headers: {
                'Authorization': `Bearer ${token}`,
                'Accept': 'text/html'
            }
        });
        const duration = Date.now() - startTime;
        console.log('fetchProtectedPage - Response received - Status:', response.status, 'Duration:', `${duration}ms`);
        if (!response.ok) {
            const errorText = await response.text();
            console.error('fetchProtectedPage - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Server returned ${response.status}: ${errorText}`);
        }
        const html = await response.text();
        console.log('fetchProtectedPage - Fetched HTML (first 100 chars):', html.substring(0, 100) + '...', 'Total length:', html.length);
        return html;
    } catch (error) {
        console.error('fetchProtectedPage - Error fetching page - URL:', url, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(error.message || 'Failed to load protected page');
        return null;
    }
}

// Loads page-specific branding content into a specified container.
async function loadBranding(brandingType, containerId = 'brandingContent') {
    console.log('loadBranding - Starting branding load - Type:', brandingType, 'Container ID:', containerId);
    const defaultContents = {
        'partner': '<h1>Partner Dashboard</h1>',
        'merchant': '<h1>Merchant Dashboard</h1>',
        'community': '<h1>Community Dashboard</h1>',
        'admin': '<h1>Admin Dashboard</h1>',
        'login': '<h1>Login</h1>',
        'signup': '<h1>Signup</h1>'
    };
    const defaultContent = defaultContents[brandingType] || '<h1>Dashboard</h1>';
    console.log('loadBranding - Default content for type:', brandingType, 'is:', defaultContent);

    const container = document.getElementById(containerId);
    console.log('loadBranding - Container element:', container);
    if (!container) {
        console.error('loadBranding - Container not found - ID:', containerId);
        return;
    }

    try {
        console.log('loadBranding - Fetching branding from:', `${apiUrl}/branding`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${apiUrl}/branding`);
        const duration = Date.now() - startTime;
        if (!response) {
            console.warn('loadBranding - No response from fetch - Using default content - Type:', brandingType);
            container.innerHTML = defaultContent;
            return;
        }
        console.log('loadBranding - Fetch completed - Duration:', `${duration}ms`);
        const data = await response.json();
        console.log('loadBranding - Branding data received:', JSON.stringify(data));
        const brandingContent = data.content || defaultContent;
        console.log('loadBranding - Setting branding content:', brandingContent);
        container.innerHTML = brandingContent;
        console.log('loadBranding - Branding content updated in container:', containerId);
    } catch (error) {
        console.error('loadBranding - Error loading branding - Type:', brandingType, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading ${brandingType} branding: ${error.message}`);
        container.innerHTML = defaultContent;
        console.log('loadBranding - Fallback to default content applied - Container ID:', containerId);
    }
}

// Displays a specific section while hiding others, with optional load callback.
function showSection(sectionId, onSectionLoad = null) {
    console.log('showSection - Starting section display - Section ID:', sectionId);
    console.log('showSection - Callback provided:', typeof onSectionLoad === 'function' ? 'Yes' : 'No');
    const allSections = document.querySelectorAll('.section');
    console.log('showSection - Found sections to hide:', allSections.length);
    allSections.forEach(s => {
        console.log('showSection - Hiding section - ID:', s.id);
        s.classList.remove('active');
        s.style.display = 'none';
    });
    const activeSection = document.getElementById(sectionId);
    console.log('showSection - Target section element:', activeSection);
    if (!activeSection) {
        console.error('showSection - Section not found - ID:', sectionId);
        return;
    }
    activeSection.classList.add('active');
    activeSection.style.display = 'block';
    console.log('showSection - Section activated - ID:', sectionId);
    if (typeof onSectionLoad === 'function') {
        console.log('showSection - Executing onSectionLoad callback for:', sectionId);
        onSectionLoad(sectionId);
    } else {
        console.log('showSection - No callback provided, calling loadSection directly');
        loadSection(sectionId);
    }
    console.log('showSection - Section display completed');
}

// Loads content or configures DOM elements for a specific section based on its ID.
async function loadSection(sectionId) {
    console.log('loadSection - Starting section load - Section ID:', sectionId);

    // Handle static or test sections
    if (['welcome', 'page_visit_test', 'order_test', 'affiliateProgramsIntro', 'userManagementIntro', 'testScriptsIntro', 'referralTestsIntro'].includes(sectionId)) {
        console.log('loadSection - Processing static/test section:', sectionId);
        if (sectionId === 'page_visit_test' || sectionId === 'order_test') {
            const timestampId = sectionId === 'page_visit_test' ? 'pageTimestamp' : 'orderTimestamp';
            const timestampElement = document.getElementById(timestampId);
            console.log('loadSection - Timestamp element for', timestampId, ':', timestampElement);

            if (timestampElement) {
                const timestamp = getCurrentTimestamp(); // From site-request.js
                timestampElement.value = timestamp;
                console.log('loadSection - Set timestamp for', timestampId, 'to:', timestamp);
            } else {
                console.error('loadSection - Timestamp element not found - ID:', timestampId);
            }

            const refererId = sectionId === 'page_visit_test' ? 'pageReferer' : 'orderReferer';
            console.log('loadSection - Populating referer dropdown - ID:', refererId);
            await populateRefererDropdown(refererId); // Page-specific stub
        }
        console.log('loadSection - Static/test section load completed');
        return;
    }

    // Handle category listings
    if (sectionId === 'deal_listings') {
        console.log('loadSection - Loading deal listings');
        await loadCategories(); // From category-management.js
        console.log('loadSection - Deal listings loaded');
        return;
    }

    // Handle entity lists
    if (sectionId === 'merchants') {
        console.log('loadSection - Loading merchants');
        await loadMerchants(); // Page-specific stub
        console.log('loadSection - Merchants loaded');
        return;
    }
    if (sectionId === 'communities') {
        console.log('loadSection - Loading communities');
        await loadCommunities(); // Page-specific stub
        console.log('loadSection - Communities loaded');
        return;
    }
    if (sectionId === 'partners') {
        console.log('loadSection - Loading partners');
        await loadPartners(); // Page-specific stub
        console.log('loadSection - Partners loaded');
        return;
    }

    // Handle configuration sections
    console.log('loadSection - Attempting to load config for section:', sectionId);
    try {
        const fetchUrl = `${window.apiUrl || apiUrl}/config`;
        console.log('loadSection - Fetching config from:', fetchUrl);
        const startTime = Date.now();
        const response = await authenticatedFetch(fetchUrl);
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('loadSection - No response from fetch for config - Section:', sectionId);
            toastr.error('Failed to load section credentials: No response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSection - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to fetch /config: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSection - Config data received - Duration:', `${duration}ms`, 'Data:', JSON.stringify(data));
        const config = data.config[sectionId] || {};
        console.log('loadSection - Config for section:', sectionId, 'is:', JSON.stringify(config));

        // Populate fields based on section
        if (sectionId === 'amazon_uk') {
            const elements = {
                amazonAccessKey: 'ACCESS_KEY',
                amazonSecretKey: 'SECRET_KEY',
                amazonAssociateTag: 'ASSOCIATE_TAG',
                amazonCountry: 'COUNTRY'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'ebay_uk') {
            const el = document.getElementById('ebayAppId');
            console.log('loadSection - eBay App ID element:', el);
            if (el) {
                el.value = config.APP_ID || '';
                console.log('loadSection - Set ebayAppId to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: ebayAppId');
            }
        } else if (sectionId === 'awin') {
            const el = document.getElementById('awinApiToken');
            console.log('loadSection - Awin API Token element:', el);
            if (el) {
                el.value = config.API_TOKEN || '';
                console.log('loadSection - Set awinApiToken to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: awinApiToken');
            }
        } else if (sectionId === 'cj') {
            const elements = {
                cjApiKey: 'API_KEY',
                cjWebsiteId: 'WEBSITE_ID'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'textmagic') {
            const elements = {
                textmagicUsername: 'USERNAME',
                textmagicApiKey: 'API_KEY'
            };
            Object.entries(elements).forEach(([id, key]) => {
                const el = document.getElementById(id);
                console.log('loadSection - Checking element - ID:', id, 'Element:', el);
                if (el) {
                    el.value = config[key] || '';
                    console.log('loadSection - Set', id, 'to:', el.value);
                } else {
                    console.error('loadSection - Element not found - ID:', id);
                }
            });
        } else if (sectionId === 'tiny') {
            const el = document.getElementById('tinyApiKey');
            console.log('loadSection - Tiny API Key element:', el);
            if (el) {
                el.value = config.API_KEY || '';
                console.log('loadSection - Set tinyApiKey to:', el.value);
            } else {
                console.error('loadSection - Element not found - ID: tinyApiKey');
            }
        }

        console.log('loadSection - Successfully loaded credentials for:', sectionId);
        toastr.success(`Loaded credentials for ${sectionId}`);
    } catch (error) {
        console.error('loadSection - Error loading section credentials - Section:', sectionId, 'Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading credentials: ${error.message}`);
    }
    console.log('loadSection - Section load completed - Section ID:', sectionId);
}

// Toggles submenu visibility for navigation menus.
function toggleSubmenu(submenuId) {
    console.log('toggleSubmenu - Starting toggle - Submenu ID:', submenuId);
    const submenu = document.getElementById(submenuId);
    console.log('toggleSubmenu - Submenu element retrieved:', submenu);
    if (!submenu) {
        console.warn('toggleSubmenu - Submenu element not found - ID:', submenuId);
        return;
    }
    const wasOpen = submenu.classList.contains('open');
    submenu.classList.toggle('open');
    const isOpen = submenu.classList.contains('open');
    console.log('toggleSubmenu - Toggled state - ID:', submenuId, 'Was open:', wasOpen, 'Now open:', isOpen);
    console.log('toggleSubmenu - Toggle completed');
}// site-request.js
// Purpose: Manages site request functionality for merchants and communities (e.g., merchant.html, community.html), 
// including page/email management, domain handling, and TinyMCE integration.

// Adds a page to the site request form based on type (merchant/community).
function addPage(type = 'merchant') {
    console.log('addPage - Adding page to site request - Type:', type);
    const maxPages = 5;
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('addPage - Current page count:', pageCount);

    if (pageCount >= maxPages) {
        console.warn('addPage - Maximum pages reached - Max:', maxPages);
        toastr.error(`Maximum of ${maxPages} pages allowed`);
        return;
    }

    pageCount++;
    console.log('addPage - Incrementing page count to:', pageCount);
    localStorage.setItem(`${type}PageCount`, pageCount);

    const container = document.getElementById('pagesContainer');
    console.log('addPage - Pages container:', container);
    if (!container) {
        console.error('addPage - Pages container not found');
        return;
    }

    const pageDiv = document.createElement('div');
    pageDiv.className = 'page-section';
    pageDiv.dataset.page = pageCount;
    const isMerchantDefault = type === 'merchant' && pageCount <= 2;
    const pageName = isMerchantDefault ? (pageCount === 1 ? 'Home' : 'Returns Policy') : '';
    pageDiv.innerHTML = `
        <label for="page${pageCount}Name">Page Name:</label>
        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${pageName}" ${isMerchantDefault ? 'readonly' : ''} placeholder="e.g., ${type === 'merchant' ? 'Products' : 'Events'}">
        <br><br>
        <label for="page${pageCount}Content">${isMerchantDefault ? (pageCount === 1 ? 'Home Page' : 'Returns Policy') : 'Page'} Content:</label>
        <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
        <label for="page${pageCount}Images">Additional Images:</label>
        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
        ${pageCount > (type === 'merchant' ? 2 : 1) ? `<button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>` : ''}
    `;
    container.appendChild(pageDiv);
    console.log('addPage - New page section added - Page number:', pageCount);

    tinymce.remove(`#page${pageCount}Content`);
    initializeTinyMCE(`#page${pageCount}Content`);
    console.log('addPage - TinyMCE initialized for new page');
    console.log('addPage - Page addition completed');
}

// Removes a page from the site request form based on type (merchant/community).
function removePage(pageNum, type = 'merchant') {
    console.log('removePage - Removing page - Page number:', pageNum, 'Type:', type);
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('removePage - Current page count:', pageCount);
    const minPages = type === 'merchant' ? 2 : 1;

    if (pageCount <= minPages) {
        console.warn('removePage - Cannot remove below minimum pages - Min:', minPages);
        toastr.error(`Cannot remove the last ${type === 'merchant' ? 'Home or Returns Policy' : ''} page${minPages > 1 ? 's' : ''}`);
        return;
    }

    const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
    console.log('removePage - Page section to remove:', pageSection);
    if (pageSection) {
        tinymce.get(`page${pageNum}Content`)?.remove();
        console.log('removePage - Removed TinyMCE instance for page:', pageNum);
        pageSection.remove();
        pageCount--;
        localStorage.setItem(`${type}PageCount`, pageCount);
        console.log('removePage - Page removed, new page count:', pageCount);
    } else {
        console.error('removePage - Page section not found - Page number:', pageNum);
    }
    console.log('removePage - Removal completed');
}

// Adds an email to the site request form.
function addEmail(type = 'merchant') {
    console.log('addEmail - Adding email to site request - Type:', type);
    const maxEmails = 5;
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('addEmail - Current email count:', emailCount);

    if (emailCount >= maxEmails) {
        console.warn('addEmail - Maximum emails reached - Max:', maxEmails);
        toastr.error(`Maximum of ${maxEmails} email addresses allowed`);
        return;
    }

    emailCount++;
    console.log('addEmail - Incrementing email count to:', emailCount);
    localStorage.setItem(`${type}EmailCount`, emailCount);

    const container = document.getElementById('emailsContainer');
    console.log('addEmail - Emails container:', container);
    if (!container) {
        console.error('addEmail - Emails container not found');
        return;
    }

    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('addEmail - Using domain:', domain);
    const emailDiv = document.createElement('div');
    emailDiv.className = 'email-section';
    emailDiv.dataset.email = emailCount;
    emailDiv.innerHTML = `
        <label for="email${emailCount}Name">Email Name:</label>
        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
        <span id="email${emailCount}Domain">@${domain}</span>
        <button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>
    `;
    container.appendChild(emailDiv);
    console.log('addEmail - New email section added - Email number:', emailCount);

    updateDomainPreview(type);
    console.log('addEmail - Email addition completed');
}

// Removes an email from the site request form.
function removeEmail(emailNum, type = 'merchant') {
    console.log('removeEmail - Removing email - Email number:', emailNum, 'Type:', type);
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('removeEmail - Current email count:', emailCount);

    if (emailCount <= 1) {
        console.warn('removeEmail - Cannot remove the last email');
        toastr.error('Cannot remove the last email');
        return;
    }

    const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
    console.log('removeEmail - Email section to remove:', emailSection);
    if (emailSection) {
        emailSection.remove();
        emailCount--;
        localStorage.setItem(`${type}EmailCount`, emailCount);
        console.log('removeEmail - Email removed, new email count:', emailCount);
        updateDomainPreview(type);
    } else {
        console.error('removeEmail - Email section not found - Email number:', emailNum);
    }
    console.log('removeEmail - Removal completed');
}

// Updates the domain preview and email domain spans for the site request.
function updateDomainPreview(type = 'merchant') {
    console.log('updateDomainPreview - Updating domain preview - Type:', type);
    const domain = document.getElementById('preferredDomain')?.value || (type === 'merchant' ? 'mystore.uk' : 'mycommunity.org');
    console.log('updateDomainPreview - Domain value:', domain);

    const previewElement = document.getElementById('domainPreview');
    if (previewElement) {
        previewElement.textContent = `@${domain}`;
        console.log('updateDomainPreview - Updated domain preview to:', `@${domain}`);
    }

    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('updateDomainPreview - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const domainSpan = document.getElementById(`email${i}Domain`);
        console.log('updateDomainPreview - Checking domain span - ID:', `email${i}Domain`, 'Element:', domainSpan);
        if (domainSpan) {
            domainSpan.textContent = `@${domain}`;
            console.log('updateDomainPreview - Updated email domain - ID:', `email${i}Domain`, 'to:', `@${domain}`);
        }
    }
    console.log('updateDomainPreview - Update completed');
}

// Checks domain availability for the site request.
async function checkDomainAvailability() {
    console.log('checkDomainAvailability - Starting domain availability check');
    const domainInput = document.getElementById('preferredDomain');
    const domain = domainInput?.value;
    console.log('checkDomainAvailability - Domain to check:', domain);

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domain) {
        console.warn('checkDomainAvailability - No domain provided');
        toastr.error('Please enter a preferred domain name');
        return false;
    }
    if (!domainRegex.test(domain)) {
        console.warn('checkDomainAvailability - Invalid domain format - Domain:', domain);
        toastr.error('Invalid domain name (e.g., mystore.uk)');
        return false;
    }

    console.log('checkDomainAvailability - Domain format valid, proceeding with check');
    toastr.info(`Checking availability for ${domain}...`);

    try {
        const startTime = Date.now();
        const response = await fetch(`https://clubmadeira.io/check-domain?domain=${encodeURIComponent(domain)}`, {
            method: 'GET',
            credentials: 'same-origin'
        });
        const duration = Date.now() - startTime;
        console.log('checkDomainAvailability - Fetch response received - Status:', response.status, 'Duration:', `${duration}ms`);

        if (!response.ok) {
            const errorText = await response.text();
            console.error('checkDomainAvailability - Fetch failed - Status:', response.status, 'Error text:', errorText);
            if (response.status === 403) {
                throw new Error('Permission denied - please log in');
            }
            throw new Error(`Server error: ${errorText}`);
        }

        const result = await response.json();
        console.log('checkDomainAvailability - Availability result:', JSON.stringify(result));
        if (result.available) {
            console.log('checkDomainAvailability - Domain available:', domain);
            toastr.success(`${result.domain} is available!`);
            return true;
        } else {
            console.warn('checkDomainAvailability - Domain not available:', domain);
            toastr.error(`${result.domain} is not available`);
            if (domainInput) domainInput.value = '';
            return false;
        }
    } catch (error) {
        console.error('checkDomainAvailability - Error checking domain - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to check domain availability: ${error.message}`);
        return false;
    }
}

// Loads TinyMCE editor for site request content editing.
async function loadTinyMCE() {
    console.log('loadTinyMCE - Starting TinyMCE load');
    if (typeof tinymce !== 'undefined' && tinymce.init) {
        console.log('loadTinyMCE - TinyMCE already loaded');
        initializeTinyMCE();
        return;
    }

    console.log('loadTinyMCE - Loading TinyMCE script');
    return new Promise((resolve, reject) => {
        const script = document.createElement('script');
        script.src = 'https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js';
        script.referrerpolicy = 'origin';
        document.head.appendChild(script);
        console.log('loadTinyMCE - Script element added to head:', script.src);

        script.onload = () => {
            console.log('loadTinyMCE - TinyMCE script loaded successfully');
            initializeTinyMCE();
            resolve();
        };
        script.onerror = () => {
            console.error('loadTinyMCE - Failed to load TinyMCE script');
            toastr.error('Failed to load rich text editor');
            reject(new Error('TinyMCE load failed'));
        };
    });
}

// Initializes TinyMCE editor for site request content editing with a specific selector.
function initializeTinyMCE(selector = 'textarea[name$="Content"], #aboutStore, #aboutCommunity') {
    console.log('initializeTinyMCE - Starting TinyMCE initialization - Selector:', selector);
    if (!window.tinymce) {
        console.error('initializeTinyMCE - TinyMCE not available');
        return;
    }

    tinymce.remove(selector);
    console.log('initializeTinyMCE - Removed existing TinyMCE instances for selector:', selector);

    tinymce.init({
        selector: selector,
        height: 200,
        menubar: false,
        plugins: 'lists',
        toolbar: 'bold italic | bullist numlist',
        setup: editor => {
            editor.on('init', () => {
                console.log('initializeTinyMCE - TinyMCE editor initialized for:', editor.id);
            });
        }
    });
    console.log('initializeTinyMCE - TinyMCE initialization completed');
}

// Generates a formatted timestamp for site request forms.
function getCurrentTimestamp() {
    console.log('getCurrentTimestamp - Generating current timestamp');
    const now = new Date();
    console.log('getCurrentTimestamp - Current date object:', now);
    const year = now.getFullYear();
    const month = String(now.getMonth() + 1).padStart(2, '0');
    const day = String(now.getDate()).padStart(2, '0');
    const hours = String(now.getHours()).padStart(2, '0');
    const minutes = String(now.getMinutes()).padStart(2, '0');
    const seconds = String(now.getSeconds()).padStart(2, '0');
    console.log('getCurrentTimestamp - Extracted components - Year:', year, 'Month:', month, 'Day:', day, 'Hours:', hours, 'Minutes:', minutes, 'Seconds:', seconds);
    const timestamp = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
    console.log('getCurrentTimestamp - Generated timestamp:', timestamp);
    return timestamp;
}

// Saves the site request form data for either a merchant store or community site.
async function saveSiteRequest(type = 'merchant') {
    console.log('saveSiteRequest - Starting site request save - Type:', type);
    const userId = document.getElementById('userId')?.value || localStorage.getItem('userId');
    console.log('saveSiteRequest - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSiteRequest - User ID not found in session or DOM');
        toastr.error('User ID not found in session');
        return;
    }

    const nameField = type === 'merchant' ? 'storeName' : 'communityName';
    const aboutField = type === 'merchant' ? 'aboutStore' : 'aboutCommunity';
    const logoField = type === 'merchant' ? 'storeLogos' : 'communityLogos';
    const defaultDomain = type === 'merchant' ? 'mystore.uk' : 'mycommunity.org';

    const siteRequest = {
        userId: userId,
        type: type,
        [nameField]: document.getElementById(nameField)?.value.trim() || '',
        [aboutField]: tinymce.get(aboutField)?.getContent() || document.getElementById(aboutField)?.value || '',
        [logoField]: [],
        colorPrefs: document.getElementById('colorPrefs')?.value.trim() || '',
        stylingDetails: document.getElementById('stylingDetails')?.value.trim() || '',
        preferredDomain: document.getElementById('preferredDomain')?.value.trim() || defaultDomain,
        emails: [],
        pages: [],
        widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
    };
    console.log('saveSiteRequest - Initial site request object:', JSON.stringify(siteRequest));

    // Validation
    if (!siteRequest[nameField]) {
        console.warn('saveSiteRequest - Name field is empty - Field:', nameField);
        toastr.error(`${type === 'merchant' ? 'Store' : 'Community'} name is required`);
        return;
    }

    const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
    if (!domainRegex.test(siteRequest.preferredDomain)) {
        console.warn('saveSiteRequest - Invalid domain format - Domain:', siteRequest.preferredDomain);
        toastr.error(`Invalid domain name (e.g., ${defaultDomain})`);
        return;
    }

    // Handle logos
    const logoFiles = document.getElementById(logoField)?.files || [];
    console.log('saveSiteRequest - Logo files count:', logoFiles.length);
    if (logoFiles.length > 5) {
        console.warn('saveSiteRequest - Too many logos - Count:', logoFiles.length);
        toastr.error('Maximum of 5 logos allowed');
        return;
    }
    for (let i = 0; i < logoFiles.length; i++) {
        const reader = new FileReader();
        await new Promise(resolve => {
            reader.onload = () => {
                siteRequest[logoField].push(reader.result);
                console.log('saveSiteRequest - Added logo - Index:', i, 'Result length:', reader.result.length);
                resolve();
            };
            reader.readAsDataURL(logoFiles[i]);
        });
    }

    // Collect emails
    let emailCount = parseInt(localStorage.getItem(`${type}EmailCount`) || 1);
    console.log('saveSiteRequest - Collecting emails - Email count:', emailCount);
    for (let i = 1; i <= emailCount; i++) {
        const emailInput = document.getElementById(`email${i}Name`);
        if (emailInput && emailInput.value.trim()) {
            siteRequest.emails.push(emailInput.value.trim());
            console.log('saveSiteRequest - Added email - Index:', i, 'Value:', emailInput.value.trim());
        }
    }

    // Collect pages
    let pageCount = parseInt(localStorage.getItem(`${type}PageCount`) || (type === 'merchant' ? 2 : 1));
    console.log('saveSiteRequest - Collecting pages - Page count:', pageCount);
    for (let i = 1; i <= pageCount; i++) {
        const nameInput = document.getElementById(`page${i}Name`);
        const contentEditor = tinymce.get(`page${i}Content`);
        const contentFallback = document.getElementById(`page${i}Content`);
        const imagesInput = document.getElementById(`page${i}Images`);
        if (nameInput && nameInput.value.trim()) {
            const page = {
                name: nameInput.value.trim(),
                content: contentEditor ? contentEditor.getContent() : (contentFallback?.value || ''),
                images: []
            };
            console.log('saveSiteRequest - Processing page - Index:', i, 'Name:', page.name);

            if (imagesInput && imagesInput.files.length > 0) {
                for (let j = 0; j < imagesInput.files.length; j++) {
                    const reader = new FileReader();
                    await new Promise(resolve => {
                        reader.onload = () => {
                            page.images.push(reader.result);
                            console.log('saveSiteRequest - Added image to page - Page:', i, 'Image index:', j, 'Result length:', reader.result.length);
                            resolve();
                        };
                        reader.readAsDataURL(imagesInput.files[j]);
                    });
                }
            }
            siteRequest.pages.push(page);
        }
    }

    const minPages = type === 'merchant' ? 2 : 1;
    if (siteRequest.pages.length < minPages || (type === 'merchant' && (!siteRequest.pages.some(p => p.name === 'Home') || !siteRequest.pages.some(p => p.name === 'Returns Policy')))) {
        console.warn('saveSiteRequest - Insufficient or missing required pages - Pages:', siteRequest.pages.length, 'Required:', minPages);
        toastr.error(type === 'merchant' ? 'Home and Returns Policy pages are required' : 'At least one page is required');
        return;
    }

    // Save to server
    try {
        console.log('saveSiteRequest - Sending site request to server - URL:', `${apiUrl}/${userId}/siterequest`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`, {
            method: 'POST',
            body: JSON.stringify(siteRequest)
        });
        const duration = Date.now() - startTime;

        if (!response) {
            console.error('saveSiteRequest - No response from fetch');
            toastr.error('Failed to save site request: No server response');
            return;
        }
        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSiteRequest - Fetch failed - Status:', response.status, 'Error text:', errorText);
            throw new Error(`Failed to save site request: ${response.status} - ${errorText}`);
        }

        console.log('saveSiteRequest - Save successful - Duration:', `${duration}ms`);
        toastr.success(`${type === 'merchant' ? 'Store' : 'Site'} request saved successfully`);
    } catch (error) {
        console.error('saveSiteRequest - Error saving site request - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error saving ${type === 'merchant' ? 'store' : 'site'} request: ${error.message}`);
    }
    console.log('saveSiteRequest - Save process completed');
}// user-management.js
// Purpose: Manages user-specific settings and Wix client ID operations.

// Loads user settings into the DOM.
async function loadSettings() {
    console.log('loadSettings - Starting settings load');
    const userId = localStorage.getItem('userId');
    console.log('loadSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadSettings - Fetching settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch settings: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadSettings - Settings fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with settings
        const referrerId = document.getElementById('referrerId');
        const contactName = document.getElementById('contactName');
        const websiteUrl = document.getElementById('websiteUrl');
        const emailAddress = document.getElementById('emailAddress');
        const phoneNumber = document.getElementById('phoneNumber');

        if (referrerId) referrerId.textContent = userId;
        if (contactName) contactName.value = data.contact_name || '';
        if (websiteUrl) websiteUrl.value = data.website_url || '';
        if (emailAddress) emailAddress.value = data.email_address || '';
        if (phoneNumber) phoneNumber.value = data.phone_number || '';

        console.log('loadSettings - DOM updated - Fields:', {
            referrerId: userId,
            contactName: data.contact_name || '',
            websiteUrl: data.website_url || '',
            emailAddress: data.email_address || '',
            phoneNumber: data.phone_number || ''
        });
    } catch (error) {
        console.error('loadSettings - Error loading settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading settings: ${error.message}`);
    }
    console.log('loadSettings - Settings load completed');
}

// Saves user settings from the DOM.
async function saveSettings(settings) {
    console.log('saveSettings - Starting settings save - Settings:', JSON.stringify(settings));
    const userId = localStorage.getItem('userId');
    console.log('saveSettings - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveSettings - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveSettings - Sending settings via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/user`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/user`, {
            method: 'PUT',
            body: JSON.stringify(settings)
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveSettings - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save settings: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveSettings - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Settings saved successfully');
    } catch (error) {
        console.error('saveSettings - Error saving settings - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save settings: ${error.message}`);
    }
    console.log('saveSettings - Save process completed');
}

// Loads Wix client ID into the DOM.
async function loadWixClientId() {
    console.log('loadWixClientId - Starting Wix client ID load');
    const userId = localStorage.getItem('userId');
    console.log('loadWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('loadWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('loadWixClientId - Fetching Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`);
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('loadWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to fetch Wix client ID: ${response.status} - ${errorText}`);
        }

        const data = await response.json();
        console.log('loadWixClientId - Wix client ID fetched - Data:', JSON.stringify(data), 'Duration:', `${duration}ms`);

        // Update DOM with Wix client ID
        const wixClientIdField = document.getElementById('wixClientId');
        if (wixClientIdField) {
            wixClientIdField.value = data.client_id || data.clientId || ''; // Flexible key name
            console.log('loadWixClientId - DOM updated - wixClientId:', data.client_id || data.clientId || '');
        } else {
            console.warn('loadWixClientId - Wix client ID field not found - ID: wixClientId');
        }
    } catch (error) {
        console.error('loadWixClientId - Error loading Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Error loading Wix client ID: ${error.message}`);
    }
    console.log('loadWixClientId - Wix client ID load completed');
}

// Saves Wix client ID from the DOM.
async function saveWixClientId(clientId) {
    console.log('saveWixClientId - Starting Wix client ID save - Client ID:', clientId);
    const userId = localStorage.getItem('userId');
    console.log('saveWixClientId - Retrieved userId:', userId);

    if (!userId) {
        console.error('saveWixClientId - User ID not found in session');
        toastr.error('User ID not found in session');
        return;
    }

    try {
        console.log('saveWixClientId - Sending Wix client ID via authenticatedFetch - URL:', `${window.apiUrl}/${userId}/wix-client-id`);
        const startTime = Date.now();
        const response = await authenticatedFetch(`${window.apiUrl}/${userId}/wix-client-id`, {
            method: 'POST',
            body: JSON.stringify({ clientId })
        });
        const duration = Date.now() - startTime;

        if (!response.ok) {
            const errorText = await response.text();
            console.error('saveWixClientId - Fetch failed - Status:', response.status, 'Error:', errorText);
            throw new Error(`Failed to save Wix client ID: ${response.status} - ${errorText}`);
        }

        const result = await response.json();
        console.log('saveWixClientId - Save response received - Result:', JSON.stringify(result), 'Duration:', `${duration}ms`);
        toastr.success('Wix client ID saved successfully');
    } catch (error) {
        console.error('saveWixClientId - Error saving Wix client ID - Error:', error.message, 'Stack:', error.stack);
        toastr.error(`Failed to save Wix client ID: ${error.message}`);
    }
    console.log('saveWixClientId - Save process completed');
}

old/community copy.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Community</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <script src="https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 20px; 
            display: block; 
        }
        .header { 
            height: 150px; 
            width: 100%; 
            background-color: #f4f4f4; 
            margin-bottom: 25px; 
            overflow: hidden; 
            position: relative; 
            display: block; 
        }
        .header-content { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .main-container { 
            max-width: 1200px; 
            margin: 0 auto; 
            display: flex; 
            gap: 20px; 
        }
        .menu-container { 
            flex: 1; 
            max-width: 300px; 
        }
        .content-container { 
            flex: 2; 
        }
        .menu { 
            margin-bottom: 20px; 
            text-align: left; 
        }
        .menu button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            text-align: left; 
            width: 100%; 
            margin-bottom: 5px; 
            display: block; 
        }
        .menu button:hover { 
            background-color: #0056b3; 
        }
        .menu .btn-admin { 
            background-color: #dc3545; 
        }
        .menu .btn-admin:hover { 
            background-color: #c82333; 
        }
        .menu .btn-logoff { 
            background-color: #dc3545; 
        }
        .menu .btn-logoff:hover { 
            background-color: #c82333; 
        }
        .submenu { 
            display: none; 
            padding-left: 20px; 
        }
        .submenu.open { 
            display: block; 
        }
        .section { 
            display: none; 
        }
        .section.active { 
            display: block; 
        }
        .settings-form { 
            display: flex; 
            flex-direction: column; 
            gap: 15px; 
            max-width: 600px; 
        }
        .settings-form label { 
            font-weight: bold; 
            margin-bottom: 5px; 
        }
        .settings-form input, 
        .settings-form textarea { 
            padding: 8px; 
            width: 100%; 
            box-sizing: border-box; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .settings-form button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            cursor: pointer; 
            border-radius: 4px; 
        }
        .settings-form button:hover { 
            background-color: #0056b3; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 8px; 
            text-align: left; 
        }
        .treeview { 
            max-height: 600px; 
            overflow-y: auto; 
            margin-bottom: 10px; 
        }
        .treeview, .treeview ul, .treeview li { 
            list-style-type: none; 
            padding: 0; 
            margin: 0; 
        }
        .treeview .node { 
            display: flex; 
            align-items: center; 
            gap: 8px; 
            padding: 5px 0; 
        }
        .treeview .toggle { 
            cursor: pointer; 
            width: 20px; 
            text-align: center; 
            font-weight: bold; 
            flex-shrink: 0; 
        }
        .treeview input[type="checkbox"] { 
            width: 16px !important; 
            height: 16px !important; 
            margin: 0; 
            flex-shrink: 0; 
        }
        .treeview .subcategories { 
            display: none; 
            padding-left: 20px; 
        }
        .treeview .subcategories.open { 
            display: block; 
        }
        #toast-container > .toast-error { 
            background-color: #dc3545; 
            border-color: #c82333; 
        }
        #toast-container > .toast-success { 
            background-color: #28a745; 
            border-color: #218838; 
        }
        .toggle-section { 
            cursor: pointer; 
            font-weight: bold; 
            margin: 10px 0; 
            background-color: #e9ecef; 
            padding: 5px; 
            border-radius: 4px; 
        }
        .toggle-content { 
            display: none; 
        }
        .toggle-content.open { 
            display: block; 
        }
        .page-section { 
            margin-top: 10px; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .email-section { 
            margin-top: 10px; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .widget-checkboxes div { 
            margin-bottom: 10px; 
        }
        .remove-page-btn, .remove-email-btn { 
            padding: 5px 10px; 
            background-color: #dc3545; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            margin-top: 10px; 
        }
        .remove-page-btn:hover, .remove-email-btn:hover { 
            background-color: #c82333; 
        }
        .password-container { 
            position: relative; 
            display: flex; 
            flex-direction: column; 
            margin-bottom: 15px; 
        }
        .password-container input { 
            padding: 8px 30px 8px 8px; 
            width: 100%; 
            box-sizing: border-box; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .password-toggle { 
            position: absolute; 
            right: 10px; 
            top: 65%; 
            transform: translateY(-50%); 
            cursor: pointer; 
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu" id="menu">
                <input type="text" id="userId" style="display: none;">
                <!-- Menu items will be dynamically generated -->
            </div>
        </div>
        <div class="content-container">
            <div id="welcome" class="section active">
                <h2>Welcome to Your Community Dashboard</h2>
                <p>Welcome! This dashboard is your hub for managing your community account and tracking referrals.</p>
                <p>Use the menu on the left to:</p>
                <ul>
                    <li>Learn how to add discounts to your website or request a site under "My Web Site"</li>
                    <li>Select product categories for your site in "My Categories"</li>
                    <li>View referral statistics under "My Referrals"</li>
                    <li>Update your account details in "My Account"</li>
                </ul>
            </div>
            <div id="settings" class="section">
                <h2>My Account</h2>
                <div class="settings-form">
                    <label><strong>Referrer ID: <span id="referrerId"></span></strong></label>
                    <label for="contactName">Contact Name:</label>
                    <input type="text" id="contactName" placeholder="Enter contact name">
                    <label for="websiteUrl">Website URL:</label>
                    <input type="url" id="websiteUrl" placeholder="Enter website URL">
                    <label for="emailAddress">Email Address:</label>
                    <input type="email" id="emailAddress" placeholder="Enter email address">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="tel" id="phoneNumber" placeholder="Enter phone number">
                    <button data-action="saveSettings">Save Settings</button>

                    <h3>Change Password</h3>
                    <div class="password-container">
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" id="currentPassword" name="currentPassword" placeholder="Enter current password">
                        <i class="fas fa-eye password-toggle" data-target="currentPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="newPassword">New Password:</label>
                        <input type="password" id="newPassword" name="newPassword" placeholder="Enter new password">
                        <i class="fas fa-eye password-toggle" data-target="newPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="confirmPassword">Confirm New Password:</label>
                        <input type="password" id="confirmPassword" name="confirmPassword" placeholder="Confirm new password">
                        <i class="fas fa-eye password-toggle" data-target="confirmPassword"></i>
                    </div>
                    <button data-action="savePassword">Change Password</button>
                </div>
            </div>
            <div id="categories" class="section">
                <h2>My Categories</h2>
                <p>This section lets you choose which product categories will appear on your website's "Community Discounts" page.</p>
                <div class="treeview" id="categoryTree"></div>
            </div>
            <div id="referrals_intro" class="section">
                <h2>My Referrals</h2>
                <p>This section allows you to track your referral activity.</p>
                <p>Select from the submenu options:</p>
                <ul>
                    <li><strong>Visits:</strong> View pages visited through your referral links.</li>
                    <li><strong>Orders:</strong> See orders placed via your referrals.</li>
                </ul>
            </div>
            <div id="visits" class="section">
                <h2>Visits</h2>
                <div class="toggle-section" data-toggle="visits_this_month">This Month</div>
                <div id="visits_this_month" class="toggle-content open">
                    <table id="visitsTableThisMonth">
                        <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                        <tbody id="visitsListThisMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="visits_last_month">Last Month</div>
                <div id="visits_last_month" class="toggle-content">
                    <table id="visitsTableLastMonth">
                        <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                        <tbody id="visitsListLastMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="visits_earlier">Earlier</div>
                <div id="visits_earlier" class="toggle-content">
                    <table id="visitsTableEarlier">
                        <thead><tr><th>Page</th><th>Timestamp</th></tr></thead>
                        <tbody id="visitsListEarlier"></tbody>
                    </table>
                </div>
            </div>
            <div id="orders" class="section">
                <h2>Orders</h2>
                <div class="toggle-section" data-toggle="orders_this_month">This Month</div>
                <div id="orders_this_month" class="toggle-content open">
                    <table id="ordersTableThisMonth">
                        <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                        <tbody id="ordersListThisMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="orders_last_month">Last Month</div>
                <div id="orders_last_month" class="toggle-content">
                    <table id="ordersTableLastMonth">
                        <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                        <tbody id="ordersListLastMonth"></tbody>
                    </table>
                </div>
                <div class="toggle-section" data-toggle="orders_earlier">Earlier</div>
                <div id="orders_earlier" class="toggle-content">
                    <table id="ordersTableEarlier">
                        <thead><tr><th>Order ID</th><th>Buyer</th><th>Total</th><th>Timestamp</th></tr></thead>
                        <tbody id="ordersListEarlier"></tbody>
                    </table>
                </div>
            </div>
            <div id="my_website_intro" class="section">
                <h2>My Web Site</h2>
                <p>Welcome to the "My Web Site" section! Here, you can learn how to integrate discounts into your community website.</p>
                <ul>
                    <li><strong>Wix:</strong> Easy drag-and-drop builder.</li>
                    <li><strong>WordPress:</strong> Flexible CMS.</li>
                    <li><strong>Squarespace:</strong> Stylish solution.</li>
                    <li><strong>Weebly:</strong> Simple builder.</li>
                    <li><strong>Joomla:</strong> Robust CMS.</li>
                    <li><strong>I Don’t Have a Website Yet:</strong> Request a site setup.</li>
                </ul>
            </div>
            <div id="wix" class="section">
                <h2>Wix Integration</h2>
                <p>Add discounts to your Wix site:</p>
                <ol>
                    <li>Log in to Wix and open the Editor.</li>
                    <li>Click "+" > "Embed" > "Embed a Widget".</li>
                    <li>Paste: <code id="wixCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Publish.</li>
                </ol>
            </div>
            <div id="wordpress" class="section">
                <h2>WordPress Integration</h2>
                <p>Add discounts to WordPress:</p>
                <ol>
                    <li>Log in to WordPress admin.</li>
                    <li>Go to "Pages" > "Add New".</li>
                    <li>Add "Custom HTML" block: <code id="wordpressCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Publish.</li>
                </ol>
            </div>
            <div id="squarespace" class="section">
                <h2>Squarespace Integration</h2>
                <p>Integrate discounts into Squarespace:</p>
                <ol>
                    <li>Log in to Squarespace editor.</li>
                    <li>Add a new page.</li>
                    <li>Add "Code" block: <code id="squarespaceCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Update site.</li>
                </ol>
            </div>
            <div id="weebly" class="section">
                <h2>Weebly Integration</h2>
                <p>Add discounts to Weebly:</p>
                <ol>
                    <li>Log in to Weebly editor.</li>
                    <li>Drag "Embed Code" onto page.</li>
                    <li>Paste: <code id="weeblyCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Publish.</li>
                </ol>
            </div>
            <div id="joomla" class="section">
                <h2>Joomla Integration</h2>
                <p>Integrate discounts into Joomla:</p>
                <ol>
                    <li>Log in to Joomla admin.</li>
                    <li>Go to "Content" > "Articles" > "Add New".</li>
                    <li>Paste in "Code" view: <code id="joomlaCode"><iframe src="https://clubmadeira.io/discounts?referrer=[YourUserID]" width="100%" height="600"></iframe></code></li>
                    <li>Save.</li>
                </ol>
            </div>
            <div id="no_website" class="section">
                <h2>I Don’t Have a Website Yet</h2>
                <p>Request a custom Wix website for your community from our Wix Professionals. Fill out the form below to specify your needs:</p>
                <form id="siteRequestForm" class="settings-form">
                    <label for="communityName">Community Name:</label>
                    <input type="text" id="communityName" name="communityName" placeholder="Enter your community name" required>

                    <label for="aboutCommunity">About Our Community:</label>
                    <textarea id="aboutCommunity" name="aboutCommunity" placeholder="Tell us about your community"></textarea>

                    <label for="communityLogos">Community Logos:</label>
                    <input type="file" id="communityLogos" name="communityLogos" accept="image/*" multiple>
                    <small>Upload up to 5 logos (e.g., main logo, secondary logos).</small>

                    <label for="colorPrefs">Color Preferences:</label>
                    <input type="text" id="colorPrefs" name="colorPrefs" placeholder="e.g., #FF5733, Blue">

                    <label for="stylingDetails">Styling Details:</label>
                    <textarea id="stylingDetails" name="stylingDetails" rows="4" placeholder="e.g., modern layout, bold fonts"></textarea>

                    <label for="preferredDomain">Preferred Domain Name:</label>
                    <input type="text" id="preferredDomain" name="preferredDomain" placeholder="e.g., mycommunity.org" oninput="updateEmailDomains()">
                    <button type="button" data-action="checkDomainAvailability">Check Availability</button>

                    <label>Email Addresses to Set Up (up to 5):</label>
                    <div id="emailsContainer">
                        <div class="email-section" data-email="1">
                            <label for="email1Name">Email Name:</label>
                            <input type="text" id="email1Name" name="email1Name" placeholder="e.g., info">
                            <span id="email1Domain">@mycommunity.org</span>
                        </div>
                    </div>
                    <button type="button" data-action="addEmail">Add Another Email</button>

                    <label>Requested Pages (up to 5):</label>
                    <div id="pagesContainer">
                        <div class="page-section" data-page="1">
                            <label for="page1Name">Page Name:</label>
                            <input type="text" id="page1Name" name="page1Name" value="Home">
                            <br><br>
                            <label for="page1Content">Page Content:</label>
                            <textarea id="page1Content" name="page1Content" placeholder="Describe this page"></textarea>
                            <label for="page1Images">Additional Images:</label>
                            <input type="file" id="page1Images" name="page1Images" accept="image/*" multiple>
                        </div>
                    </div>
                    <button type="button" data-action="addPage">Add Another Page</button>

                    <label>Wix Widgets:</label>
                    <div class="widget-checkboxes">
                        <div><label><input type="checkbox" name="widgets" value="events"> Events</label> - Add an events calendar.</div>
                        <div><label><input type="checkbox" name="widgets" value="socialMediaFeeds"> Social Media Feeds</label> - Display live social media feeds.</div>
                        <div><label><input type="checkbox" name="widgets" value="gallery"> Gallery</label> - Showcase photos.</div>
                        <div><label><input type="checkbox" name="widgets" value="contactForm"> Contact Form</label> - Simple contact form.</div>
                        <div><label><input type="checkbox" name="widgets" value="blog"> Blog</label> - Share updates and stories.</div>
                        <div><label><input type="checkbox" name="widgets" value="weather"> Weather</label> - Show real-time weather.</div>
                        <div><label><input type="checkbox" name="widgets" value="socialMediaLinks"> Social Media Links</label> - Quick links to profiles.</div>
                    </div>

                    <button type="button" data-action="saveSiteRequest">Submit Request</button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        // Global variables
        const apiUrl = 'https://clubmadeira.io';
        let userPermissions = [];
        let pageCount = 1;
        let emailCount = 1;
        let currentUserId = null;
        let savedCategories = []; // Store user's saved categories

        // Decode JWT token
        function decodeJWT(token) {
            if (!token || typeof token !== 'string') {
                console.error('Invalid token');
                return null;
            }
            if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
                console.error('Invalid token format');
                return null;
            }
            const parts = token.split('.');
            try {
                const base64Url = parts[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                console.error('Error decoding JWT:', error.message);
                return null;
            }
        }

        // Initialize the community page
        function initializeCommunity() {
            console.log('Initializing community page');
            const token = localStorage.getItem('authToken');
            currentUserId = localStorage.getItem('userId');

            if (!token) {
                console.error('No token found, redirecting to /');
                window.location.href = '/';
                return;
            }

            const decoded = decodeJWT(token);
            if (!decoded) {
                console.error('Invalid token, redirecting to /');
                window.location.href = '/';
                return;
            }

            userPermissions = decoded.permissions || [];
            if (!userPermissions.includes('admin') && !userPermissions.includes('community')) {
                toastr.error('Permission denied: Community permission required');
                console.error('No community permission, redirecting to /');
                window.location.href = '/';
                return;
            }

            if (!currentUserId) {
                toastr.error('User ID not found in session, redirecting to login');
                console.error('No userId found in localStorage');
                window.location.href = '/';
                return;
            }

            document.getElementById('userId').value = currentUserId;
            updateMenu();
            loadBranding();
            showSection('welcome');
            waitForTinyMCE(initializeTinyMCE);
            attachEventListeners();
            console.log('Community page initialized successfully');
        }

        // Toastr configuration
        toastr.options = { 
            closeButton: true, 
            progressBar: true, 
            positionClass: 'toast-top-right', 
            timeOut: 5000,
            showMethod: 'slideDown',
            hideMethod: 'slideUp'
        };

        // Fetch protected page content
        async function fetchProtectedPage(url) {
            console.log('Fetching protected page:', url);
            const token = localStorage.getItem('authToken');
            if (!token || !currentUserId) {
                toastr.error('No authentication token or user ID found. Please log in.');
                window.location.href = '/';
                return;
            }
            const finalUrl = `${apiUrl}${url}`.replace('[YourUserID]', currentUserId);
            console.log('Final URL:', finalUrl);
            try {
                const response = await fetch(finalUrl, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'text/html'
                    }
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server returned ${response.status}: ${errorText}`);
                }
                const html = await response.text();
                document.open();
                document.write(html);
                document.close();
                const event = new Event('DOMContentLoaded', { bubbles: true, cancelable: true });
                document.dispatchEvent(event);
                console.log('Protected page loaded:', url);
            } catch (error) {
                toastr.error(error.message || 'Failed to load protected page');
                console.error('Fetch error:', error);
            }
        }

        // Wait for TinyMCE to load
        function waitForTinyMCE(callback) {
            console.log('Checking if TinyMCE is loaded');
            if (typeof tinymce !== 'undefined' && tinymce.init) {
                console.log('TinyMCE is loaded, executing callback');
                callback();
            } else {
                console.log('Waiting for TinyMCE to load...');
                const script = document.querySelector('script[src*="tinymce.min.js"]');
                if (script) {
                    script.onload = () => {
                        console.log('TinyMCE script loaded');
                        callback();
                    };
                    script.onerror = () => console.error('TinyMCE failed to load');
                } else {
                    setTimeout(() => waitForTinyMCE(callback), 100);
                }
            }
        }

        // Initialize TinyMCE editors
        function initializeTinyMCE() {
            console.log('Initializing TinyMCE');
            tinymce.remove();
            tinymce.init({
                selector: '#aboutCommunity, textarea[name$="Content"]',
                height: 200,
                menubar: false,
                plugins: 'lists',
                toolbar: 'bold italic | bullist numlist',
                setup: editor => {
                    editor.on('init', () => console.log('TinyMCE editor initialized'));
                }
            });
        }

        // Attach event listeners with duplicate prevention
        function attachEventListeners() {
            console.log('Attaching event listeners');
            const existingListeners = document.__eventListeners || new Map();
            document.__eventListeners = existingListeners;

            document.querySelectorAll('.menu button[data-section]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const section = button.getAttribute('data-section');
                        const submenu = button.getAttribute('data-submenu');
                        console.log('Button clicked:', { section, submenu });
                        if (submenu) toggleSubmenu(submenu);
                        if (section) showSection(section);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.menu button[data-href]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', async () => {
                        const href = button.getAttribute('data-href');
                        console.log(`Fetching protected page: ${href}`);
                        await fetchProtectedPage(href);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.toggle-section').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const sectionId = toggle.getAttribute('data-toggle');
                        toggleSection(sectionId);
                    });
                    existingListeners.set(toggle, true);
                }
            });

            document.querySelectorAll('.password-toggle').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const fieldId = toggle.getAttribute('data-target');
                        togglePassword(fieldId);
                    });
                    existingListeners.set(toggle, true);
                }
            });

            document.querySelectorAll('button[data-action]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const action = button.getAttribute('data-action');
                        console.log('Action button clicked:', action);
                        if (action === 'saveSettings') saveSettings();
                        else if (action === 'savePassword') savePassword();
                        else if (action === 'addPage') addPage();
                        else if (action === 'addEmail') addEmail();
                        else if (action === 'checkDomainAvailability') checkDomainAvailability();
                        else if (action === 'saveSiteRequest') saveSiteRequest();
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.treeview .toggle').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const parentId = toggle.getAttribute('data-id');
                        toggleSubcategories(parentId, toggle);
                    });
                    existingListeners.set(toggle, true);
                }
            });

            document.querySelectorAll('#categoryTree input[type="checkbox"]').forEach(checkbox => {
                if (!existingListeners.has(checkbox)) {
                    checkbox.addEventListener('change', saveCategories);
                    existingListeners.set(checkbox, true);
                }
            });

            const logOffBtn = document.getElementById('logOffBtn');
            if (logOffBtn && !existingListeners.has(logOffBtn)) {
                logOffBtn.addEventListener('click', logout);
                existingListeners.set(logOffBtn, true);
            }

            document.querySelectorAll('.remove-page-btn').forEach(btn => {
                if (!existingListeners.has(btn)) {
                    btn.addEventListener('click', () => {
                        const pageNum = btn.getAttribute('data-page');
                        removePage(pageNum);
                    });
                    existingListeners.set(btn, true);
                }
            });

            document.querySelectorAll('.remove-email-btn').forEach(btn => {
                if (!existingListeners.has(btn)) {
                    btn.addEventListener('click', () => {
                        const emailNum = btn.getAttribute('data-email');
                        removeEmail(emailNum);
                    });
                    existingListeners.set(btn, true);
                }
            });
            console.log('Event listeners attached');
        }

        // Update the menu dynamically
        function updateMenu() {
            console.log('Updating menu');
            const menu = document.getElementById('menu');
            menu.innerHTML = `<input type="text" id="userId" style="display: none;" value="${currentUserId || ''}">`;
            menu.innerHTML += `
                <button data-submenu="my_website" data-section="my_website_intro">My Web Site <i class="fas fa-caret-down"></i></button>
                <div id="my_website" class="submenu">
                    <button data-section="wix">Wix</button>
                    <button data-section="wordpress">WordPress</button>
                    <button data-section="squarespace">Squarespace</button>
                    <button data-section="weebly">Weebly</button>
                    <button data-section="joomla">Joomla</button>
                    <button data-section="no_website">I Don’t Have a Website Yet</button>
                </div>
                <button data-section="categories">My Categories</button>
                <button data-submenu="referrals" data-section="referrals_intro">My Referrals <i class="fas fa-caret-down"></i></button>
                <div id="referrals" class="submenu">
                    <button data-section="visits">Visits</button>
                    <button data-section="orders">Orders</button>
                </div>
                <button data-section="settings">My Account</button>
            `;
            if (userPermissions.includes('admin')) {
                menu.innerHTML += '<button data-href="/admin" class="btn-admin">Back to Admin</button>';
            }
            menu.innerHTML += '<button id="logOffBtn" class="btn-logoff">Log Off</button>';
            console.log('Menu updated');
        }

        // Load branding content
        async function loadBranding() {
            console.log('Loading branding');
            try {
                const response = await authenticatedFetch(`${apiUrl}/branding`);
                if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                const data = await response.json();
                document.getElementById('brandingContent').innerHTML = data.content || '<h1>Community Dashboard</h1>';
                console.log('Branding loaded');
            } catch (error) {
                toastr.error(`Error loading branding: ${error.message}`);
                document.getElementById('brandingContent').innerHTML = '<h1>Community Dashboard</h1>';
                console.error('Branding load error:', error);
            }
        }

        // Authenticated fetch with token
        async function authenticatedFetch(url, options = {}) {
            console.log('Making authenticated fetch to:', url);
            const token = localStorage.getItem('authToken');
            options.headers = { 
                ...options.headers, 
                'Authorization': `Bearer ${token}`, 
                'Content-Type': options.body instanceof FormData ? undefined : 'application/json' 
            };
            const response = await fetch(url, options);
            if (response.status === 401) {
                toastr.error('Session expired. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                currentUserId = null;
                window.location.href = '/';
            }
            console.log('Fetch completed:', response.status);
            return response;
        }

        // Show a specific section
        function showSection(section) {
            console.log('Showing section:', section);
            document.querySelectorAll('.section').forEach(s => {
                s.classList.remove('active');
                s.style.display = 'none';
            });
            const activeSection = document.getElementById(section);
            if (activeSection) {
                activeSection.classList.add('active');
                activeSection.style.display = 'block';
                console.log('Section activated:', section);
            } else {
                console.error('Section not found:', section);
            }
            if (section === 'settings') loadSettings();
            else if (section === 'categories') loadCategories();
            else if (section === 'visits') loadVisits();
            else if (section === 'orders') loadOrders();
            else if (section === 'no_website') loadSiteRequest();
            else if (['wix', 'wordpress', 'squarespace', 'weebly', 'joomla'].includes(section)) updateIntegrationCode(section);
        }

        // Toggle submenu visibility
        function toggleSubmenu(submenuId) {
            const submenu = document.getElementById(submenuId);
            submenu.classList.toggle('open');
            console.log('Toggled submenu:', submenuId, submenu.classList.contains('open') ? 'open' : 'closed');
        }

        // Toggle section content visibility
        function toggleSection(sectionId) {
            const content = document.getElementById(sectionId);
            content.classList.toggle('open');
            console.log('Toggled section:', sectionId, content.classList.contains('open') ? 'open' : 'closed');
        }

        // Logout function
        function logout() {
            console.log('Logging out');
            if (confirm('Are you sure you want to log off?')) {
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                currentUserId = null;
                toastr.success('Logged out successfully');
                setTimeout(() => window.location.href = '/', 1000);
                console.log('Logout completed');
            }
        }

        // Load user settings
        async function loadSettings() {
            console.log('Loading settings');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch settings: ${response.status}`);
                const data = await response.json();
                document.getElementById('referrerId').textContent = currentUserId;
                document.getElementById('contactName').value = data.contact_name || '';
                document.getElementById('websiteUrl').value = data.website_url || '';
                document.getElementById('emailAddress').value = data.email_address || '';
                document.getElementById('phoneNumber').value = data.phone_number || '';
                console.log('Settings loaded for user:', currentUserId);
            } catch (error) {
                toastr.error(`Error loading settings: ${error.message}`);
                console.error('Settings load error:', error);
            }
        }

        // Save user settings
        async function saveSettings() {
            console.log('Saving settings');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            const settings = {
                contact_name: document.getElementById('contactName').value.trim(),
                website_url: document.getElementById('websiteUrl').value.trim(),
                email_address: document.getElementById('emailAddress').value.trim(),
                phone_number: document.getElementById('phoneNumber').value.trim()
            };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, { 
                    method: 'PUT', 
                    body: JSON.stringify(settings) 
                });
                if (!response.ok) throw new Error(`Failed to save settings: ${response.status}`);
                toastr.success('Settings saved successfully');
                console.log('Settings saved for user:', currentUserId);
            } catch (error) {
                toastr.error(`Error saving settings: ${error.message}`);
                console.error('Settings save error:', error);
            }
        }

        // Toggle password visibility
        function togglePassword(fieldId) {
            const input = document.getElementById(fieldId);
            const icon = input.nextElementSibling;
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
            console.log('Toggled password visibility for:', fieldId);
        }

        // Save new password
        async function savePassword() {
            console.log('Saving password');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            const passwordRegex = /^(?=.*\d).{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                toastr.error('New password must be at least 8 characters long and include numbers');
                return;
            }
            if (newPassword !== confirmPassword) {
                toastr.error('New password and confirmation do not match');
                return;
            }

            const passwordData = { currentPassword, newPassword };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/password`, {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });
                if (!response.ok) throw new Error(`Failed to change password: ${response.status}`);
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
                toastr.success('Password changed successfully');
                console.log('Password changed for user:', currentUserId);
            } catch (error) {
                toastr.error(`Error changing password: ${error.message}`);
                console.error('Password change error:', error);
            }
        }

        // Update integration code for web platforms
        function updateIntegrationCode(section) {
            console.log('Updating integration code for:', section);
            const codeElements = {
                'wix': 'wixCode',
                'wordpress': 'wordpressCode',
                'squarespace': 'squarespaceCode',
                'weebly': 'weeblyCode',
                'joomla': 'joomlaCode'
            };
            const codeId = codeElements[section];
            if (codeId) {
                document.getElementById(codeId).textContent = `<iframe src="https://clubmadeira.io/discounts?referrer=${currentUserId || 'unknown'}" width="100%" height="600"></iframe>`;
                console.log('Updated integration code for:', section);
            }
        }

        // Load categories for treeview
        async function loadCategories() {
            console.log('Loading categories');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                // Load user's saved categories
                const userResponse = await authenticatedFetch(`${apiUrl}/${currentUserId}/mycategories`);
                if (!userResponse.ok) throw new Error(`Failed to fetch user categories: ${userResponse.status}`);
                const userData = await userResponse.json();
                savedCategories = userData.categories || [];
                console.log('Saved categories:', savedCategories);

                // Load top-level categories
                const response = await authenticatedFetch(`${apiUrl}/categories`);
                if (!response.ok) throw new Error(`Failed to fetch categories: ${response.status}`);
                const data = await response.json();

                const treeElement = document.getElementById('categoryTree');
                treeElement.innerHTML = '';
                const ul = document.createElement('ul');
                const topLevelCategories = data.categories.filter(cat => !cat.parent_id);
                topLevelCategories.forEach(cat => {
                    ul.appendChild(createTreeNode(cat));
                });
                treeElement.appendChild(ul);

                attachEventListeners();
                console.log('Top-level categories loaded');
            } catch (error) {
                toastr.error(`Error loading categories: ${error.message}`);
                console.error('Categories load error:', error);
            }
        }

        // Create a tree node for categories
        function createTreeNode(category) {
            console.log('Creating tree node for category:', category.id);
            const li = document.createElement('li');
            const nodeDiv = document.createElement('div');
            nodeDiv.className = 'node';

            const toggle = document.createElement('span');
            toggle.className = 'toggle';
            toggle.setAttribute('data-id', category.id);
            toggle.textContent = '+'; // Always show '+' initially, assuming potential subcategories

            const checkbox = document.createElement('input');
            checkbox.type = 'checkbox';
            checkbox.value = category.id;
            checkbox.checked = savedCategories.includes(category.id.toString());

            const span = document.createElement('span');
            span.textContent = `${category.name} (${category.id})`;

            nodeDiv.appendChild(toggle);
            nodeDiv.appendChild(checkbox);
            nodeDiv.appendChild(span);
            li.appendChild(nodeDiv);

            const subUl = document.createElement('ul');
            subUl.className = 'subcategories';
            li.appendChild(subUl);

            return li;
        }

        // Toggle subcategories visibility and load dynamically
        async function toggleSubcategories(parentId, toggle) {
            console.log('Toggling subcategories for parentId:', parentId);
            const li = toggle.closest('li');
            const subUl = li.querySelector('.subcategories');

            if (subUl.classList.contains('open')) {
                subUl.classList.remove('open');
                toggle.textContent = '+';
                console.log('Subcategories closed');
            } else {
                if (subUl.children.length === 0) {
                    try {
                        const response = await authenticatedFetch(`${apiUrl}/categories?parent_id=${parentId}`);
                        if (!response.ok) throw new Error(`Failed to fetch subcategories: ${response.status}`);
                        const data = await response.json();
                        if (data.categories && data.categories.length > 0) {
                            data.categories.forEach(cat => {
                                subUl.appendChild(createTreeNode(cat));
                            });
                            attachEventListeners(); // Reattach listeners for new nodes
                            console.log('Subcategories loaded for:', parentId);
                        } else {
                            toggle.textContent = ' '; // No subcategories, remove toggle
                            console.log('No subcategories found for:', parentId);
                        }
                    } catch (error) {
                        toastr.error(`Error loading subcategories: ${error.message}`);
                        console.error('Subcategories load error:', error);
                        toggle.textContent = ' ';
                        return;
                    }
                }
                subUl.classList.add('open');
                toggle.textContent = '-';
                console.log('Subcategories opened');
            }
        }

        // Save selected categories
        async function saveCategories() {
            console.log('Saving categories');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            const checked = Array.from(document.querySelectorAll('#categoryTree input[type="checkbox"]:checked')).map(cb => cb.value);
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/mycategories`, { 
                    method: 'PUT', 
                    body: JSON.stringify({ categories: checked }) 
                });
                if (!response.ok) throw new Error(`Failed to save categories: ${response.status}`);
                savedCategories = checked;
                toastr.success('Categories saved successfully');
                console.log('Categories saved:', checked);
            } catch (error) {
                toastr.error(`Error saving categories: ${error.message}`);
                console.error('Categories save error:', error);
            }
        }

        // Load referral visits
        async function loadVisits() {
            console.log('Loading visits');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/visits`);
                if (!response.ok) throw new Error(`Failed to fetch visits: ${response.status}`);
                const data = await response.json();
                if (data.status === 'success') {
                    const now = new Date();
                    const thisMonth = now.getMonth();
                    const thisYear = now.getFullYear();
                    const visitsThisMonth = [];
                    const visitsLastMonth = [];
                    const visitsEarlier = [];
                    data.visits.forEach(visit => {
                        const visitDate = new Date(visit.timestamp);
                        if (visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth) visitsThisMonth.push(visit);
                        else if ((visitDate.getFullYear() === thisYear && visitDate.getMonth() === thisMonth - 1) || 
                                 (visitDate.getFullYear() === thisYear - 1 && thisMonth === 0 && visitDate.getMonth() === 11)) visitsLastMonth.push(visit);
                        else visitsEarlier.push(visit);
                    });
                    updateVisitsTable('visitsListThisMonth', visitsThisMonth);
                    updateVisitsTable('visitsListLastMonth', visitsLastMonth);
                    updateVisitsTable('visitsListEarlier', visitsEarlier);
                    console.log('Visits loaded');
                }
            } catch (error) {
                toastr.error(`Error loading visits: ${error.message}`);
                console.error('Visits load error:', error);
            }
        }

        // Update visits table
        function updateVisitsTable(tableId, visits) {
            console.log('Updating visits table:', tableId);
            const tbody = document.getElementById(tableId);
            tbody.innerHTML = visits.length === 0 ? '<tr><td colspan="2">No visits found</td></tr>' : '';
            visits.forEach(visit => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${visit.page}</td><td>${visit.timestamp}</td>`;
                tbody.appendChild(row);
            });
            console.log('Visits table updated:', tableId);
        }

        // Load referral orders
        async function loadOrders() {
            console.log('Loading orders');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/orders`);
                if (!response.ok) throw new Error(`Failed to fetch orders: ${response.status}`);
                const data = await response.json();
                if (data.status === 'success') {
                    const now = new Date();
                    const thisMonth = now.getMonth();
                    const thisYear = now.getFullYear();
                    const ordersThisMonth = [];
                    const ordersLastMonth = [];
                    const ordersEarlier = [];
                    data.orders.forEach(order => {
                        const orderDate = new Date(order.timestamp);
                        if (orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth) ordersThisMonth.push(order);
                        else if ((orderDate.getFullYear() === thisYear && orderDate.getMonth() === thisMonth - 1) || 
                                 (orderDate.getFullYear() === thisYear - 1 && thisMonth === 0 && orderDate.getMonth() === 11)) ordersLastMonth.push(order);
                        else ordersEarlier.push(order);
                    });
                    updateOrdersTable('ordersListThisMonth', ordersThisMonth);
                    updateOrdersTable('ordersListLastMonth', ordersLastMonth);
                    updateOrdersTable('ordersListEarlier', ordersEarlier);
                    console.log('Orders loaded');
                }
            } catch (error) {
                toastr.error(`Error loading orders: ${error.message}`);
                console.error('Orders load error:', error);
            }
        }

        // Update orders table
        function updateOrdersTable(tableId, orders) {
            console.log('Updating orders table:', tableId);
            const tbody = document.getElementById(tableId);
            tbody.innerHTML = orders.length === 0 ? '<tr><td colspan="4">No orders found</td></tr>' : '';
            orders.forEach(order => {
                const row = document.createElement('tr');
                row.innerHTML = `<td>${order.orderId}</td><td>${order.buyer}</td><td>$${order.total}</td><td>${order.timestamp}</td>`;
                tbody.appendChild(row);
            });
            console.log('Orders table updated:', tableId);
        }

        // Load site request form data
        async function loadSiteRequest() {
            console.log('Loading site request');
            if (!currentUserId) {
                toastr.error('User ID not found in session');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/siterequest`);
                if (!response.ok) throw new Error(`Failed to fetch site request: ${response.status}`);
                const data = await response.json();
                const siteRequest = data.site_request || {};

                document.getElementById('communityName').value = siteRequest.communityName || '';
                tinymce.get('aboutCommunity')?.setContent(siteRequest.aboutCommunity || '');
                document.getElementById('colorPrefs').value = siteRequest.colorPrefs || '';
                document.getElementById('stylingDetails').value = siteRequest.stylingDetails || '';
                document.getElementById('preferredDomain').value = siteRequest.preferredDomain || 'mycommunity.org';

                const emails = siteRequest.emails || ['info'];
                emailCount = 0;
                const emailsContainer = document.getElementById('emailsContainer');
                emailsContainer.innerHTML = '';
                emails.forEach((email, index) => {
                    emailCount++;
                    const emailDiv = document.createElement('div');
                    emailDiv.className = 'email-section';
                    emailDiv.dataset.email = emailCount;
                    emailDiv.innerHTML = `
                        <label for="email${emailCount}Name">Email Name:</label>
                        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" value="${email}">
                        <span id="email${emailCount}Domain">@${siteRequest.preferredDomain || 'mycommunity.org'}</span>
                        ${emailCount > 1 ? `<button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>` : ''}
                    `;
                    emailsContainer.appendChild(emailDiv);
                });

                const pages = siteRequest.pages && siteRequest.pages.length > 0 ? siteRequest.pages : [{ name: 'Home', content: '' }];
                pageCount = 0;
                const pagesContainer = document.getElementById('pagesContainer');
                pagesContainer.innerHTML = '';
                pages.forEach((page, index) => {
                    pageCount++;
                    const pageDiv = document.createElement('div');
                    pageDiv.className = 'page-section';
                    pageDiv.dataset.page = pageCount;
                    pageDiv.innerHTML = `
                        <label for="page${pageCount}Name">Page Name:</label>
                        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${page.name || ''}">
                        <br><br>
                        <label for="page${pageCount}Content">Page Content:</label>
                        <textarea id="page${pageCount}Content" name="page${pageCount}Content">${page.content || ''}</textarea>
                        <label for="page${pageCount}Images">Additional Images:</label>
                        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                        ${pageCount > 1 ? `<button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>` : ''}
                    `;
                    pagesContainer.appendChild(pageDiv);
                });

                const widgets = siteRequest.widgets || [];
                document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
                    checkbox.checked = widgets.includes(checkbox.value);
                });

                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
                updateEmailDomains();
                console.log('Site request loaded');
            } catch (error) {
                toastr.error(`Error loading site request: ${error.message}`);
                console.error('Site request load error:', error);
            }
        }

        // Save site request form data
        async function saveSiteRequest() {
            console.log('Saving site request');
            if (!currentUserId) {
                toastr.error('User ID not found in SESSION');
                return;
            }

            const siteRequest = {
                userId: currentUserId,
                type: "community",
                communityName: document.getElementById('communityName').value.trim(),
                aboutCommunity: tinymce.get('aboutCommunity')?.getContent() || '',
                communityLogos: [],
                colorPrefs: document.getElementById('colorPrefs').value.trim(),
                stylingDetails: document.getElementById('stylingDetails').value.trim(),
                preferredDomain: document.getElementById('preferredDomain').value.trim() || 'mycommunity.org',
                emails: [],
                pages: [],
                widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
            };

            if (!siteRequest.communityName) {
                toastr.error('Community name is required');
                return;
            }

            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domainRegex.test(siteRequest.preferredDomain)) {
                toastr.error('Invalid domain name (e.g., mycommunity.org)');
                return;
            }

            const logoFiles = document.getElementById('communityLogos').files;
            if (logoFiles.length > 5) {
                toastr.error('Maximum of 5 logos allowed');
                return;
            }
            for (let i = 0; i < logoFiles.length; i++) {
                const reader = new FileReader();
                await new Promise(resolve => {
                    reader.onload = () => {
                        siteRequest.communityLogos.push(reader.result);
                        resolve();
                    };
                    reader.readAsDataURL(logoFiles[i]);
                });
            }

            for (let i = 1; i <= emailCount; i++) {
                const emailInput = document.getElementById(`email${i}Name`);
                if (emailInput && emailInput.value.trim()) {
                    siteRequest.emails.push(emailInput.value.trim());
                }
            }

            for (let i = 1; i <= pageCount; i++) {
                const nameInput = document.getElementById(`page${i}Name`);
                const contentEditor = tinymce.get(`page${i}Content`);
                const imagesInput = document.getElementById(`page${i}Images`);
                if (nameInput && nameInput.value.trim()) {
                    const page = {
                        name: nameInput.value.trim(),
                        content: contentEditor ? contentEditor.getContent() : '',
                        images: []
                    };
                    if (imagesInput && imagesInput.files.length > 0) {
                        for (let j = 0; j < imagesInput.files.length; j++) {
                            const reader = new FileReader();
                            await new Promise(resolve => {
                                reader.onload = () => {
                                    page.images.push(reader.result);
                                    resolve();
                                };
                                reader.readAsDataURL(imagesInput.files[j]);
                            });
                        }
                    }
                    siteRequest.pages.push(page);
                }
            }

            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/siterequest`, {
                    method: 'POST',
                    body: JSON.stringify(siteRequest)
                });
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Failed to save site request: ${response.status}`);
                }
                toastr.success('Site request saved successfully');
                console.log('Site request saved');
            } catch (error) {
                toastr.error(`Error saving site request: ${error.message}`);
                console.error('Site request save error:', error);
            }
        }

        // Add a new page to the site request form
        function addPage() {
            console.log('Adding new page');
            if (pageCount >= 5) {
                toastr.error('Maximum of 5 pages allowed');
                return;
            }
            pageCount++;
            const container = document.getElementById('pagesContainer');
            const newPage = document.createElement('div');
            newPage.className = 'page-section';
            newPage.dataset.page = pageCount;
            newPage.innerHTML = `
                <label for="page${pageCount}Name">Page Name:</label>
                <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" placeholder="e.g., Events">
                <br><br>
                <label for="page${pageCount}Content">Page Content:</label>
                <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
                <label for="page${pageCount}Images">Additional Images:</label>
                <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                <button type="button" class="remove-page-btn" data-page="${pageCount}">Remove Page</button>
            `;
            container.appendChild(newPage);
            tinymce.remove();
            waitForTinyMCE(initializeTinyMCE);
            console.log('Added page:', pageCount);
        }

        // Remove a page from the site request form
        function removePage(pageNum) {
            console.log('Removing page:', pageNum);
            if (pageCount <= 1) {
                toastr.error('Cannot remove the last page');
                return;
            }
            const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
            if (pageSection) {
                pageSection.remove();
                pageCount--;
                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
                console.log('Removed page:', pageNum);
            }
        }

        // Add a new email to the site request form
        function addEmail() {
            console.log('Adding new email');
            if (emailCount >= 5) {
                toastr.error('Maximum of 5 email addresses allowed');
                return;
            }
            emailCount++;
            const container = document.getElementById('emailsContainer');
            const domain = document.getElementById('preferredDomain').value || 'mycommunity.org';
            const newEmail = document.createElement('div');
            newEmail.className = 'email-section';
            newEmail.dataset.email = emailCount;
            newEmail.innerHTML = `
                <label for="email${emailCount}Name">Email Name:</label>
                <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
                <span id="email${emailCount}Domain">@${domain}</span>
                <button type="button" class="remove-email-btn" data-email="${emailCount}">Remove Email</button>
            `;
            container.appendChild(newEmail);
            updateEmailDomains();
            console.log('Added email:', emailCount);
        }

        // Remove an email from the site request form
        function removeEmail(emailNum) {
            console.log('Removing email:', emailNum);
            if (emailCount <= 1) {
                toastr.error('Cannot remove the last email');
                return;
            }
            const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
            if (emailSection) {
                emailSection.remove();
                emailCount--;
                updateEmailDomains();
                console.log('Removed email:', emailNum);
            }
        }

        // Update email domains based on preferred domain
        function updateEmailDomains() {
            console.log('Updating email domains');
            const domain = document.getElementById('preferredDomain').value || 'mycommunity.org';
            for (let i = 1; i <= emailCount; i++) {
                const domainSpan = document.getElementById(`email${i}Domain`);
                if (domainSpan) domainSpan.textContent = `@${domain}`;
            }
            console.log('Updated email domains to:', domain);
        }

        // Check domain availability (placeholder)
        function checkDomainAvailability() {
            console.log('Checking domain availability');
            const domain = document.getElementById('preferredDomain').value;
            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domain) {
                toastr.error('Please enter a preferred domain name');
                return;
            }
            if (!domainRegex.test(domain)) {
                toastr.error('Invalid domain name (e.g., mycommunity.org)');
                return;
            }
            toastr.info(`Checking availability for ${domain}...`);
            setTimeout(() => toastr.success('This is a placeholder - domain check not implemented'), 1000);
            console.log('Checked domain availability for:', domain);
        }

        // Start the initialization
        initializeCommunity();
    </script>
</body>
</html>

old/configuration.py

from flask import Blueprint, jsonify, request
from utils.auth import login_required
from utils.config import load_config, save_config
import logging
import json

configuration_bp = Blueprint('configuration', __name__)

def get_config():
    try:
        config = load_config()
        # Redact sensitive data in logs
        log_config = config.copy()
        if "jwt" in log_config and "SECRET_KEY" in log_config["jwt"]:
            log_config["jwt"]["SECRET_KEY"] = "[REDACTED]"
        logging.debug(f"Retrieved config: {json.dumps(log_config)}")
        return jsonify({"status": "success", "count": len(config), "config": config}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to retrieve config: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@configuration_bp.route('/config/<affiliate>', methods=['PATCH'])
@login_required(["admin"], require_all=True)
def replace_config(affiliate):
    try:
        config = load_config()
        data = request.get_json()
        if not data or not isinstance(data, dict):
            logging.warning(f"UX Issue - Invalid config update data for affiliate {affiliate}: {json.dumps(data)}")
            return jsonify({"status": "error", "message": "Invalid data"}), 400
        config[affiliate] = data
        save_config(config)
        # Redact sensitive data in logs
        log_config = config.copy()
        if "jwt" in log_config and "SECRET_KEY" in log_config["jwt"]:
            log_config["jwt"]["SECRET_KEY"] = "[REDACTED]"
        logging.debug(f"Updated config for affiliate {affiliate}: {json.dumps(log_config)}")
        return jsonify({"status": "success", "message": f"Updated {affiliate} config"}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to update config for affiliate {affiliate}: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

old/data_retrieval.py

from flask import Blueprint, request, jsonify
from utils.categories import get_all_categories
from utils.products import search_all_discounted
import logging
import json

data_retrieval_bp = Blueprint('data_retrieval', __name__)

def get_categories():
    try:
        parent_id = request.args.get('parent_id')
        categories = get_all_categories(parent_id)
        if not categories:
            logging.warning(f"UX Issue - No categories returned for parent_id: {parent_id}")
        return jsonify({"status": "success", "count": len(categories), "categories": categories}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to retrieve categories: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@data_retrieval_bp.route('/discounted-products', methods=['GET'])
def get_all_discounted_products():
    try:
        category_id = request.args.get('category_id')
        if not category_id:
            logging.warning("UX Issue - No category_id provided for discounted products")
            return jsonify({"status": "error", "message": "category_id required"}), 400
        products = search_all_discounted(category_id)
        if not products:
            logging.warning(f"UX Issue - No discounted products found for category_id: {category_id}")
        return jsonify({"status": "success", "count": len(products), "products": products}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to retrieve discounted products: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

old/madeira.py

from flask import Flask, jsonify, request, render_template, redirect, url_for, abort, render_template_string
from flask_cors import CORS
from amazon_paapi import AmazonApi 
import time
import json
import os
import requests
import jwt
from pseudo_categories import PSEUDO_CATEGORIES
import random
import string
import hashlib
import bcrypt
import datetime
import re
import logging
import markdown
import whois
from functools import wraps

app = Flask(__name__)
CONFIG_FILE = "config.json"
DEFAULT_CATEGORIES = ["283155", "172282"]
USERS_SETTINGS_FILE = "users_settings.json"
# Define the base directory for site requests
SITE_REQUEST_DIR = os.path.join(os.path.dirname(__file__), "siterequest")

# Set up logging
logging.basicConfig(
    filename='app.log',  # Logfile will be 'app.log' in the current working directory
    level=logging.DEBUG,
    format='%(asctime)s %(levelname)s %(message)s'
)
logger = logging.getLogger(__name__)

# Enable CORS with verbose logging
CORS(app, resources={
    r"/*": {  # Wildcard to match all routes
        "origins": "https://clubmadeira.io",
        "methods": ["GET", "POST", "PUT", "PATCH", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization"]
    }
}, supports_credentials=False)

def load_config():
    default_config = {
        "amazon_uk": {"ACCESS_KEY": "", "SECRET_KEY": "", "ASSOCIATE_TAG": "", "COUNTRY": ""},
        "ebay_uk": {"APP_ID": ""},
        "awin": {"API_TOKEN": ""},
        "cj": {"API_KEY": "", "WEBSITE_ID": ""},
        "textmagic": {"USERNAME": "", "API_KEY": ""},
        "tiny": {"API_KEY": ""}
    }
    if not os.path.exists(CONFIG_FILE):
        return default_config
    try:
        with open(CONFIG_FILE, 'r') as f:
            loaded_config = json.load(f)
        if not isinstance(loaded_config, dict):
            print(f"Error: {CONFIG_FILE} does not contain a valid JSON object. Using default config.")
            return default_config
        result_config = default_config.copy()
        for affiliate in loaded_config:
            if affiliate in result_config:
                result_config[affiliate].update(loaded_config[affiliate])
            else:
                result_config[affiliate] = loaded_config[affiliate]
        return result_config
    except json.JSONDecodeError as e:
        print(f"Error decoding {CONFIG_FILE}: {str(e)}. Returning default config.")
        return default_config
    except Exception as e:
        print(f"Unexpected error loading {CONFIG_FILE}: {str(e)}. Returning default config.")
        return default_config

# Load the configuration from config.json
config = load_config()

# Check if the required 'jwt' section and 'SECRET_KEY' exist
if 'jwt' not in config or 'SECRET_KEY' not in config['jwt']:
    raise ValueError("JWT SECRET_KEY is missing in config.json")

# Set the JWT_SECRET_KEY in the app's configuration
app.config['JWT_SECRET_KEY'] = config['jwt']['SECRET_KEY']

# Ensure the siterequest directory exists
if not os.path.exists(SITE_REQUEST_DIR):
    os.makedirs(SITE_REQUEST_DIR)

# Custom decorator for permissions
def require_permissions(required_permissions, require_all=True):
    def decorator(f):
        @wraps(f)
        def decorated_function(*args, **kwargs):
            auth_header = request.headers.get("Authorization")
            if not auth_header or not auth_header.startswith("Bearer "):
                return jsonify({"status": "error", "message": "Authorization token required"}), 401
            
            token = auth_header.split(" ")[1]
            try:
                payload = jwt.decode(token, app.config['JWT_SECRET_KEY'] , algorithms=["HS256"])
                if datetime.datetime.utcnow().timestamp() > payload["exp"]:
                    return jsonify({"status": "error", "message": "Token has expired"}), 401
                user_permissions = payload.get("permissions", [])
                request.user_id = payload["userId"]
                request.permissions = user_permissions
            except jwt.InvalidTokenError:
                return jsonify({"status": "error", "message": "Invalid token"}), 401
            except Exception as e:
                return jsonify({"status": "error", "message": f"Token error: {str(e)}"}), 500

            # Handle shorthands
            effective_perms = []
            for perm in required_permissions:
                if perm == "allauth":
                    effective_perms.extend(["admin", "merchant", "community", "wixpro"])
                elif perm == "self":
                    user_id_in_route = next((v for v in kwargs.values() if isinstance(v, str)), None)
                    if user_id_in_route and request.user_id != user_id_in_route:
                        effective_perms.append(None)  # Fails unless other perms allow
                    elif not user_id_in_route:  # For endpoints like /update-password
                        effective_perms.append("self")  # Check in function
                else:
                    effective_perms.append(perm)

            # Permission check
            if require_all:
                if not all(perm in user_permissions for perm in effective_perms if perm is not None and perm != "self"):
                    return jsonify({"status": "error", "message": f"Insufficient permissions: {effective_perms}"}), 403
            else:
                if not any(perm in user_permissions for perm in effective_perms if perm is not None and perm != "self"):
                    return jsonify({"status": "error", "message": f"Insufficient permissions: {effective_perms}"}), 403

            return f(*args, **kwargs)
        return decorated_function
    return decorator

# region Helper Functions
def generate_code():
    charset = string.digits + string.ascii_uppercase
    code = ''.join(random.choice(charset) for _ in range(7))
    total = sum(charset.index(c) for c in code)
    checksum = charset[total % 36]
    return code + checksum

def load_users_categories():
    if os.path.exists(USERS_FILE):
        try:
            with open(USERS_FILE, 'r') as f:
                return json.load(f)
        except Exception as e:
            print(f"Error loading {USERS_FILE}: {str(e)}")
            return {}
    return {}

def save_users_categories(users_data):
    try:
        with open(USERS_FILE, 'w') as f:
            json.dump(users_data, f, indent=4)
    except Exception as e:
        print(f"Error saving {USERS_FILE}: {str(e)}")

def get_user_categories(user_id):
    users_data = load_users_categories()
    if user_id not in users_data:
        users_data[user_id] = DEFAULT_CATEGORIES
        save_users_categories(users_data)
    return users_data.get(user_id, [])

def load_users_products():
    users_settings = load_users_settings()
    users_products = {}
    
    for user_id, settings in users_settings.items():
        wix_client_id = settings.get("wixClientId")
        if not wix_client_id:
            print(f"No wixClientId found for user {user_id}")
            users_products[user_id] = []
            continue

        token_url = "https://www.wixapis.com/oauth2/token"
        payload = {"clientId": wix_client_id, "grantType": "anonymous"}
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(token_url, json=payload, headers=headers)
            if response.status_code != 200:
                print(f"Error getting token for user {user_id}: {response.status_code} - {response.text}")
                users_products[user_id] = []
                continue
            token_data = response.json()
            access_token = token_data["access_token"]
            print(f"Access Token for user {user_id}: {access_token}")
        except Exception as e:
            print(f"Token fetch error for user {user_id}: {str(e)}")
            users_products[user_id] = []
            continue

        collections_url = "https://www.wixapis.com/stores-reader/v1/collections/query"
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {access_token}"}

        def fetch_collections(limit=10, offset=0):
            query_payload = {"query": {"paging": {"limit": limit, "offset": offset}}, "includeNumberOfProducts": True}
            response = requests.post(collections_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching collections for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        products_url = "https://www.wixapis.com/stores/v1/products/query"

        def fetch_products_for_collection(collection_id, limit=10, offset=0):
            filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
            query_payload = {"query": {"filter": filter_str, "paging": {"limit": limit, "offset": offset}}}
            response = requests.post(products_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching products for collection {collection_id} for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        all_collections = []
        limit = 10
        offset = 0

        while True:
            result = fetch_collections(limit=limit, offset=offset)
            if not result or "collections" not in result or not result["collections"]:
                break

            collections = result["collections"]
            filtered_collections = [{"id": col["id"], "name": col["name"], "numberOfProducts": col["numberOfProducts"], "products": []} 
                                    for col in collections if not col["id"].startswith("00000000")]
            all_collections.extend(filtered_collections)
            print(f"Fetched {len(collections)} collections, kept {len(filtered_collections)} for user {user_id} (offset {offset} to {offset + limit - 1})")
            offset += limit
            if len(collections) < limit:
                break

        all_products = []
        for collection in all_collections:
            collection_id = collection["id"]
            collection_name = collection["name"]
            offset = 0

            while True:
                result = fetch_products_for_collection(collection_id, limit=limit, offset=offset)
                if not result or "products" not in result or not result["products"]:
                    break

                products = result["products"]
                for product in products:
                    current_price = float(product.get("price", {}).get("formatted", {}).get("price", "0").replace("$", "").replace("£", "").replace(",", "") or 0.0)
                    original_price = float(product.get("discountedPrice", {}).get("formatted", {}).get("price", str(current_price)).replace("$", "").replace("£", "").replace(",", "") or current_price)
                    discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0
                    base_url = product.get("productPageUrl", {}).get("base", "").rstrip("/") + "/" + product.get("productPageUrl", {}).get("path", "").lstrip("/")
                    product_url = f"{base_url}?referer={user_id}"
                    all_products.append({
                        "source": user_id,
                        "id": product.get("id", ""),
                        "title": product.get("name", ""),
                        "product_url": product_url,
                        "current_price": current_price,
                        "original_price": original_price,
                        "discount_percent": round(discount, 2),
                        "image_url": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                        "qty": int(product.get("stock", {}).get("quantity", 0)) if product.get("stock", {}).get("trackQuantity", False) else -1,
                        "category": collection_name,
                        "user_id": user_id
                    })
                print(f"Fetched {len(products)} products for collection {collection_name} for user {user_id} (offset {offset} to {offset + limit - 1})")
                offset += limit
                if len(products) < limit:
                    break

        users_products[user_id] = all_products
        print(f"Total products fetched for user {user_id}: {len(all_products)}")

    return users_products

def save_users_products(users_products):
    with open(USERS_PRODUCTS_FILE, 'w') as f:
        json.dump(users_products, f, indent=4)

def get_user_products(user_id):
    users_products = load_users_products()
    return users_products.get(user_id, [])

def save_config(config):
    try:
        if not isinstance(config, dict):
            raise ValueError("Config must be a dictionary")
        with open(CONFIG_FILE, 'w') as f:
            json.dump(config, f, indent=4)
        print(f"Config saved successfully to {CONFIG_FILE}")
    except IOError as e:
        print(f"Error saving {CONFIG_FILE}: {str(e)}")
        raise
    except ValueError as e:
        print(f"Error: {str(e)}")
        raise
    except Exception as e:
        print(f"Unexpected error saving {CONFIG_FILE}: {str(e)}")
        raise

def get_amazon_category_title(browse_node_id):
    config = load_config()
    if all(config.get("amazon_uk", {}).values()):
        amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                           config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
        try:
            browse_nodes = amazon.get_browse_nodes(browse_node_ids=[browse_node_id], resources=["BrowseNodes.DisplayName"])
            if browse_nodes and browse_nodes.browse_nodes:
                return browse_nodes.browse_nodes[0].display_name
        except Exception as e:
            print(f"Error fetching category title for {browse_node_id}: {str(e)}")
    def find_category_recursive(categories, target_id):
        for category in categories:
            if category.get("id") == target_id:
                return category.get("name")
            if "subcategories" in category:
                result = find_category_recursive(category["subcategories"], target_id)
                if result is not None:
                    return result
    return find_category_recursive(PSEUDO_CATEGORIES, browse_node_id)

def get_immediate_subcategories(parent_id):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    try:
        browse_nodes = amazon.get_browse_nodes(browse_node_ids=[parent_id], resources=["BrowseNodes.Children"])
        if browse_nodes and browse_nodes.browse_nodes:
            return [{"id": node.browse_node_id, "name": node.display_name} for node in browse_nodes.browse_nodes[0].children]
        return []
    except Exception as e:
        print(f"Error fetching subcategories for {parent_id}: {str(e)}")
        return []

def filter_categories_with_products(category_ids, min_discount_percent):
    config = load_config()
    all_discounted_items = []
    for cat_id in category_ids:
        if all(config.get("amazon_uk", {}).values()):
            all_discounted_items.extend(search_amazon_uk_discounted(cat_id, min_discount_percent))
        if all(config.get("ebay_uk", {}).values()):
            all_discounted_items.extend(search_ebay_uk_discounted(cat_id, min_discount_percent))
        if config.get("awin", {}).get("API_TOKEN"):
            all_discounted_items.extend(search_awin_uk_discounted(cat_id, min_discount_percent))
        if all(config.get("cj", {}).values()):
            all_discounted_items.extend(search_cj_uk_discounted(cat_id, min_discount_percent))
    filtered_categories = []
    for cat_id in category_ids:
        if any(item for item in all_discounted_items if "BrowseNodeId" in item and item["BrowseNodeId"] == cat_id):
            category_title = get_amazon_category_title(cat_id) or cat_id
            filtered_categories.append({"id": cat_id, "name": category_title})
    return filtered_categories

def find_node(categories, target_id):
    for category in categories:
        if category['id'] == target_id:
            return category
        if 'subcategories' in category:
            result = find_node(category['subcategories'], target_id)
            if result is not None:
                return result
    return None

def find_pseudo_subcategories(parent_id, categories):
    node = find_node(categories, parent_id)
    if node and 'subcategories' in node:
        return [{'id': subcat['id'], 'name': subcat['name']} for subcat in node['subcategories']]
    return []

def load_users_settings():
    if os.path.exists(USERS_SETTINGS_FILE):
        try:
            with open(USERS_SETTINGS_FILE, 'r') as f:
                return json.load(f)
        except json.JSONDecodeError as e:
            raise Exception(f"Invalid JSON in {USERS_SETTINGS_FILE}: {str(e)}")
        except Exception as e:
            raise Exception(f"Error loading {USERS_SETTINGS_FILE}: {str(e)}")
    return {}

def save_users_settings(users_settings):
    try:
        with open(USERS_SETTINGS_FILE, 'w') as f:
            json.dump(users_settings, f, indent=4)
    except IOError as e:
        raise Exception(f"Failed to write to {USERS_SETTINGS_FILE}: {str(e)}")
    except Exception as e:
        raise Exception(f"Unexpected error saving {USERS_SETTINGS_FILE}: {str(e)}")
    
def get_user_settings(user_id):
    users_settings = load_users_settings()
    return users_settings.get(user_id, {})

def load_site_request(user_id):
    file_path = os.path.join(SITE_REQUEST_DIR, user_id)
    logger.debug(f"Attempting to load site request for user {user_id} from {file_path}")
    if os.path.exists(file_path):
        logger.debug(f"File exists: {file_path}")
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
                logger.debug(f"Successfully loaded data for user {user_id}: {json.dumps(data, indent=2)}")
                return data
        except json.JSONDecodeError as e:
            logger.error(f"JSON decode error for user {user_id} at {file_path}: {str(e)}")
            return {}
        except IOError as e:
            logger.error(f"IO error loading file for user {user_id} at {file_path}: {str(e)}")
            return {}
    else:
        logger.debug(f"No file found for user {user_id} at {file_path}")
        return {}

def save_site_request(user_id, site_request_data):
    file_path = os.path.join(SITE_REQUEST_DIR, user_id)
    try:
        with open(file_path, 'w') as f:
            json.dump(site_request_data, f, indent=4)
    except IOError as e:
        raise Exception(f"Failed to save site request for user {user_id}: {str(e)}")
# endregion Helper Functions

# region Detailed Fetch
def get_amazon_uk_full_details(asins, category):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    full_item_data = []
    try:
        item_response = amazon.get_items(
            item_ids=asins,
            resources=["ItemInfo.ByLineInfo", "ItemInfo.ContentInfo", "ItemInfo.Features", 
                       "ItemInfo.ProductInfo", "ItemInfo.Title", "Images.Primary.Large", 
                       "Offers.Listings.Price", "DetailPageURL"]
        )
        for item in item_response.items:
            current_price = item.offers.listings[0].price.amount if item.offers and item.offers.listings else None
            if item.offers and item.offers.listings and item.offers.listings[0].price.savings:
                savings = item.offers.listings[0].price.savings.amount
                original_price = current_price + savings
                discount_percent = float(item.offers.listings[0].price.savings.percentage)
            else:
                original_price = current_price
                discount_percent = 0.0
            item_data = {
                "source": "amazon_uk",
                "id": item.asin,
                "title": item.item_info.title.display_value if item.item_info.title else None,
                "product_url": item.detail_page_url,
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": discount_percent,
                "image_url": item.images.primary.large.url if item.images and item.images.primary else None,
                "category": category,
                "manufacturer": item.item_info.by_line_info.manufacturer.display_value if item.item_info.by_line_info and item.item_info.by_line_info.manufacturer else None,
                "dimensions": item.item_info.product_info.item_dimensions.display_value if item.item_info.product_info and item.item_info.product_info.item_dimensions else None,
                "features": item.item_info.features.display_values if item.item_info.features else []
            }
            full_item_data.append(item_data)
        time.sleep(1)
    except Exception as e:
        print(f"Amazon UK Error: {str(e)}")
    return full_item_data

def get_ebay_uk_full_details(item_ids, category):
    config = load_config()
    if not all(config.get("ebay_uk", {}).values()):
        return []
    url = "https://api.ebay.com/buy/browse/v1/item"
    headers = {"Authorization": f"Bearer {config['ebay_uk']['APP_ID']}"}
    full_item_data = []
    for item_id in item_ids:
        try:
            params = {"item_id": item_id}
            response = requests.get(url, headers=headers, params=params)
            item = response.json()
            current_price = float(item["price"]["value"])
            original_price_value = item.get("originalPrice", {}).get("value", current_price)
            original_price = float(original_price_value)
            discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
            item_data = {
                "source": "ebay_uk",
                "id": item["itemId"],
                "title": item["title"],
                "product_url": item["itemWebUrl"],
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": round(discount, 2),
                "image_url": item["image"]["imageUrl"] if "image" in item else None,
                "category": category,
                "manufacturer": item.get("brand", None),
                "features": item.get("shortDescription", "").split(". ") if item.get("shortDescription") else []
            }
            full_item_data.append(item_data)
            time.sleep(1)
        except Exception as e:
            print(f"eBay UK Error for {item_id}: {str(e)}")
    return full_item_data

def get_awin_uk_full_details(product_ids, category):
    config = load_config()
    if not config.get("awin", {}).get("API_TOKEN"):
        return []
    url = f"https://api.awin.com/publishers/{config['awin']['API_TOKEN']}/products"
    full_item_data = []
    for product_id in product_ids:
        try:
            params = {"productId": product_id, "region": "UK"}
            response = requests.get(url, params=params)
            product = response.json()["products"][0]
            current_price = float(product["price"]["amount"])
            original_price = float(product.get("originalPrice", current_price))
            discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
            item_data = {
                "source": "awin_uk",
                "id": product["productId"],
                "title": product["name"],
                "product_url": product["url"],
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": round(discount, 2),
                "image_url": product.get("imageUrl", None),
                "category": category,
                "manufacturer": product.get("brand", None),
                "dimensions": product.get("dimensions", None),
                "features": product.get("description", "").split(". ") if product.get("description") else []
            }
            full_item_data.append(item_data)
            time.sleep(1)
        except Exception as e:
            print(f"Awin UK Error for {product_id}: {str(e)}")
    return full_item_data

def get_cj_uk_full_details(skus, category):
    config = load_config()
    if not all(config.get("cj", {}).values()):
        return []
    url = "https://product-search.api.cj.com/v2/product-search"
    headers = {"Authorization": f"Bearer {config['cj']['API_KEY']}"}
    full_item_data = []
    for sku in skus:
        try:
            params = {"website-id": config["cj"]["WEBSITE_ID"], "sku": sku, "country": "UK"}
            response = requests.get(url, headers=headers, params=params)
            product = response.json()["products"][0]
            current_price = float(product["price"])
            original_price = float(product.get("salePrice", current_price))
            discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
            item_data = {
                "source": "cj_uk",
                "id": product["sku"],
                "title": product["name"],
                "product_url": product["buyUrl"],
                "current_price": current_price,
                "original_price": original_price,
                "discount_percent": round(discount, 2),
                "image_url": product.get("imageUrl", None),
                "category": category,
                "manufacturer": product.get("manufacturerName", None),
                "dimensions": product.get("dimensions", None),
                "features": product.get("description", "").split(". ") if product.get("description") else []
            }
            full_item_data.append(item_data)
            time.sleep(1)
        except Exception as e:
            print(f"CJ UK Error for {sku}: {str(e)}")
    return full_item_data
# endregion Detailed Fetch

# region Search
def search_amazon_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    asins = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    try:
        search_params = {"BrowseNodeId": browse_node_id, "ItemCount": 10, "Resources": ["Offers.Listings.Price", "Offers.Summaries.HighestPrice"]}
        for page in range(1, 11):
            search_params["ItemPage"] = page
            search_result = amazon.search_items(**search_params)
            if not search_result or not search_result.items:
                break
            for item in search_result.items:
                if (item.offers and item.offers.listings and item.offers.listings[0].price and 
                    item.offers.listings[0].price.savings and 
                    item.offers.listings[0].price.savings.percentage >= min_discount_percent):
                    asins.append(item.asin)
            time.sleep(1)
        return get_amazon_uk_full_details(asins, category=category_title)
    except Exception as e:
        print(f"Amazon UK Search Error: {str(e)}")
        return []

def search_ebay_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not all(config.get("ebay_uk", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://api.ebay.com/buy/browse/v1/item_summary/search"
    headers = {"Authorization": f"Bearer {config['ebay_uk']['APP_ID']}"}
    params = {"q": category_title, "filter": "condition:NEW,availability:UK", "limit": "10", "sort": "-price"}
    item_ids = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for item in data.get("itemSummaries", []):
            current_price = float(item["price"]["value"])
            original_price = float(item.get("originalPrice", {}).get("value", current_price))
            if original_price > current_price:
                discount = ((original_price - current_price) / original_price) * 100
                if discount >= min_discount_percent:
                    item_ids.append(item["itemId"])
        return get_ebay_uk_full_details(item_ids, category=category_title)
    except Exception as e:
        print(f"eBay UK Search Error: {str(e)}")
        return []

def search_awin_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not config.get("awin", {}).get("API_TOKEN"):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = f"https://api.awin.com/publishers/{config['awin']['API_TOKEN']}/products"
    params = {"region": "UK", "search": category_title, "discount": "true"}
    product_ids = []
    try:
        response = requests.get(url, params=params)
        data = response.json()
        for product in data.get("products", []):
            current_price = float(product["price"]["amount"])
            original_price = float(product.get("originalPrice", current_price))
            if original_price > current_price:
                discount = ((original_price - current_price) / original_price) * 100
                if discount >= min_discount_percent:
                    product_ids.append(product["productId"])
        return get_awin_uk_full_details(product_ids, category=category_title)
    except Exception as e:
        print(f"Awin UK Search Error: {str(e)}")
        return []

def search_cj_uk_discounted(browse_node_id, min_discount_percent=20):
    config = load_config()
    if not all(config.get("cj", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://product-search.api.cj.com/v2/product-search"
    headers = {"Authorization": f"Bearer {config['cj']['API_KEY']}"}
    params = {"website-id": config["cj"]["WEBSITE_ID"], "keywords": category_title, "country": "UK", "sale-price": "true"}
    skus = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for product in data.get("products", []):
            current_price = float(product["price"])
            original_price = float(product.get("salePrice", current_price))
            if original_price > current_price:
                discount = ((original_price - current_price) / original_price) * 100
                if discount >= min_discount_percent:
                    skus.append(product["sku"])
        return get_cj_uk_full_details(skus, category=category_title)
    except Exception as e:
        print(f"CJ UK Search Error: {str(e)}")
        return []

def search_wix_discounted(browse_node_id, min_discount_percent=20):
    users_settings = load_users_settings()
    all_discounted_products = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        print(f"No category title found for browse_node_id {browse_node_id}")
        return []

    for user_id, settings in users_settings.items():
        wix_client_id = settings.get("wixClientId")
        if not wix_client_id:
            print(f"No wixClientId found for user {user_id}")
            continue

        token_url = "https://www.wixapis.com/oauth2/token"
        payload = {"clientId": wix_client_id, "grantType": "anonymous"}
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(token_url, json=payload, headers=headers)
            if response.status_code != 200:
                print(f"Error getting token for user {user_id}: {response.status_code} - {response.text}")
                continue
            token_data = response.json()
            access_token = token_data["access_token"]
            print(f"Access Token for user {user_id}: {access_token}")
        except Exception as e:
            print(f"Token fetch error for user {user_id}: {str(e)}")
            continue

        collections_url = "https://www.wixapis.com/stores-reader/v1/collections/query"
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {access_token}"}

        def fetch_collections(limit=10, offset=0):
            query_payload = {"query": {"paging": {"limit": limit, "offset": offset}}, "includeNumberOfProducts": True}
            response = requests.post(collections_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching collections for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        products_url = "https://www.wixapis.com/stores/v1/products/query"

        def fetch_products_for_collection(collection_id, limit=10, offset=0):
            filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
            query_payload = {"query": {"filter": filter_str, "paging": {"limit": limit, "offset": offset}}}
            response = requests.post(products_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching products for collection {collection_id} for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        limit = 10
        offset = 0
        matching_collection = None

        while True:
            result = fetch_collections(limit=limit, offset=offset)
            if not result or "collections" not in result or not result["collections"]:
                break

            collections = result["collections"]
            for col in collections:
                if col["name"].lower() == category_title.lower() and not col["id"].startswith("00000000"):
                    matching_collection = col
                    break
            if matching_collection:
                break
            offset += limit
            if len(collections) < limit:
                break

        if not matching_collection:
            print(f"No matching collection found for category '{category_title}' for user {user_id}")
            continue

        collection_id = matching_collection["id"]
        offset = 0
        discounted_products = []

        while True:
            result = fetch_products_for_collection(collection_id, limit=limit, offset=offset)
            if not result or "products" not in result or not result["products"]:
                break

            products = result["products"]
            for product in products:
                current_price = float(product.get("price", {}).get("formatted", {}).get("price", "0").replace("$", "").replace("£", "").replace(",", "") or 0.0)
                original_price = float(product.get("discountedPrice", {}).get("formatted", {}).get("price", str(current_price)).replace("$", "").replace("£", "").replace(",", "") or current_price)
                if original_price > current_price:
                    discount = ((original_price - current_price) / original_price) * 100
                    if discount >= min_discount_percent:
                        base_url = product.get("productPageUrl", {}).get("base", "").rstrip("/") + "/" + product.get("productPageUrl", {}).get("path", "").lstrip("/")
                        product_url = f"{base_url}?referer={user_id}"
                        discounted_products.append({
                            "source": user_id,
                            "id": product.get("id", ""),
                            "title": product.get("name", ""),
                            "product_url": product_url,
                            "current_price": current_price,
                            "original_price": original_price,
                            "discount_percent": round(discount, 2),
                            "image_url": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                            "qty": int(product.get("stock", {}).get("quantity", 0)) if product.get("stock", {}).get("trackQuantity", False) else -1,
                            "category": matching_collection["name"],
                            "user_id": user_id
                        })
            offset += limit
            if len(products) < limit:
                break

        all_discounted_products.extend(discounted_products)
        print(f"Found {len(discounted_products)} discounted products for user {user_id} in category '{category_title}'")
    return all_discounted_products

def search_amazon_uk_all(browse_node_id):
    config = load_config()
    if not all(config.get("amazon_uk", {}).values()):
        return []
    amazon = AmazonApi(config["amazon_uk"]["ACCESS_KEY"], config["amazon_uk"]["SECRET_KEY"],
                       config["amazon_uk"]["ASSOCIATE_TAG"], config["amazon_uk"]["COUNTRY"])
    asins = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    try:
        search_params = {"BrowseNodeId": browse_node_id, "ItemCount": 10, "Resources": ["ItemInfo.Title", "Offers.Listings.Price", "Images.Primary.Large", "DetailPageURL"]}
        for page in range(1, 11):
            search_params["ItemPage"] = page
            search_result = amazon.search_items(**search_params)
            if not search_result or not search_result.items:
                break
            for item in search_result.items:
                asins.append(item.asin)
            time.sleep(1)
        return get_amazon_uk_full_details(asins, category=category_title)
    except Exception as e:
        print(f"Amazon UK Search Error: {str(e)}")
        return []

def search_ebay_uk_all(browse_node_id):
    config = load_config()
    if not all(config.get("ebay_uk", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://api.ebay.com/buy/browse/v1/item_summary/search"
    headers = {"Authorization": f"Bearer {config['ebay_uk']['APP_ID']}"}
    params = {"q": category_title, "filter": "condition:NEW,availability:UK", "limit": "10"}
    item_ids = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for item in data.get("itemSummaries", []):
            item_ids.append(item["itemId"])
        return get_ebay_uk_full_details(item_ids, category=category_title)
    except Exception as e:
        print(f"eBay UK Search Error: {str(e)}")
        return []

def search_awin_uk_all(browse_node_id):
    config = load_config()
    if not config.get("awin", {}).get("API_TOKEN"):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = f"https://api.awin.com/publishers/{config['awin']['API_TOKEN']}/products"
    params = {"region": "UK", "search": category_title}
    product_ids = []
    try:
        response = requests.get(url, params=params)
        data = response.json()
        for product in data.get("products", []):
            product_ids.append(product["productId"])
        return get_awin_uk_full_details(product_ids, category=category_title)
    except Exception as e:
        print(f"Awin UK Search Error: {str(e)}")
        return []

def search_cj_uk_all(browse_node_id):
    config = load_config()
    if not all(config.get("cj", {}).values()):
        return []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        return []
    url = "https://product-search.api.cj.com/v2/product-search"
    headers = {"Authorization": f"Bearer {config['cj']['API_KEY']}"}
    params = {"website-id": config["cj"]["WEBSITE_ID"], "keywords": category_title, "country": "UK"}
    skus = []
    try:
        response = requests.get(url, headers=headers, params=params)
        data = response.json()
        for product in data.get("products", []):
            skus.append(product["sku"])
        return get_cj_uk_full_details(skus, category=category_title)
    except Exception as e:
        print(f"CJ UK Search Error: {str(e)}")
        return []

def search_wix_all(browse_node_id):
    users_settings = load_users_settings()
    all_products = []
    category_title = get_amazon_category_title(browse_node_id)
    if not category_title:
        print(f"No category title found for browse_node_id {browse_node_id}")
        return []

    for user_id, settings in users_settings.items():
        wix_client_id = settings.get("wixClientId")
        if not wix_client_id:
            print(f"No wixClientId found for user {user_id}")
            continue

        token_url = "https://www.wixapis.com/oauth2/token"
        payload = {"clientId": wix_client_id, "grantType": "anonymous"}
        headers = {"Content-Type": "application/json"}
        try:
            response = requests.post(token_url, json=payload, headers=headers)
            if response.status_code != 200:
                print(f"Error getting token for user {user_id}: {response.status_code} - {response.text}")
                continue
            token_data = response.json()
            access_token = token_data["access_token"]
            print(f"Access Token for user {user_id}: {access_token}")
        except Exception as e:
            print(f"Token fetch error for user {user_id}: {str(e)}")
            continue

        collections_url = "https://www.wixapis.com/stores-reader/v1/collections/query"
        headers = {"Content-Type": "application/json", "Authorization": f"Bearer {access_token}"}

        def fetch_collections(limit=10, offset=0):
            query_payload = {"query": {"paging": {"limit": limit, "offset": offset}}, "includeNumberOfProducts": True}
            response = requests.post(collections_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching collections for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        products_url = "https://www.wixapis.com/stores/v1/products/query"

        def fetch_products_for_collection(collection_id, limit=10, offset=0):
            filter_str = json.dumps({"collections.id": {"$hasSome": [collection_id]}})
            query_payload = {"query": {"filter": filter_str, "paging": {"limit": limit, "offset": offset}}}
            response = requests.post(products_url, headers=headers, json=query_payload)
            if response.status_code != 200:
                print(f"Error fetching products for collection {collection_id} for user {user_id}: {response.status_code} - {response.text}")
                return None
            return response.json()

        limit = 10
        offset = 0
        matching_collection = None

        while True:
            result = fetch_collections(limit=limit, offset=offset)
            if not result or "collections" not in result or not result["collections"]:
                break

            collections = result["collections"]
            for col in collections:
                if col["name"].lower() == category_title.lower() and not col["id"].startswith("00000000"):
                    matching_collection = col
                    break
            if matching_collection:
                break
            offset += limit
            if len(collections) < limit:
                break

        if not matching_collection:
            print(f"No matching collection found for category '{category_title}' for user {user_id}")
            continue

        collection_id = matching_collection["id"]
        offset = 0
        category_products = []

        while True:
            result = fetch_products_for_collection(collection_id, limit=limit, offset=offset)
            if not result or "products" not in result or not result["products"]:
                break

            products = result["products"]
            for product in products:
                current_price = float(product.get("price", {}).get("formatted", {}).get("price", "0").replace("$", "").replace("£", "").replace(",", "") or 0.0)
                original_price = float(product.get("discountedPrice", {}).get("formatted", {}).get("price", str(current_price)).replace("$", "").replace("£", "").replace(",", "") or current_price)
                discount = ((original_price - current_price) / original_price) * 100 if original_price > current_price else 0.0
                base_url = product.get("productPageUrl", {}).get("base", "").rstrip("/") + "/" + product.get("productPageUrl", {}).get("path", "").lstrip("/")
                product_url = f"{base_url}?referer={user_id}"
                category_products.append({
                    "source": user_id,
                    "id": product.get("id", ""),
                    "title": product.get("name", ""),
                    "product_url": product_url,
                    "current_price": current_price,
                    "original_price": original_price,
                    "discount_percent": round(discount, 2),
                    "image_url": product.get("media", {}).get("mainMedia", {}).get("thumbnail", {}).get("url", ""),
                    "qty": int(product.get("stock", {}).get("quantity", 0)) if product.get("stock", {}).get("trackQuantity", False) else -1,
                    "category": matching_collection["name"],
                    "user_id": user_id
                })
            offset += limit
            if len(products) < limit:
                break

        all_products.extend(category_products)
        print(f"Found {len(category_products)} products for user {user_id} in category '{category_title}'")
    return all_products
# endregion Search

# region Management Endpoints
@app.route('/users', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_users():
    users_settings = load_users_settings()
    user_list = [{"USERid": user_id, "email_address": user["email_address"], "contact_name": user["contact_name"]} 
                 for user_id, user in users_settings.items()]
    return jsonify({"status": "success", "users": user_list}), 200

@app.route('/users/<user_id>', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_user(user_id):
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    user = users_settings[user_id]
    user_data = {
        "USERid": user_id,
        "email_address": user["email_address"],
        "contact_name": user["contact_name"],
        "permissions": user["permissions"],
        "website_url": user.get("website_url", ""),
        "wixClientId": user.get("wixClientId", ""),
        "referrals": user.get("referrals", {"visits": [], "orders": []})
    }
    return jsonify({"status": "success", "user": user_data}), 200

@app.route('/permissions/<user_id>', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_permissions(user_id):
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    permissions = users_settings[user_id]['permissions']
    return jsonify({"status": "success", "permissions": permissions}), 200

@app.route('/permissions/<user_id>', methods=['POST'])
@require_permissions(["admin"], require_all=True)
def add_permission(user_id):
    data = request.get_json()
    if 'permission' not in data:
        return jsonify({"status": "error", "message": "Permission field is required"}), 400
    permission = data['permission']
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    if permission in users_settings[user_id]['permissions']:
        return jsonify({"status": "error", "message": "Permission already exists"}), 400
    users_settings[user_id]['permissions'].append(permission)
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "Permission added"}), 200

@app.route('/permissions/<user_id>', methods=['DELETE'])
@require_permissions(["admin"], require_all=True)
def remove_permission(user_id):
    data = request.get_json()
    if 'permission' not in data:
        return jsonify({"status": "error", "message": "Permission field is required"}), 400
    permission = data['permission']
    users_settings = load_users_settings()
    if user_id not in users_settings:
        return jsonify({"status": "error", "message": "User not found"}), 404
    if permission not in users_settings[user_id]['permissions']:
        return jsonify({"status": "error", "message": "Permission not found"}), 400
    users_settings[user_id]['permissions'].remove(permission)
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "Permission removed"}), 200

@app.route('/config', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def get_config():
    config = load_config()
    return jsonify({"status": "success", "count": len(config), "config": config})

@app.route('/config/<affiliate>', methods=['PATCH'])
@require_permissions(["admin"], require_all=True)
def replace_config(affiliate):
    config = load_config()
    data = request.get_json()
    if not data or not isinstance(data, dict):
        return jsonify({"status": "error", "message": "Request body must contain a dictionary of credentials"}), 400
    config[affiliate] = data
    save_config(config)
    return jsonify({"status": "success", "message": f"Credentials for {affiliate} replaced", "credentials": config[affiliate]})

@app.route('/<USERid>/user', methods=['GET'])
@require_permissions(["self", "admin"], require_all=False)
def get_user_settings_endpoint(USERid):
    try:
        settings = get_user_settings(USERid)
        return jsonify({
            "status": "success",
            "contact_name": settings.get("contact_name", ""),
            "website_url": settings.get("website_url", ""),
            "email_address": settings.get("email_address", ""),
            "phone_number": settings.get("phone_number", ""),
            "wixClientId": settings.get("wixClientId", "")
        })
    except Exception as e:
        print(f"Error in /<USERid>/user GET: {str(e)}")
        return jsonify({"status": "error", "message": str(e)}), 500

@app.route('/<USERid>/user', methods=['PUT'])
@require_permissions(["self", "admin"], require_all=False)
def put_user_settings(USERid):
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    settings = request.json
    required_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]
    if not all(field in settings for field in required_fields):
        return jsonify({"status": "error", "message": "Settings must include all required fields"}), 400
    users_settings = load_users_settings()
    users_settings[USERid] = settings
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": f"Settings for user {USERid} replaced", "settings": settings})

@app.route('/<USERid>/user', methods=['PATCH'])
@require_permissions(["self", "admin", "wixpro"], require_all=False)
def patch_user_settings(USERid):
    if not request.json:
        return jsonify({"status": "error", "message": "Request body must contain settings"}), 400
    new_settings = request.json
    users_settings = load_users_settings()
    current_settings = users_settings.get(USERid, {})
    valid_fields = ["contact_name", "website_url", "email_address", "phone_number", "wixClientId"]
    if "wixpro" in request.permissions and not ("admin" in request.permissions or request.user_id == USERid):
        if any(key not in ["wixClientId"] for key in new_settings.keys()):
            return jsonify({"status": "error", "message": "Wixpro can only update wixClientId"}), 403
    for key in new_settings:
        if key in valid_fields:
            current_settings[key] = new_settings[key]
    users_settings[USERid] = current_settings
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": f"Settings for user {USERid} updated", "settings": current_settings})

@app.route('/<USERid>/mycategories', methods=['GET'])
@require_permissions(["self"], require_all=True)
def get_user_categories_endpoint(USERid):
    try:
        categories = get_user_categories(USERid)
        return jsonify({"status": "success", "count": len(categories), "categories": categories})
    except Exception as e:
        print(f"Error in /<USERid>/mycategories for USERid {USERid}: {str(e)}")
        return jsonify({"status": "error", "message": f"Failed to retrieve categories: {str(e)}"}), 500

@app.route('/<USERid>/mycategories', methods=['PUT'])
@require_permissions(["self"], require_all=True)
def put_user_categories(USERid):
    if not request.json or 'categories' not in request.json:
        return jsonify({"status": "error", "message": "Request body must contain 'categories' list"}), 400
    new_categories = request.json['categories']
    if not isinstance(new_categories, list):
        return jsonify({"status": "error", "message": "'categories' must be a list"}), 400
    users_data = load_users_categories()
    users_data[USERid] = new_categories
    save_users_categories(users_data)
    return jsonify({"status": "success", "message": f"Categories for user {USERid} replaced", "categories": new_categories})

@app.route('/<USERid>/mycategories', methods=['PATCH'])
@require_permissions(["self"], require_all=True)
def patch_user_categories(USERid):
    if not request.json or 'categories' not in request.json:
        return jsonify({"status": "error", "message": "Request body must contain 'categories' list"}), 400
    new_categories = request.json['categories']
    if not isinstance(new_categories, list):
        return jsonify({"status": "error", "message": "'categories' must be a list"}), 400
    users_data = load_users_categories()
    current_categories = set(users_data.get(USERid, []))
    current_categories.update(new_categories)
    users_data[USERid] = list(current_categories)
    save_users_categories(users_data)
    return jsonify({"status": "success", "message": f"Categories for user {USERid} patched", "categories": users_data[USERid]})

@app.route('/<USERid>/mycategories', methods=['DELETE'])
@require_permissions(["self"], require_all=True)
def delete_user_category(USERid):
    category_id = request.args.get('category_id')
    if not category_id:
        return jsonify({"status": "error", "message": "Query parameter 'category_id' is required"}), 400
    users_data = load_users_categories()
    if USERid in users_data and category_id in users_data[USERid]:
        users_data[USERid].remove(category_id)
        save_users_categories(users_data)
        return jsonify({"status": "success", "message": f"Category {category_id} removed for user {USERid}", "categories": users_data[USERid]})
    return jsonify({"status": "error", "message": f"Category {category_id} not found for user {USERid}"}), 404

@app.route('/categories', methods=['GET'])
@require_permissions(["allauth"], require_all=False)
def get_all_categories():
    config = load_config()
    parent_id = request.args.get('parent_id')
    amazon_config = config.get("amazon_uk", {})
    has_valid_amazon_config = all(amazon_config.get(field, "") for field in ["ACCESS_KEY", "SECRET_KEY", "ASSOCIATE_TAG", "COUNTRY"])
    if has_valid_amazon_config and parent_id:
        categories = get_immediate_subcategories(parent_id)
    elif not parent_id:
        categories = [{"id": cat["id"], "name": cat["name"]} for cat in PSEUDO_CATEGORIES]
    else:
        categories = find_pseudo_subcategories(parent_id, PSEUDO_CATEGORIES)
    return jsonify({"status": "success", "count": len(categories), "categories": categories})

@app.route('/<USERid>/products', methods=['GET'])
@require_permissions(["self"], require_all=True)
def get_user_product_list(USERid):
    products = get_user_products(USERid)
    return jsonify({"status": "success", "count": len(products), "products": products})

@app.route('/<USERid>/products/<product_id>', methods=['GET'])
@require_permissions(["self"], require_all=True)
def reduce_product_quantity(USERid, product_id):
    qty = request.args.get('qty', type=int)
    if qty is None or qty >= 0:
        return jsonify({"status": "error", "message": "Query parameter 'qty' must be a negative integer"}), 400
    users_products = load_users_products()
    if USERid not in users_products:
        return jsonify({"status": "error", "message": f"User {USERid} not found"}), 404
    current_products = users_products[USERid]
    product_to_update = next((p for p in current_products if p["id"] == product_id), None)
    if not product_to_update:
        return jsonify({"status": "error", "message": f"Product {product_id} not found for user {USERid}"}), 404
    current_qty = product_to_update["qty"]
    if current_qty != -1:
        product_to_update["qty"] = max(0, current_qty + qty)
    users_products[USERid] = current_products
    save_users_products(users_products)
    return jsonify({"status": "success", "message": f"Quantity reduced for product {product_id}", "product": product_to_update})

@app.route('/discounted-products', methods=['GET'])
def get_all_discounted_products():
    category_id = request.args.get('category_id')
    if not category_id:
        return jsonify({"status": "error", "message": "Query parameter 'category_id' is required"}), 400
    all_items = []
    config = load_config()
    search_categories = [category_id]
    for cat_id in search_categories:
        if all(config.get("amazon_uk", {}).values()):
            all_items.extend(search_amazon_uk_all(cat_id))
        if all(config.get("ebay_uk", {}).values()):
            all_items.extend(search_ebay_uk_all(cat_id))
        if config.get("awin", {}).get("API_TOKEN"):
            all_items.extend(search_awin_uk_all(cat_id))
        if all(config.get("cj", {}).values()):
            all_items.extend(search_cj_uk_all(cat_id))
        all_items.extend(search_wix_all(cat_id))
    return jsonify({"status": "success", "count": len(all_items), "products": all_items})

@app.route('/referal', methods=['POST'])
def handle_referral():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        users_settings = load_users_settings()
        referer = data.get("referer", "none")
        timestamp = data.get("timestamp")
        if not timestamp:
            return jsonify({"status": "error", "message": "Timestamp is required"}), 400
        if referer not in users_settings:
            users_settings[referer] = {
                "contact_name": "",
                "website_url": "",
                "email_address": "",
                "phone_number": "",
                "wixClientId": "",
                "referrals": {"visits": [], "orders": []}
            }
        elif "referrals" not in users_settings[referer]:
            users_settings[referer]["referrals"] = {"visits": [], "orders": []}
        if "page" in data:
            referral_data = {"page": data["page"], "timestamp": timestamp}
            users_settings[referer]["referrals"]["visits"].append(referral_data)
            print(f"Stored page visit for referer {referer}: {referral_data}")
        elif "orderId" in data:
            referral_data = {"orderId": data["orderId"], "buyer": data["buyer"], "total": data["total"], "timestamp": timestamp}
            users_settings[referer]["referrals"]["orders"].append(referral_data)
            print(f"Stored order for referer {referer}: {referral_data}")
        else:
            return jsonify({"status": "error", "message": "Invalid referral data format"}), 400
        save_users_settings(users_settings)
        return jsonify({"status": "success", "message": "Referral data recorded", "referer": referer, "timestamp": timestamp})
    except Exception as e:
        print(f"Error in referral endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/update-password', methods=['POST'])
@require_permissions(["allauth"], require_all=False)
def update_password():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        email = data.get("email", "").strip()
        new_password = data.get("password", "").strip()
        if not email or not new_password:
            return jsonify({"status": "error", "message": "Email and password are required"}), 400
        users_settings = load_users_settings()
        matching_user_id = None
        for user_id, settings in users_settings.items():
            stored_email = settings.get("email_address", "").strip()
            if stored_email and stored_email.lower() == email.lower():
                matching_user_id = user_id
                break
        if not matching_user_id or matching_user_id != request.user_id:
            return jsonify({"status": "error", "message": f"Unauthorized: Can only update own password"}), 403
        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())
        users_settings[matching_user_id]["password"] = hashed_password.decode('utf-8')
        save_users_settings(users_settings)
        return jsonify({"status": "success", "message": f"Password updated for user with email '{email}'", "user_id": matching_user_id}), 200
    except Exception as e:
        print(f"Error in update-password endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/reset-password', methods=['POST'])
def reset_password():
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        email = data.get("email")
        if not email:
            return jsonify({"status": "error", "message": "Email is required"}), 400
        users_settings = load_users_settings()
        matching_user_id = None
        for user_id, settings in users_settings.items():
            if settings.get("email_address", "").lower() == email.lower():
                matching_user_id = user_id
                break
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Email not found"}), 404
        user = users_settings[matching_user_id]
        phone_number = user.get("phone_number", "").strip()
        if not phone_number:
            return jsonify({"status": "error", "message": "No phone number associated with this account"}), 400
        otp = ''.join(random.choices(string.digits, k=6))
        reset_expiry = datetime.datetime.utcnow() + datetime.timedelta(minutes=15)
        if "reset_codes" not in app.config:
            app.config["reset_codes"] = {}
        app.config["reset_codes"][matching_user_id] = {"code": otp, "expires": reset_expiry.isoformat()}
        config = load_config()
        textmagic_config = config.get("textmagic", {})
        username = textmagic_config.get("USERNAME")
        api_key = textmagic_config.get("API_KEY")
        if not username or not api_key:
            return jsonify({"status": "error", "message": "TextMagic credentials not configured"}), 500
        url = "https://rest.textmagic.com/api/v2/messages"
        payload = {"text": f"clubmadiera.io sent you a one-time password: {otp}. It expires in 15mins.", "phones": phone_number}
        headers = {"X-TM-Username": username, "X-TM-Key": api_key, "Content-Type": "application/x-www-form-urlencoded"}
        response = requests.post(url, data=payload, headers=headers)
        if response.status_code == 201:
            return jsonify({"status": "success", "message": "A one-time password has been sent to your phone"}), 200
        else:
            return jsonify({"status": "error", "message": f"Failed to send SMS: {response.text}"}), 500
    except Exception as e:
        print(f"Error in reset-password endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/verify-reset-code', methods=['POST'])
def verify_reset_code():
    try:
        data = request.get_json(silent=True)
        if not data or not isinstance(data, dict):
            return jsonify({"status": "error", "message": "Invalid or missing JSON data"}), 400
        email = data.get("email")
        code = data.get("code")
        new_password = data.get("new_password")
        if not all([email, code, new_password]):
            return jsonify({"status": "error", "message": "Email, code, and new password are required"}), 400
        users_settings = load_users_settings()
        matching_user_id = None
        for user_id, settings in users_settings.items():
            if settings.get("email_address", "").lower() == email.lower():
                matching_user_id = user_id
                break
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Email not found"}), 404
        stored_reset = app.config.get("reset_codes", {}).get(matching_user_id, {})
        stored_code = stored_reset.get("code")
        if not stored_code:
            return jsonify({"status": "error", "message": "No reset code found for this user"}), 400
        try:
            expiry = datetime.datetime.fromisoformat(stored_reset.get("expires", "2000-01-01T00:00:00"))
        except (ValueError, TypeError) as e:
            print(f"Error parsing expiry: {str(e)}")
            return jsonify({"status": "error", "message": "Invalid reset code expiry format"}), 500
        if stored_code != code or datetime.datetime.utcnow() > expiry:
            return jsonify({"status": "error", "message": "Invalid or expired reset code"}), 400
        hashed_password = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
        users_settings[matching_user_id]["password"] = hashed_password
        save_users_settings(users_settings)
        if matching_user_id in app.config.get("reset_codes", {}):
            del app.config["reset_codes"][matching_user_id]
        return jsonify({"status": "success", "message": "Password updated successfully"}), 200
    except Exception as e:
        print(f"Unexpected error in verify-reset-code endpoint: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/<USERid>/visits', methods=['GET'])
@require_permissions(["self", "admin"], require_all=False)
def get_user_visits(USERid):
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": f"User {USERid} not found"}), 404
        referrals = users_settings[USERid].get("referrals", {})
        visits = referrals.get("visits", [])
        return jsonify({"status": "success", "count": len(visits), "visits": visits})
    except Exception as e:
        print(f"Error in /<USERid>/visits GET: {str(e)}")
        return jsonify({"status": "error", "message": f"Failed to retrieve visits: {str(e)}"}), 500

@app.route('/<USERid>/orders', methods=['GET'])
@require_permissions(["self", "admin"], require_all=False)
def get_user_orders(USERid):
    try:
        users_settings = load_users_settings()
        if USERid not in users_settings:
            return jsonify({"status": "error", "message": f"User {USERid} not found"}), 404
        referrals = users_settings[USERid].get("referrals", {})
        orders = referrals.get("orders", [])
        return jsonify({"status": "success", "count": len(orders), "orders": orders})
    except Exception as e:
        print(f"Error in /<USERid>/orders GET: {str(e)}")
        return jsonify({"status": "error", "message": f"Failed to retrieve orders: {str(e)}"}), 500
# endregion Management Endpoints

# region Logged in Endpoints
@app.route('/admin', methods=['GET'])
@require_permissions(["admin"], require_all=True)
def admin():
    return render_template('admin.html')

@app.route('/community', methods=['GET'])
@require_permissions(["community", "admin"], require_all=False)
def community():
    return render_template('community.html')

@app.route('/merchant', methods=['GET'])
@require_permissions(["merchant", "admin"], require_all=False)
def merchant():
    return render_template('merchant.html')

@app.route('/partner', methods=['GET'])
@require_permissions(["wixpro", "admin"], require_all=False)
def wixpro():
    return render_template('partner.html')

@app.route('/<user_id>/siterequest', methods=['POST'])
@require_permissions(["admin", "merchant", "community"], require_all=False)
def save_site_request_endpoint(user_id):
    try:
        data = request.get_json()
        if not data:
            return jsonify({"status": "error", "message": "No data provided"}), 400
        body_user_id = data.get("userId")
        if body_user_id and body_user_id != user_id:
            return jsonify({"status": "error", "message": "User ID in body does not match URL"}), 400
        if not user_id or request.user_id != user_id:
            return jsonify({"status": "error", "message": "Unauthorized: Must match user_id"}), 403
        request_type = data.get("type", "community")
        site_request = {
            "user_id": user_id,
            "type": request_type,
            "communityName": data.get("communityName") or data.get("storeName") or "",
            "aboutCommunity": data.get("aboutCommunity") or data.get("aboutStore") or "",
            "communityLogos": data.get("communityLogos") or data.get("storeLogos") or [],
            "colorPrefs": data.get("colorPrefs", ""),
            "stylingDetails": data.get("stylingDetails", ""),
            "preferredDomain": data.get("preferredDomain", "mycommunity.org"),
            "emails": data.get("emails", []),
            "pages": data.get("pages", []),
            "widgets": data.get("widgets", []),
            "submitted_at": datetime.datetime.utcnow().isoformat()
        }
        if not site_request["communityName"]:
            return jsonify({"status": "error", "message": "Community name or store name is required"}), 400
        domain_regex = r'^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$'
        if not re.match(domain_regex, site_request["preferredDomain"]):
            return jsonify({"status": "error", "message": "Invalid domain name"}), 400
        for page in site_request["pages"]:
            if "images" in page and page["images"]:
                page["images"] = [img if isinstance(img, str) else "placeholder" for img in page["images"]]
        save_site_request(user_id, site_request)
        return jsonify({"status": "success", "message": "Site request saved successfully"}), 200
    except Exception as e:
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

# ... (Previous code remains unchanged up to the end of the last section) ...

@app.route('/siterequests', methods=['GET'])
@require_permissions(["admin", "wixpro"], require_all=False)
def list_site_requests():
    try:
        siterequest_dir = 'siterequest'
        logger.debug(f"Looking in directory: {os.path.abspath(siterequest_dir)}")
        if not os.path.exists(siterequest_dir):
            logger.debug("Directory does not exist")
            return jsonify({"status": "success", "siterequests": []}), 200
        users_settings = load_users_settings()
        siterequests = []
        files = os.listdir(siterequest_dir)
        logger.debug(f"Found files: {files}")
        for filename in files:
            user_id = filename.replace('.json', '')
            logger.debug(f"Processing user_id: {user_id}")
            site_request = load_site_request(user_id)
            if not site_request:
                logger.debug(f"No data loaded for {user_id}")
                continue
            contact_name = users_settings.get(user_id, {}).get('contact_name', '')
            email = users_settings.get(user_id, {}).get('email_address', '')
            request_type = site_request.get('type', '')
            store_name = site_request.get('storeName')
            community_name = site_request.get('communityName')
            organisation = store_name if store_name else community_name if community_name else ''
            received_at = site_request.get('submitted_at', '')
            siterequests.append({
                'user_id': user_id,
                'type': request_type,
                'received_at': received_at,
                'contact_name': contact_name,
                'email': email,
                'organisation': organisation
            })
            logger.debug(f"Added request for {user_id}")
        logger.debug(f"Total requests found: {len(siterequests)}")
        siterequests.sort(key=lambda x: x['received_at'] or '', reverse=True)
        return jsonify({"status": "success", "siterequests": siterequests}), 200
    except Exception as e:
        logger.error(f"Error in list_site_requests: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error: {str(e)}"}), 500

@app.route('/render-md/<path:full_path>', methods=['GET'])
@require_permissions(["allauth"], require_all=False)
def render_md(full_path):
    """
    Render Markdown files from the static folder or GitHub based on the URL path.
    Returns an HTML response using templates from static/error/<status_code>.md.
    """
    try:
        # Parse the full_path, removing trailing slashes
        segments = full_path.rstrip('/').split('/')
        if not segments or segments == ['']:
            raise ValueError("Invalid path provided")

        # Determine source: static folder or GitHub
        if segments[0] == 'static':
            # Handle static file
            if len(segments) < 2:
                raise ValueError("No file path provided after 'static'")
            file_path = '/'.join(segments[1:])
            if not file_path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            static_file = os.path.join(app.static_folder, file_path)
            if not os.path.isfile(static_file):
                raise FileNotFoundError("File not found in static folder")
            with open(static_file, 'r', encoding='utf-8') as f:
                md_content = f.read()
        else:
            # Handle GitHub file
            if len(segments) < 4:
                raise ValueError("Invalid GitHub path: Must provide owner/repo/branch/path")
            owner, repo, branch, *path_segments = segments
            path = '/'.join(path_segments)
            if not path.endswith('.md'):
                raise ValueError("Only .md files are supported")
            url = f"https://raw.githubusercontent.com/{owner}/{repo}/{branch}/{path}"
            response = requests.get(url)
            if response.status_code != 200:
                raise FileNotFoundError("File not found on GitHub")
            md_content = response.text

        # Convert Markdown to HTML with table support
        html_content = markdown.markdown(md_content, extensions=['tables'])
        status_code = 200

    except ValueError as e:
        # Invalid paths or file types result in 404
        status_code = 404
        error_message = str(e)
    except FileNotFoundError as e:
        # File not found results in 404
        status_code = 404
        error_message = str(e)
    except requests.RequestException as e:
        # Network issues with GitHub result in 500
        status_code = 500
        error_message = "Failed to fetch from GitHub"
    except Exception as e:
        # Unexpected errors result in 500
        status_code = 500
        error_message = "An unexpected error occurred"
        logger.error(f"Error: {e}", exc_info=True)

    # Load the corresponding template
    template_path = os.path.join(app.static_folder, 'error', f'{status_code}.md')
    with open(template_path, 'r', encoding='utf-8') as f:
        template = f.read()

    # Replace the appropriate placeholder
    if status_code == 200:
        final_html = template.replace('{content}', html_content)
    else:
        final_html = template.replace('{error_message}', error_message)

    # Create and return the response
    response = make_response(final_html, status_code)
    response.headers['Content-Type'] = 'text/html'
    return response

@app.route('/check-domain', methods=['GET'])
@require_permissions(["allauth"], require_all=False)  # Custom decorator applied
def check_domain():
    # Get domain from query parameter
    domain = request.args.get('domain')
    
    # Basic validation (matches client-side regex: /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/)
    if not domain:
        return jsonify({"error": "Please provide a domain name"}), 400
    
    if not all(c.isalnum() or c in '-.' for c in domain) or \
       not '.' in domain or \
       len(domain.split('.')[-1]) < 2:
        return jsonify({"error": "Invalid domain name (e.g., mystore.uk)"}), 400
    
    # Query WHOIS data using python-whois
    try:
        w = whois.whois(domain)
        # If no registration data exists (e.g., creation_date is None), domain is available
        is_available = w.creation_date is None
        return jsonify({
            "domain": domain,
            "available": is_available
        }), 200
    except Exception as e:
        # Handle WHOIS query failures (e.g., timeouts, invalid TLDs)
        return jsonify({"error": f"Failed to check domain availability: {str(e)}"}), 500

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)
    
# endregion Logged in Endpoints

# region Public Endpoints
@app.route('/', methods=['GET'])
def home():
    return render_template('login.html')

@app.route('/branding', methods=['GET'])
def branding():
    try:
        root_dir = os.path.dirname(os.path.abspath(__file__))
        json_path = os.path.join(root_dir, 'branding.json')
        with open(json_path, 'r') as f:
            branding_data = json.load(f)
        return jsonify(branding_data)
    except FileNotFoundError:
        return jsonify({'content': '<h1>Branding content not found</h1>'}), 500
    except Exception as e:
        return jsonify({'content': f'Internal Server Error: {str(e)}'}), 500

@app.route('/login', methods=['POST'])
def login():
    """
    Authenticate a user and return a JWT token with their permissions.
    Expects JSON payload with 'email' and 'password'.
    Returns user details, token, and redirect URL based on permissions.
    """
    try:
        # Parse incoming JSON data
        data = request.get_json(silent=True)
        if not data or not isinstance(data, dict):
            return jsonify({"status": "error", "message": "Invalid or missing JSON data"}), 400

        # Extract and validate required fields
        email = data.get("email", "").strip().lower()
        password = data.get("password", "").strip()
        if not email or not password:
            return jsonify({"status": "error", "message": "Email and password are required"}), 400

        # Load user settings
        users_settings = load_users_settings()
        if not users_settings:
            return jsonify({"status": "error", "message": "No users registered in the system"}), 500

        # Find user by email and verify password
        matching_user_id = None
        for user_id, settings in users_settings.items():
            stored_email = settings.get("email_address", "").strip().lower()
            stored_password = settings.get("password", "")
            if stored_email == email:
                # Ensure stored password is bytes for bcrypt
                if isinstance(stored_password, str):
                    stored_password = stored_password.encode('utf-8')
                if bcrypt.checkpw(password.encode('utf-8'), stored_password):
                    matching_user_id = user_id
                    break

        # Check if authentication succeeded
        if not matching_user_id:
            return jsonify({"status": "error", "message": "Invalid email or password"}), 401

        # Get user permissions and details
        user_data = users_settings[matching_user_id]
        permissions = user_data.get("permissions", [])
        contact_name = user_data.get("contact_name", "User")

        # Determine redirect URL based on highest-priority permission
        redirect_url = None
        if "admin" in permissions:
            redirect_url = url_for('admin')
        elif "merchant" in permissions:
            redirect_url = url_for('merchant')
        elif "community" in permissions:
            redirect_url = url_for('community')
        elif "wixpro" in permissions:
            redirect_url = url_for('wixpro')

        # Generate JWT token
        token_payload = {
            "userId": matching_user_id,
            "permissions": permissions,
            "exp": datetime.datetime.utcnow() + datetime.timedelta(hours=1),  # Token expires in 1 hour
            "iat": datetime.datetime.utcnow()  # Issued at time
        }
        token = jwt.encode(token_payload, app.config['JWT_SECRET_KEY'], algorithm="HS256")

        # Prepare response
        response_data = {
            "status": "success",
            "message": "Login successful",
            "token": token,
            "userId": matching_user_id,
            "contact_name": contact_name
        }
        if redirect_url:
            response_data["redirect_url"] = redirect_url

        return jsonify(response_data), 200

    except Exception as e:
        # Log the error for debugging (assuming logging is set up)
        logger.error(f"Login error: {str(e)}")
        return jsonify({"status": "error", "message": f"Server error during login: {str(e)}"}), 500

@app.route('/signup', methods=['GET'])
def signup_page():
    return render_template('signup.html')

@app.route('/signup', methods=['POST'])
def signup():
    data = request.get_json()
    required_fields = ['signup_type', 'contact_name', 'signup_email', 'signup_password']
    if not all(field in data for field in required_fields):
        return jsonify({"status": "error", "message": "All fields are required"}), 400
    users_settings = load_users_settings()
    if any(user['email_address'] == data['signup_email'] for user in users_settings.values()):
        return jsonify({"status": "error", "message": "Email already exists"}), 400
    while True:
        USERid = generate_code()
        if USERid not in users_settings:
            break
    hashed_password = bcrypt.hashpw(data['signup_password'].encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
    users_settings[USERid] = {
        "email_address": data['signup_email'],
        "password": hashed_password,
        "contact_name": data['contact_name'],
        "permissions": [data['signup_type']],
        "user_categories": [data['signup_type']],
        "website_url": "",
        "wixClientId": "",
        "referrals": {"visits": [], "orders": []}
    }
    save_users_settings(users_settings)
    return jsonify({"status": "success", "message": "Signup successful"}), 201
# endregion Public Endpoints

# region Velocify Public Endpoints
@app.route('/<USERid>/discounted-products', methods=['GET'])
def get_user_discounted_products(USERid):
    category_id = request.args.get('category_id')
    min_discount = request.args.get('min_discount', default=20, type=int)
    root_category_ids = get_user_categories(USERid)
    all_discounted_items = []
    config = load_config()
    search_categories = [category_id] if category_id else root_category_ids
    for cat_id in search_categories:
        if all(config.get("amazon_uk", {}).values()):
            all_discounted_items.extend(search_amazon_uk_discounted(cat_id, min_discount))
        if all(config.get("ebay_uk", {}).values()):
            all_discounted_items.extend(search_ebay_uk_discounted(cat_id, min_discount))
        if config.get("awin", {}).get("API_TOKEN"):
            all_discounted_items.extend(search_awin_uk_discounted(cat_id, min_discount))
        if all(config.get("cj", {}).values()):
            all_discounted_items.extend(search_cj_uk_discounted(cat_id, min_discount))
        all_discounted_items.extend(search_wix_discounted(cat_id, min_discount))
    return jsonify({"status": "success", "count": len(all_discounted_items), "products": all_discounted_items, "min_discount": min_discount})

@app.route('/<USERid>/categories', methods=['GET'])
def get_categories(USERid):
    parent_id = request.args.get('parent_id')
    min_discount = request.args.get('min_discount', default=20, type=int)
    all_categories = []
    root_category_ids = get_user_categories(USERid)
    try:
        if parent_id:
            subcategories = get_immediate_subcategories(parent_id)
            if subcategories:
                subcategory_ids = [cat["id"] for cat in subcategories]
                all_categories = filter_categories_with_products(subcategory_ids, min_discount)
        else:
            all_categories = filter_categories_with_products(root_category_ids, min_discount)
        return jsonify({"status": "success", "count": len(all_categories), "categories": all_categories, "min_discount": min_discount}) if all_categories else \
               jsonify({"status": "success", "count": 0, "categories": [], "message": f"No categories with products at {min_discount}% discount found."})
    except Exception as e:
        return jsonify({"status": "error", "message": f"Error fetching categories: {str(e)}"}), 500
# endregion Velocify Public Endpoints

if __name__ == '__main__':
    app.run(debug=True, host='0.0.0.0', port=5000)

old/merchant copy.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Merchant</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <script src="https://cdn.tiny.cloud/1/ml1wlwr128qsm8hn8d86e5mhs3y2fuvjr9ztknrsh23x6krp/tinymce/5/tinymce.min.js" referrerpolicy="origin"></script>
    <style>
        body { 
            font-family: Arial, sans-serif; 
            margin: 0; 
            padding: 0; 
            display: flex; 
            flex-direction: column; /* Stack children vertically */
            min-height: 100vh; /* Ensure body takes full height */
        }
        .header { 
            height: 150px; 
            width: 100%; /* Full width */
            background-color: #f4f4f4; 
            margin-bottom: 25px; 
            overflow: hidden; 
            flex-shrink: 0; /* Prevent header from shrinking */
        }
        .header-content { 
            max-width: 1200px; 
            margin: 0 auto; 
            padding: 20px; 
        }
        .main-container { 
            max-width: 1200px; 
            margin: 0 auto; 
            display: flex; 
            flex-direction: row; /* Menu and content side by side */
            gap: 20px; 
            padding: 20px; 
            flex-grow: 1; /* Allow main content to take remaining space */
        }
        .menu-container { 
            flex: 1; 
            max-width: 300px; 
        }
        .content-container { 
            flex: 2; 
        }
        .menu { 
            margin-bottom: 20px; 
            text-align: left; 
        }
        .menu button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            font-size: 14px; 
            text-align: left; 
            width: 100%; 
            margin-bottom: 5px; 
            display: block; 
        }
        .menu button:hover { 
            background-color: #0056b3; 
        }
        .menu .btn-logoff { 
            background-color: #dc3545; 
        }
        .menu .btn-logoff:hover { 
            background-color: #c82333; 
        }
        .section { 
            display: none; 
        }
        .section.active { 
            display: block; 
        }
        .settings-form { 
            display: flex; 
            flex-direction: column; 
            gap: 10px; 
            max-width: 400px; 
        }
        .settings-form label { 
            font-weight: bold; 
        }
        .settings-form input, .settings-form textarea { 
            padding: 5px; 
            width: 100%; 
            box-sizing: border-box; 
        }
        .settings-form button { 
            padding: 10px; 
            background-color: #007BFF; 
            color: white; 
            border: none; 
            cursor: pointer; 
        }
        .settings-form button:hover { 
            background-color: #0056b3; 
        }
        table { 
            width: 100%; 
            border-collapse: collapse; 
        }
        th, td { 
            border: 1px solid #ddd; 
            padding: 8px; 
            text-align: left; 
        }
        .hidden { 
            display: none; 
        }
        #toast-container > .toast-error { 
            background-color: #dc3545; 
            border-color: #c82333; 
        }
        #toast-container > .toast-success { 
            background-color: #28a745; 
            border-color: #218838; 
        }
        .password-container { 
            position: relative; 
            display: flex; 
            justify-content: flex-end; 
            align-items: center; 
            margin-bottom: 10px; 
        }
        .password-container input { 
            width: 50%; 
            padding-right: 30px; 
        }
        .password-toggle { 
            position: absolute; 
            right: 5px; 
            top: 50%; 
            transform: translateY(-50%); 
            cursor: pointer; 
        }
        #my-store .settings-form { 
            max-width: 600px; 
        }
        .page-section, .email-section { 
            margin-top: 10px; 
            padding: 10px; 
            border: 1px solid #ddd; 
            border-radius: 4px; 
        }
        .remove-page-btn, .remove-email-btn { 
            padding: 5px 10px; 
            background-color: #dc3545; 
            color: white; 
            border: none; 
            border-radius: 4px; 
            cursor: pointer; 
            margin-top: 10px; 
        }
        .remove-page-btn:hover, .remove-email-btn:hover { 
            background-color: #c82333; 
        }
        .widget-checkboxes div { 
            margin-bottom: 10px; 
        }
        #my-store .email-section input[type="text"] { 
            width: 50%; 
        }
        #my-store .widget-checkboxes input[type="checkbox"] { 
            width: 10px; 
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu" id="menu">
                <input type="text" id="userId" style="display: none;">
                <button data-section="my-products">My Products</button>
                <button data-section="my-store">My Store</button>
                <button data-section="wix-keys">Wix Keys</button>
                <button data-section="my-account">My Account</button>
                <button data-href="/admin" class="btn-logoff">Back to Admin</button>
                <button id="logOffBtn" class="btn-logoff">Log Off</button>
            </div>
        </div>
        <div class="content-container">
            <div id="info" class="section">
                <h2>Welcome to Your Merchant Dashboard</h2>
                <p>This dashboard allows you to link the parts on your Wix site to a network of community groups, who show relevant discounted products on their websites from clubmadeira.io.</p>
            </div>
            <div id="my-account" class="section">
                <h2>My Account</h2>
                <div class="settings-form">
                    <label for="contactName">Contact Name:</label>
                    <input type="text" id="contactName" placeholder="Enter contact name">
                    <label for="websiteUrl">Website URL:</label>
                    <input type="url" id="websiteUrl" placeholder="Enter website URL">
                    <label for="emailAddress">Email Address:</label>
                    <input type="email" id="emailAddress" placeholder="Enter email address">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="tel" id="phoneNumber" placeholder="Enter phone number">
                    <button data-action="saveSettings">Save Settings</button>
                    <h3>Change Password</h3>
                    <div class="password-container">
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" id="currentPassword" placeholder="Enter current password">
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('currentPassword')"></i>
                    </div>
                    <div class="password-container">
                        <label for="newPassword">New Password:</label>
                        <input type="password" id="newPassword" placeholder="Enter new password">
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('newPassword')"></i>
                    </div>
                    <div class="password-container">
                        <label for="confirmPassword">Confirm New Password:</label>
                        <input type="password" id="confirmPassword" placeholder="Confirm new password">
                        <i class="fas fa-eye password-toggle" onclick="togglePassword('confirmPassword')"></i>
                    </div>
                    <button data-action="savePassword">Change Password</button>
                </div>
            </div>
            <div id="my-products" class="section">
                <h2>My Products</h2>
                <p>These are the products from your parts feed.</p>
                <table id="productTable">
                    <thead>
                        <tr><th class="hidden">ID</th><th>Category</th><th>Title</th><th>URL</th><th>Price</th><th>Original</th><th>Image</th><th>QTY</th></tr>
                    </thead>
                    <tbody id="productList"></tbody>
                </table>
            </div>
            <div id="wix-keys" class="section">
                <h2>Wix Keys</h2>
                <p>Your Wix Client ID is used to integrate your merchant account with Wix services. Ensure it matches the key provided in your Wix developer dashboard.</p>
                <div class="settings-form">
                    <label for="wixClientId">Wix Client ID:</label>
                    <input type="text" id="wixClientId" placeholder="Enter Wix Client ID">
                    <button data-action="saveWixClientId">Save Wix Client ID</button>
                </div>
            </div>
            <div id="my-store" class="section">
                <h2>My Store</h2>
                <p>Request a custom Wix store to sell your products online. Provide details below to set up your store (minimum: Home and Returns Policy pages).</p>
                <form id="storeRequestForm" class="settings-form">
                    <label for="storeName">Store Name:</label>
                    <input type="text" id="storeName" name="storeName" placeholder="Enter your store name" required>

                    <label for="aboutStore">About Your Store:</label>
                    <textarea id="aboutStore" name="aboutStore" placeholder="Describe your store (e.g., product focus, target audience)"></textarea>

                    <label for="storeLogos">Store Logos:</label>
                    <input type="file" id="storeLogos" name="storeLogos" accept="image/*" multiple>
                    <small>Upload up to 5 logos (e.g., main logo, favicon).</small>

                    <label for="colorPrefs">Color Preferences:</label>
                    <input type="text" id="colorPrefs" name="colorPrefs" placeholder="e.g., #FF5733, Blue">

                    <label for="stylingDetails">Styling Details:</label>
                    <textarea id="stylingDetails" name="stylingDetails" rows="4" placeholder="e.g., sleek design, minimalistic"></textarea>

                    <label for="preferredDomain">Preferred Domain Name:</label>
                    <input type="text" id="preferredDomain" name="preferredDomain" placeholder="e.g., mystore.uk" oninput="updateDomainPreview()">
                    <button type="button" data-action="checkDomainAvailability">Check Availability</button>
                    <span id="domainPreview">@mystore.uk</span>

                    <label>Email Addresses to Set Up (up to 5):</label>
                    <div id="emailsContainer">
                        <div class="email-section" data-email="1">
                            <label for="email1Name">Email Name:</label>
                            <input type="text" id="email1Name" name="email1Name" placeholder="e.g., info">
                            <span id="email1Domain">@mystore.uk</span>
                        </div>
                    </div>
                    <button type="button" data-action="addEmail">Add Another Email</button>

                    <label>Required Pages:</label>
                    <div id="pagesContainer">
                        <div class="page-section" data-page="1">
                            <label for="page1Name">Page Name:</label>
                            <input type="text" id="page1Name" name="page1Name" value="Home" readonly>
                            <br><br>
                            <label for="page1Content">Home Page Content:</label>
                            <textarea id="page1Content" name="page1Content" placeholder="Describe your home page (e.g., welcome message, featured products)"></textarea>
                            <label for="page1Images">Additional Images:</label>
                            <input type="file" id="page1Images" name="page1Images" accept="image/*" multiple>
                        </div>
                        <div class="page-section" data-page="2">
                            <label for="page2Name">Page Name:</label>
                            <input type="text" id="page2Name" name="page2Name" value="Returns Policy" readonly>
                            <br><br>
                            <label for="page2Content">Returns Policy Content:</label>
                            <textarea id="page2Content" name="page2Content" placeholder="Outline your returns policy"></textarea>
                            <label for="page2Images">Additional Images:</label>
                            <input type="file" id="page2Images" name="page2Images" accept="image/*" multiple>
                        </div>
                    </div>
                    <button type="button" data-action="addPage">Add Another Page</button>

                    <label>Wix Store Widgets:</label>
                    <div class="widget-checkboxes">
                        <div><label><input type="checkbox" name="widgets" value="productCatalog"> Product Catalog</label> - Display your products.</div>
                        <div><label><input type="checkbox" name="widgets" value="checkout"> Checkout</label> - Enable direct purchases.</div>
                        <div><label><input type="checkbox" name="widgets" value="cart"> Shopping Cart</label> - Add a cart for customers.</div>
                        <div><label><input type="checkbox" name="widgets" value="promotions"> Promotions</label> - Highlight sales and discounts.</div>
                        <div><label><input type="checkbox" name="widgets" value="contactForm"> Contact Form</label> - Customer inquiries.</div>
                    </div>

                    <button type="button" data-action="saveStoreRequest">Submit Request</button>
                </form>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script>
        const apiUrl = 'https://clubmadeira.io';
        let userPermissions = [];
        let pageCount = 2; // Start with Home and Returns Policy
        let emailCount = 1; // Start with one email

        function decodeJWT(token) {
            if (!token || typeof token !== 'string') {
                console.error('Invalid token');
                return null;
            }
            if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
                console.error('Invalid token format');
                return null;
            }
            const parts = token.split('.');
            try {
                const base64Url = parts[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                console.error('Error decoding JWT:', error.message);
                return null;
            }
        }

        function initializeMerchant() {
            console.log('Initializing merchant page');
            const token = localStorage.getItem('authToken');
            const userId = localStorage.getItem('userId');
            if (!token) {
                console.error('No token found, redirecting to /');
                window.location.href = '/';
                return;
            }
            const decoded = decodeJWT(token);
            if (!decoded) {
                console.error('Invalid token, redirecting to /');
                window.location.href = '/';
                return;
            }
            userPermissions = decoded.permissions || [];
            if (!userPermissions.includes('merchant') && !userPermissions.includes('admin')) {
                toastr.error('Permission denied: Merchant or Admin permission required');
                window.location.href = '/';
                return;
            }
            if (userId) document.getElementById('userId').value = userId;
            checkAdminPermission();
            loadBranding();
            showSection('info');
            attachEventListeners();
            waitForTinyMCE(initializeTinyMCE);
        }

        toastr.options = { closeButton: true, progressBar: true, positionClass: 'toast-top-right', timeOut: 5000, showMethod: 'slideDown', hideMethod: 'slideUp' };

        async function fetchProtectedPage(url) {
            const token = localStorage.getItem('authToken');
            if (!token) {
                toastr.error('No authentication token found. Please log in.');
                window.location.href = '/';
                return;
            }
            try {
                const response = await fetch(`${apiUrl}${url}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'text/html'
                    }
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server returned ${response.status}: ${errorText}`);
                }
                const html = await response.text();
                document.body.innerHTML = html;

                const parser = new DOMParser();
                const doc = parser.parseFromString(html, 'text/html');
                const scripts = doc.querySelectorAll('script[src]');
                const scriptPromises = [];

                for (const script of scripts) {
                    const newScript = document.createElement('script');
                    newScript.src = script.src;
                    newScript.async = false;
                    document.head.appendChild(newScript);
                    scriptPromises.push(new Promise(resolve => {
                        newScript.onload = resolve;
                        newScript.onerror = () => {
                            console.error(`Failed to load script: ${script.src}`);
                            resolve();
                        };
                    }));
                }

                await Promise.all(scriptPromises);

                doc.querySelectorAll('script:not([src])').forEach(script => {
                    if (script.innerHTML.trim()) {
                        try {
                            const scriptFn = new Function(script.innerHTML);
                            scriptFn();
                        } catch (e) {
                            console.error('Error executing inline script:', e);
                        }
                    }
                });

                attachEventListeners();
                waitForTinyMCE(initializeTinyMCE);
            } catch (error) {
                toastr.error(error.message || 'Failed to load protected page');
                window.location.href = '/';
            }
        }

        function waitForTinyMCE(callback) {
            if (typeof tinymce !== 'undefined' && tinymce.init) {
                console.log('TinyMCE is loaded, executing callback');
                callback();
            } else {
                console.log('Waiting for TinyMCE to load...');
                const script = document.querySelector('script[src*="tinymce.min.js"]');
                if (script) {
                    script.onload = () => {
                        console.log('TinyMCE script loaded');
                        callback();
                    };
                    script.onerror = () => console.error('TinyMCE failed to load');
                } else {
                    setTimeout(() => waitForTinyMCE(callback), 100);
                }
            }
        }

        function initializeTinyMCE() {
            console.log('Initializing TinyMCE');
            tinymce.remove();
            tinymce.init({
                selector: '#aboutStore, textarea[name$="Content"]',
                height: 200,
                menubar: false,
                plugins: 'lists',
                toolbar: 'bold italic | bullist numlist',
                setup: editor => {
                    editor.on('init', () => console.log('TinyMCE editor initialized'));
                }
            });
        }

        function attachEventListeners() {
            console.log('Attaching event listeners');
            const existingListeners = document.__eventListeners || new Map();
            document.__eventListeners = existingListeners;

            document.querySelectorAll('.menu button[data-section]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const section = button.getAttribute('data-section');
                        console.log(`Section button clicked: ${section}`);
                        showSection(section);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.menu button[data-href]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', async () => {
                        const href = button.getAttribute('data-href');
                        console.log(`Fetching protected page: ${href}`);
                        await fetchProtectedPage(href);
                    });
                    existingListeners.set(button, true);
                }
            });

            document.querySelectorAll('.settings-form button[data-action]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const action = button.getAttribute('data-action');
                        console.log(`Action button clicked: ${action}`);
                        if (action === 'saveSettings') saveSettings();
                        else if (action === 'savePassword') savePassword();
                        else if (action === 'saveWixClientId') saveWixClientId();
                        else if (action === 'saveStoreRequest') saveStoreRequest();
                        else if (action === 'addPage') addPage();
                        else if (action === 'addEmail') addEmail();
                        else if (action === 'checkDomainAvailability') checkDomainAvailability();
                    });
                    existingListeners.set(button, true);
                }
            });

            const logOffBtn = document.getElementById('logOffBtn');
            if (logOffBtn && !existingListeners.has(logOffBtn)) {
                logOffBtn.addEventListener('click', logOff);
                existingListeners.set(logOffBtn, true);
            }
        }

        function checkAdminPermission() {
            const backButton = document.querySelector('button[data-href="/admin"]');
            if (backButton) {
                backButton.style.display = userPermissions.includes('admin') ? 'block' : 'none';
            }
        }

        async function loadBranding() {
            try {
                const response = await authenticatedFetch(`${apiUrl}/branding`);
                if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                const data = await response.json();
                const brandingContent = document.getElementById('brandingContent');
                if (brandingContent) {
                    brandingContent.innerHTML = data.content || '<h1>Merchant Dashboard</h1>';
                }
            } catch (error) {
                toastr.error(`Error loading branding: ${error.message}`);
                const brandingContent = document.getElementById('brandingContent');
                if (brandingContent) {
                    brandingContent.innerHTML = '<h1>Merchant Dashboard</h1>';
                }
            }
        }

        async function authenticatedFetch(url, options = {}) {
            const token = localStorage.getItem('authToken');
            options.headers = { ...options.headers, 'Authorization': `Bearer ${token}`, 'Content-Type': options.body instanceof FormData ? undefined : 'application/json' };
            const response = await fetch(url, options);
            if (response.status === 401) {
                toastr.error('Session expired. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                window.location.href = '/';
            }
            return response;
        }

        function showSection(section) {
            console.log(`Showing section: ${section}`);
            document.querySelectorAll('.section').forEach(s => {
                s.classList.remove('active');
                s.style.display = 'none';
            });
            const activeSection = document.getElementById(section);
            if (activeSection) {
                activeSection.classList.add('active');
                activeSection.style.display = 'block';
            }
            if (section === 'my-account') loadSettings();
            else if (section === 'my-products') loadProducts();
            else if (section === 'wix-keys') loadWixClientId();
            else if (section === 'my-store') loadStoreRequest();
            else if (section === 'info') return;
        }

        function logOff() {
            if (confirm('Are you sure you want to log off?')) {
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                toastr.success('Logged off successfully');
                setTimeout(() => window.location.href = '/', 1000);
            }
        }

        async function loadSettings() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch settings: ${response.status}`);
                const data = await response.json();
                document.getElementById('contactName').value = data.contact_name || '';
                document.getElementById('websiteUrl').value = data.website_url || '';
                document.getElementById('emailAddress').value = data.email_address || '';
                document.getElementById('phoneNumber').value = data.phone_number || '';
            } catch (error) {
                toastr.error(`Error loading settings: ${error.message}`);
            }
        }

        async function saveSettings() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            const settings = {
                contact_name: document.getElementById('contactName').value.trim(),
                website_url: document.getElementById('websiteUrl').value.trim(),
                email_address: document.getElementById('emailAddress').value.trim(),
                phone_number: document.getElementById('phoneNumber').value.trim()
            };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`, { method: 'PATCH', body: JSON.stringify(settings) });
                if (!response.ok) throw new Error(`Failed to save settings: ${response.status}`);
                toastr.success('Settings saved successfully');
            } catch (error) {
                toastr.error(`Error saving settings: ${error.message}`);
            }
        }

        function togglePassword(fieldId) {
            const input = document.getElementById(fieldId);
            const icon = input.nextElementSibling;
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        async function savePassword() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            const passwordRegex = /^(?=.*\d).{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                toastr.error('New password must be at least 8 characters long and include numbers');
                return;
            }
            if (newPassword !== confirmPassword) {
                toastr.error('New password and confirmation do not match');
                return;
            }

            const passwordData = { currentPassword, newPassword };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/password`, {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });
                if (!response.ok) throw new Error(`Failed to change password: ${response.status}`);
                toastr.success('Password changed successfully');
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
            } catch (error) {
                toastr.error(`Error changing password: ${error.message}`);
            }
        }

        async function loadProducts() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/products`);
                if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
                const data = await response.json();
                const tbody = document.getElementById('productList');
                if (tbody) {
                    tbody.innerHTML = '';
                    data.products.forEach(product => tbody.appendChild(createProductRow(product)));
                }
            } catch (error) {
                toastr.error(`Error loading products: ${error.message}`);
            }
        }

        function createProductRow(product) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td class="hidden">${product.id}</td>
                <td>${product.category || 'N/A'}</td>
                <td>${product.title}</td>
                <td><a href="${product.product_url}" target="_blank">Link</a></td>
                <td>${product.current_price}</td>
                <td>${product.original_price}</td>
                <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                <td>${product.qty || 'N/A'}</td>
            `;
            return tr;
        }

        async function loadWixClientId() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch Wix Client ID: ${response.status}`);
                const data = await response.json();
                document.getElementById('wixClientId').value = data.wixClientId || '';
            } catch (error) {
                toastr.error(`Error loading Wix Client ID: ${error.message}`);
            }
        }

        async function saveWixClientId() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            const wixClientId = document.getElementById('wixClientId').value.trim();
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/user`, {
                    method: 'PATCH',
                    body: JSON.stringify({ wixClientId })
                });
                if (!response.ok) throw new Error(`Failed to save Wix Client ID: ${response.status}`);
                toastr.success('Wix Client ID saved successfully');
            } catch (error) {
                toastr.error(`Error saving Wix Client ID: ${error.message}`);
            }
        }

        async function loadStoreRequest() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`);
                if (!response.ok) throw new Error(`Failed to fetch store request: ${response.status}`);
                const data = await response.json();
                const storeRequest = data.site_request || {};

                document.getElementById('storeName').value = storeRequest.storeName || '';
                tinymce.get('aboutStore')?.setContent(storeRequest.aboutStore || '');
                document.getElementById('colorPrefs').value = storeRequest.colorPrefs || '';
                document.getElementById('stylingDetails').value = storeRequest.stylingDetails || '';
                document.getElementById('preferredDomain').value = storeRequest.preferredDomain || 'mystore.uk';

                const emails = storeRequest.emails || ['info'];
                emailCount = 0;
                const emailsContainer = document.getElementById('emailsContainer');
                emailsContainer.innerHTML = '';
                emails.forEach((email, index) => {
                    emailCount++;
                    const emailDiv = document.createElement('div');
                    emailDiv.className = 'email-section';
                    emailDiv.dataset.email = emailCount;
                    emailDiv.innerHTML = `
                        <label for="email${emailCount}Name">Email Name:</label>
                        <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" value="${email}">
                        <span id="email${emailCount}Domain">@${storeRequest.preferredDomain || 'mystore.uk'}</span>
                        ${emailCount > 1 ? `<button type="button" class="remove-email-btn" onclick="removeEmail(${emailCount})">Remove Email</button>` : ''}
                    `;
                    emailsContainer.appendChild(emailDiv);
                });

                const pages = storeRequest.pages && storeRequest.pages.length >= 2 ? storeRequest.pages : [
                    { name: 'Home', content: '' },
                    { name: 'Returns Policy', content: '' }
                ];
                pageCount = 0;
                const pagesContainer = document.getElementById('pagesContainer');
                pagesContainer.innerHTML = '';
                pages.forEach((page, index) => {
                    pageCount++;
                    const pageDiv = document.createElement('div');
                    pageDiv.className = 'page-section';
                    pageDiv.dataset.page = pageCount;
                    pageDiv.innerHTML = `
                        <label for="page${pageCount}Name">Page Name:</label>
                        <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" value="${page.name || ''}" ${pageCount <= 2 ? 'readonly' : ''}>
                        <br><br>
                        <label for="page${pageCount}Content">${pageCount === 1 ? 'Home Page' : pageCount === 2 ? 'Returns Policy' : 'Page'} Content:</label>
                        <textarea id="page${pageCount}Content" name="page${pageCount}Content">${page.content || ''}</textarea>
                        <label for="page${pageCount}Images">Additional Images:</label>
                        <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                        ${pageCount > 2 ? `<button type="button" class="remove-page-btn" onclick="removePage(${pageCount})">Remove Page</button>` : ''}
                    `;
                    pagesContainer.appendChild(pageDiv);
                });

                const widgets = storeRequest.widgets || [];
                document.querySelectorAll('input[name="widgets"]').forEach(checkbox => {
                    checkbox.checked = widgets.includes(checkbox.value);
                });

                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
                updateDomainPreview();
            } catch (error) {
                toastr.error(`Error loading store request: ${error.message}`);
            }
        }

        async function saveStoreRequest() {
            const userId = document.getElementById('userId').value;
            if (!userId) { toastr.error('User ID not found in session'); return; }

            const storeRequest = {
                userId: userId,
                type: "merchant",
                storeName: document.getElementById('storeName').value.trim(),
                aboutStore: tinymce.get('aboutStore')?.getContent() || '',
                storeLogos: [],
                colorPrefs: document.getElementById('colorPrefs').value.trim(),
                stylingDetails: document.getElementById('stylingDetails').value.trim(),
                preferredDomain: document.getElementById('preferredDomain').value.trim() || 'mystore.uk',
                emails: [],
                pages: [],
                widgets: Array.from(document.querySelectorAll('input[name="widgets"]:checked')).map(cb => cb.value)
            };

            if (!storeRequest.storeName) {
                toastr.error('Store name is required');
                return;
            }

            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domainRegex.test(storeRequest.preferredDomain)) {
                toastr.error('Invalid domain name (e.g., mystore.uk)');
                return;
            }

            const logoFiles = document.getElementById('storeLogos').files;
            if (logoFiles.length > 5) {
                toastr.error('Maximum of 5 logos allowed');
                return;
            }
            for (let i = 0; i < logoFiles.length; i++) {
                const reader = new FileReader();
                await new Promise(resolve => {
                    reader.onload = () => {
                        storeRequest.storeLogos.push(reader.result);
                        resolve();
                    };
                    reader.readAsDataURL(logoFiles[i]);
                });
            }

            for (let i = 1; i <= emailCount; i++) {
                const emailInput = document.getElementById(`email${i}Name`);
                if (emailInput && emailInput.value.trim()) {
                    storeRequest.emails.push(emailInput.value.trim());
                }
            }

            for (let i = 1; i <= pageCount; i++) {
                const nameInput = document.getElementById(`page${i}Name`);
                const contentEditor = tinymce.get(`page${i}Content`);
                const imagesInput = document.getElementById(`page${i}Images`);
                if (nameInput && nameInput.value.trim()) {
                    const page = {
                        name: nameInput.value.trim(),
                        content: contentEditor ? contentEditor.getContent() : '',
                        images: []
                    };
                    if (imagesInput && imagesInput.files.length > 0) {
                        for (let j = 0; j < imagesInput.files.length; j++) {
                            const reader = new FileReader();
                            await new Promise(resolve => {
                                reader.onload = () => {
                                    page.images.push(reader.result);
                                    resolve();
                                };
                                reader.readAsDataURL(imagesInput.files[j]);
                            });
                        }
                    }
                    storeRequest.pages.push(page);
                }
            }

            if (storeRequest.pages.length < 2 || !storeRequest.pages.some(p => p.name === 'Home') || !storeRequest.pages.some(p => p.name === 'Returns Policy')) {
                toastr.error('Home and Returns Policy pages are required');
                return;
            }

            try {
                const response = await authenticatedFetch(`${apiUrl}/${userId}/siterequest`, {
                    method: 'POST',
                    body: JSON.stringify(storeRequest)
                });
                if (!response.ok) throw new Error(`Failed to save store request: ${response.status}`);
                toastr.success('Store request saved successfully');
            } catch (error) {
                toastr.error(`Error saving store request: ${error.message}`);
            }
        }

        function addPage() {
            if (pageCount >= 5) {
                toastr.error('Maximum of 5 pages allowed');
                return;
            }
            pageCount++;
            const container = document.getElementById('pagesContainer');
            const newPage = document.createElement('div');
            newPage.className = 'page-section';
            newPage.dataset.page = pageCount;
            newPage.innerHTML = `
                <label for="page${pageCount}Name">Page Name:</label>
                <input type="text" id="page${pageCount}Name" name="page${pageCount}Name" placeholder="e.g., Products">
                <br><br>
                <label for="page${pageCount}Content">Page Content:</label>
                <textarea id="page${pageCount}Content" name="page${pageCount}Content" placeholder="Describe this page"></textarea>
                <label for="page${pageCount}Images">Additional Images:</label>
                <input type="file" id="page${pageCount}Images" name="page${pageCount}Images" accept="image/*" multiple>
                <button type="button" class="remove-page-btn" onclick="removePage(${pageCount})">Remove Page</button>
            `;
            container.appendChild(newPage);
            tinymce.remove();
            waitForTinyMCE(initializeTinyMCE);
        }

        function removePage(pageNum) {
            if (pageCount <= 2) {
                toastr.error('Cannot remove Home or Returns Policy pages');
                return;
            }
            const pageSection = document.querySelector(`.page-section[data-page="${pageNum}"]`);
            if (pageSection) {
                pageSection.remove();
                pageCount--;
                tinymce.remove();
                waitForTinyMCE(initializeTinyMCE);
            }
        }

        function addEmail() {
            if (emailCount >= 5) {
                toastr.error('Maximum of 5 email addresses allowed');
                return;
            }
            emailCount++;
            const container = document.getElementById('emailsContainer');
            const domain = document.getElementById('preferredDomain').value || 'mystore.uk';
            const newEmail = document.createElement('div');
            newEmail.className = 'email-section';
            newEmail.dataset.email = emailCount;
            newEmail.innerHTML = `
                <label for="email${emailCount}Name">Email Name:</label>
                <input type="text" id="email${emailCount}Name" name="email${emailCount}Name" placeholder="e.g., contact">
                <span id="email${emailCount}Domain">@${domain}</span>
                <button type="button" class="remove-email-btn" onclick="removeEmail(${emailCount})">Remove Email</button>
            `;
            container.appendChild(newEmail);
            updateDomainPreview();
        }

        function removeEmail(emailNum) {
            if (emailCount <= 1) {
                toastr.error('Cannot remove the last email');
                return;
            }
            const emailSection = document.querySelector(`.email-section[data-email="${emailNum}"]`);
            if (emailSection) {
                emailSection.remove();
                emailCount--;
                updateDomainPreview();
            }
        }

        function updateDomainPreview() {
            const domain = document.getElementById('preferredDomain').value || 'mystore.uk';
            document.getElementById('domainPreview').textContent = `@${domain}`;
            for (let i = 1; i <= emailCount; i++) {
                const domainSpan = document.getElementById(`email${i}Domain`);
                if (domainSpan) domainSpan.textContent = `@${domain}`;
            }
        }

        function checkDomainAvailability() {
            const domain = document.getElementById('preferredDomain').value;
            const domainRegex = /^[a-zA-Z0-9-]+\.[a-zA-Z]{2,}$/;
            if (!domain) {
                toastr.error('Please enter a preferred domain name');
                return;
            }
            if (!domainRegex.test(domain)) {
                toastr.error('Invalid domain name (e.g., mystore.uk)');
                return;
            }
            toastr.info(`Checking availability for ${domain}...`);
            setTimeout(() => toastr.success('This is a placeholder - domain check not implemented'), 1000);
        }

        initializeMerchant();
    </script>
</body>
</html>

old/partner.old.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>clubmadeira.io | Partner</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.css">
    <style>
        /* Existing styles remain unchanged */
        body { font-family: Arial, sans-serif; margin: 0; padding: 20px; display: flex; flex-direction: column; min-height: 100vh; }
        .header { width: 100%; background-color: #007BFF; margin-bottom: 25px; flex-shrink: 0; display: block; }
        .header-content { max-width: 1200px; margin: 0 auto; padding: 20px; color: white; display: flex; align-items: center; gap: 20px; }
        .header-content img { border-radius: 50%; width: 50px; height: 50px; }
        .header-content h1 { margin: 0; font-size: 24px; }
        .header-content p { margin: 5px 0 0; font-size: 16px; }
        .main-container { max-width: 1200px; width: 1200px; margin: 0 auto; display: flex; flex-direction: row; gap: 20px; flex-grow: 1; }
        .menu-container { width: 300px; display: flex; flex-direction: column; align-items: flex-start; }
        .content-container { width: calc(1200px - 320px); padding: 20px; }
        .menu { width: 100%; margin-bottom: 20px; text-align: left; display: flex; flex-direction: column; align-items: flex-start; }
        .menu button { padding: 12px; background-color: #007BFF; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 14px; text-align: left; width: 100%; margin-bottom: 2px; display: block; }
        .menu button:hover { background-color: #0056b3; }
        .menu .btn-admin { background-color: #dc3545; }
        .menu .btn-admin:hover { background-color: #c82333; }
        .menu .btn-logoff { background-color: #dc3545; }
        .menu .btn-logoff:hover { background-color: #c82333; }
        .submenu { display: none; padding-left: 20px; width: 100%; }
        .submenu.open { display: block; }
        .submenu button { background-color: #17a2b8; }
        .submenu button:hover { background-color: #138496; }
        .section { display: none; min-height: 200px; visibility: visible; opacity: 1; }
        .section.active { display: block; }
        .settings-form { display: flex; flex-direction: column; gap: 20px; max-width: 600px; padding: 20px 0; }
        .settings-form label { font-weight: bold; margin-bottom: 5px; }
        .settings-form input, .settings-form textarea { padding: 10px; width: 100%; box-sizing: border-box; border: 1px solid #ddd; border-radius: 4px; }
        .settings-form button { padding: 12px; background-color: #007BFF; color: white; border: none; cursor: pointer; border-radius: 4px; width: auto; align-self: flex-start; }
        .settings-form button:hover { background-color: #0056b3; }
        #toast-container > .toast-success { background-color: #28a745; border-color: #218838; }
        #toast-container > .toast-error { background-color: #dc3545; border-color: #c82333; }
        .password-container { position: relative; display: flex; flex-direction: column; margin-bottom: 20px; }
        .password-container input { padding-right: 40px; }
        .password-toggle { position: absolute; right: 10px; top: 65%; transform: translateY(-50%); cursor: pointer; }
        table { width: 100%; border-collapse: collapse; margin-bottom: 20px; }
        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
        #productTable th, #productTable td { min-width: 100px; }
        #productTable th:nth-child(1), #productTable td:nth-child(1) { width: 0; }
        #productTable th:nth-child(2), #productTable td:nth-child(2) { width: 15%; }
        #productTable th:nth-child(3), #productTable td:nth-child(3) { width: 25%; }
        #productTable th:nth-child(4), #productTable td:nth-child(4) { width: 20%; }
        #productTable th:nth-child(5), #productTable td:nth-child(5) { width: 10%; }
        #productTable th:nth-child(6), #productTable td:nth-child(6) { width: 10%; }
        #productTable th:nth-child(7), #productTable td:nth-child(7) { width: 10%; }
        #productTable th:nth-child(8), #productTable td:nth-child(8) { width: 10%; }
        .hidden { display: none; }
        tr.clickable:hover { background-color: #f5f5f5; cursor: pointer; }
        #siteRequestsTable button { padding: 6px 12px; background-color: #007BFF; color: white; border: none; border-radius: 4px; cursor: pointer; font-size: 12px; }
        #siteRequestsTable button:hover { background-color: #0056b3; }
        .site-request-detail { max-width: 600px; }
        .site-request-detail label { font-weight: bold; display: block; margin-top: 15px; }
        .site-request-detail p { margin: 5px 0; }
        .site-request-detail img { max-width: 100px; margin: 5px; vertical-align: middle; }
        .site-request-detail .page-section, .site-request-detail .email-section { margin-top: 15px; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
        .modal { display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0,0,0,0.5); z-index: 1000; }
        .modal-content { background-color: white; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); padding: 20px; border-radius: 4px; width: 80%; max-width: 400px; }
        .modal-content label { font-weight: bold; display: block; margin-bottom: 5px; }
        .modal-content input { width: 100%; padding: 8px; margin-bottom: 15px; }
        .modal-content button { width: 100%; padding: 10px; }
        .close { float: right; font-size: 20px; cursor: pointer; }
        #documentation-content { padding: 20px; visibility: visible; opacity: 1; }
    </style>
</head>
<body>
    <div class="header">
        <div class="header-content" id="brandingContent">
            <!-- Branding content will be loaded here -->
        </div>
    </div>
    <div class="main-container">
        <div class="menu-container">
            <div class="menu" id="menu">
                <input type="text" id="userId" style="display: none;">
                <!-- Menu items will be dynamically generated -->
            </div>
        </div>
        <div class="content-container">
            <div id="welcome" class="section active">
                <h2>Welcome to Your Partner Dashboard</h2>
                <p>This dashboard is designed for partners to manage merchant integrations with clubmadeira.io. Use the "My Account" section to update your contact details or change your password. If you have admin privileges, you can return to the admin panel using the "Back to Admin" button.</p>
            </div>
            <div id="my-account" class="section">
                <h2>My Account</h2>
                <div class="settings-form">
                    <label for="contactName">Contact Name:</label>
                    <input type="text" id="contactName" placeholder="Enter contact name">
                    <label for="websiteUrl">Website URL:</label>
                    <input type="url" id="websiteUrl" placeholder="Enter website URL">
                    <label for="emailAddress">Email Address:</label>
                    <input type="email" id="emailAddress" placeholder="Enter email address">
                    <label for="phoneNumber">Phone Number:</label>
                    <input type="tel" id="phoneNumber" placeholder="Enter phone number">
                    <button data-action="saveSettings">Save Settings</button>
                    <h3>Change Password</h3>
                    <div class="password-container">
                        <label for="currentPassword">Current Password:</label>
                        <input type="password" id="currentPassword" placeholder="Enter current password">
                        <i class="fas fa-eye password-toggle" data-field="currentPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="newPassword">New Password:</label>
                        <input type="password" id="newPassword" placeholder="Enter new password">
                        <i class="fas fa-eye password-toggle" data-field="newPassword"></i>
                    </div>
                    <div class="password-container">
                        <label for="confirmPassword">Confirm New Password:</label>
                        <input type="password" id="confirmPassword" placeholder="Confirm new password">
                        <i class="fas fa-eye password-toggle" data-field="confirmPassword"></i>
                    </div>
                    <button data-action="savePassword">Change Password</button>
                </div>
            </div>
            <div id="my-products" class="section">
                <h2>My Products</h2>
                <p>These are the products from your parts feed.</p>
                <table id="productTable">
                    <thead>
                        <tr><th class="hidden">ID</th><th>Category</th><th>Title</th><th>URL</th><th>Price</th><th>Original</th><th>Image</th><th>QTY</th></tr>
                    </thead>
                    <tbody id="productList"></tbody>
                </table>
            </div>
            <div id="wix-keys" class="section">
                <h2>Wix Keys</h2>
                <p>Your Wix Client ID is used to integrate your merchant account with Wix services. Ensure it matches the key provided in your Wix developer dashboard.</p>
                <div class="settings-form">
                    <label for="wixClientId">Wix Client ID:</label>
                    <input type="text" id="wixClientId" placeholder="Enter Wix Client ID">
                    <button data-action="saveWixClientId">Save Wix Client ID</button>
                </div>
            </div>
            <div id="site-requests" class="section">
                <h2>Site Requests</h2>
                <p>View and manage site requests from merchants and communities. Click a row to see details.</p>
                <table id="siteRequestsTable">
                    <thead>
                        <tr>
                            <th>Type</th>
                            <th>Received At</th>
                            <th>Contact Name</th>
                            <th>Email</th>
                            <th>Organisation</th>
                            <th>Action</th>
                        </tr>
                    </thead>
                    <tbody id="siteRequestsList"></tbody>
                </table>
            </div>
            <div id="site-request-detail" class="section">
                <h2>Site Request Details</h2>
                <div class="settings-form">
                    <button data-section="site-requests">Back to Site Requests</button>
                    <div id="siteRequestContent"></div>
                </div>
            </div>
            <div id="documentation" class="section">
                <h2>Documentation</h2>
                <div id="documentation-content">
                    <p>This section provides documentation for integrating with clubmadeira.io. Select a specific topic from the submenu.</p>
                </div>
            </div>
            <div id="apiKeyModal" class="modal">
                <div class="modal-content">
                    <span class="close" data-action="closeApiKeyModal">×</span>
                    <h3>Enter API Key</h3>
                    <label for="merchantWixClientId">Wix Client ID:</label>
                    <input type="text" id="merchantWixClientId" placeholder="Enter Wix Client ID">
                    <button data-action="saveMerchantWixClientId">Save</button>
                </div>
            </div>
        </div>
    </div>

    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/toastr.js/latest/toastr.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@4.0.12/marked.min.js"></script>
    <script>
        const apiUrl = 'https://clubmadeira.io';
        let userPermissions = [];
        let currentUserId = '';

        function decodeJWT(token) {
            if (!token || typeof token !== 'string') {
                console.error('Invalid token');
                return null;
            }
            if (!token.match(/^[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+\.[A-Za-z0-9-_]+$/)) {
                console.error('Invalid token format');
                return null;
            }
            const parts = token.split('.');
            try {
                const base64Url = parts[1];
                const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                const jsonPayload = decodeURIComponent(atob(base64).split('').map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)).join(''));
                return JSON.parse(jsonPayload);
            } catch (error) {
                console.error('Error decoding JWT:', error.message);
                return null;
            }
        }

        function initializePartner() {
            console.log('Initializing partner page');
            const token = localStorage.getItem('authToken');
            currentUserId = localStorage.getItem('userId') || '';
            if (!token) {
                console.error('No token found, redirecting to /');
                window.location.href = '/';
                return;
            }
            if (!currentUserId) {
                console.error('No user ID found in session, redirecting to /');
                toastr.error('User ID not found in session. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                window.location.href = '/';
                return;
            }
            const decoded = decodeJWT(token);
            if (!decoded) {
                console.error('Invalid token, redirecting to /');
                window.location.href = '/';
                return;
            }
            userPermissions = decoded.permissions || [];
            if (!userPermissions.includes('admin') && !userPermissions.includes('wixpro')) {
                toastr.error('Permission denied: Partner permission required');
                window.location.href = '/';
                return;
            }
            document.getElementById('userId').value = currentUserId;
            updateMenu();
            loadBranding();
            showSection('welcome');
            attachEventListeners();
        }

        toastr.options = { closeButton: true, progressBar: true, positionClass: 'toast-top-right', timeOut: 5000, showMethod: 'slideDown', hideMethod: 'slideUp' };

        async function fetchProtectedPage(url) {
            const token = localStorage.getItem('authToken');
            if (!token) {
                toastr.error('No authentication token found. Please log in.');
                window.location.href = '/';
                return;
            }
            try {
                const response = await fetch(`${apiUrl}${url}`, {
                    method: 'GET',
                    headers: {
                        'Authorization': `Bearer ${token}`,
                        'Accept': 'text/html'
                    }
                });
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Server returned ${response.status}: ${errorText}`);
                }
                const html = await response.text();

                // Clear the event listeners Map before replacing the DOM
                if (document.__eventListeners) {
                    console.log('Before DOM replacement - Clearing event listeners Map. Size before:', document.__eventListeners.size);
                    document.__eventListeners.clear();
                    console.log('Map cleared. Size after:', document.__eventListeners.size);
                } else {
                    console.log('No event listeners Map found. Will create one after DOM update.');
                }

                // Replace the DOM content
                document.body.innerHTML = html;

                // Reinitialize the page
                initializePartner();
            } catch (error) {
                toastr.error(error.message || 'Failed to load protected page');
                window.location.href = '/';
            }
        }

        function attachEventListeners() {
            console.log('Attaching event listeners');
            const existingListeners = document.__eventListeners || new Map();
            document.__eventListeners = existingListeners;
            console.log('Map size at start:', existingListeners.size);

            // Navigation buttons (e.g., "Back to Admin")
            document.querySelectorAll('.menu button[data-href]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', async (e) => {
                        e.preventDefault();
                        const href = button.getAttribute('data-href');
                        console.log(`Fetching protected page: ${href}`);
                        await fetchProtectedPage(href);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to navigation button');
                }
            });

            // Top-level menu buttons (e.g., "Site Requests", "My Products")
            document.querySelectorAll('.menu button[data-section]:not([data-type])').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', (e) => {
                        e.preventDefault();
                        const section = button.getAttribute('data-section');
                        const submenu = button.getAttribute('data-submenu');
                        console.log(`Top-level button clicked: ${section}${submenu ? ' (submenu)' : ''}`);
                        if (submenu) toggleSubmenu(submenu);
                        showSection(section);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to top-level menu button');
                }
            });

            // Submenu buttons (e.g., "Velo Docs", "Flask Docs")
            document.querySelectorAll('.submenu button[data-section][data-type]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', (e) => {
                        e.preventDefault();
                        const section = button.getAttribute('data-section');
                        const type = button.getAttribute('data-type');
                        console.log(`Submenu button clicked: ${section} (${type})`);
                        showSection(section, type);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to submenu button');
                }
            });

            // Action buttons in settings forms (e.g., "Save Settings", "Change Password")
            document.querySelectorAll('.settings-form button[data-action]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const action = button.getAttribute('data-action');
                        console.log(`Action button clicked: ${action}`);
                        if (action === 'saveSettings') saveSettings();
                        else if (action === 'savePassword') savePassword();
                        else if (action === 'saveWixClientId') saveWixClientId();
                        else if (action === 'saveMerchantWixClientId') saveMerchantWixClientId();
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to settings action button');
                }
            });

            // Password toggle icons
            document.querySelectorAll('.password-toggle').forEach(toggle => {
                if (!existingListeners.has(toggle)) {
                    toggle.addEventListener('click', () => {
                        const fieldId = toggle.getAttribute('data-field');
                        togglePassword(fieldId);
                    });
                    existingListeners.set(toggle, true);
                    console.log('Listener attached to password toggle');
                }
            });

            // Site request table rows (click to view details)
            document.querySelectorAll('#siteRequestsList tr.clickable').forEach(row => {
                if (!existingListeners.has(row)) {
                    row.addEventListener('click', (e) => {
                        if (e.target.tagName !== 'BUTTON') {
                            const userId = row.dataset.userId;
                            loadSiteRequestDetail(userId);
                        }
                    });
                    existingListeners.set(row, true);
                    console.log('Listener attached to site request row');
                }
            });

            // Action buttons in site requests table (e.g., "Enter API Key")
            document.querySelectorAll('#siteRequestsTable button[data-user-id]').forEach(button => {
                if (!existingListeners.has(button)) {
                    button.addEventListener('click', () => {
                        const userId = button.getAttribute('data-user-id');
                        openApiKeyModal(userId);
                    });
                    existingListeners.set(button, true);
                    console.log('Listener attached to site request action button');
                }
            });

            // Logoff button
            const logOffBtn = document.getElementById('logOffBtn');
            if (logOffBtn && !existingListeners.has(logOffBtn)) {
                logOffBtn.addEventListener('click', logOff);
                existingListeners.set(logOffBtn, true);
                console.log('Listener attached to logOffBtn');
            }

            // Modal close button
            const closeModalBtn = document.querySelector('.close[data-action="closeApiKeyModal"]');
            if (closeModalBtn && !existingListeners.has(closeModalBtn)) {
                closeModalBtn.addEventListener('click', closeApiKeyModal);
                existingListeners.set(closeModalBtn, true);
                console.log('Listener attached to modal close button');
            }

            console.log('Map size at end:', existingListeners.size);
        }

        function updateMenu() {
            const menu = document.getElementById('menu');
            menu.innerHTML = '<input type="text" id="userId" style="display: none;" value="' + currentUserId + '">';

            if (userPermissions.includes('wixpro') && userPermissions.includes('validated')) {
                menu.innerHTML += '<button data-section="site-requests">Site Requests</button>';
            }

            if (userPermissions.includes('merchant')) {
                menu.innerHTML += '<button data-section="my-products">My Products</button>';
                menu.innerHTML += '<button data-section="wix-keys">Wix Keys</button>';
            }

            menu.innerHTML += '<button data-section="my-account">My Account</button>';
            menu.innerHTML += '<button data-section="documentation" data-submenu="documentation">Documentation <i class="fas fa-caret-down"></i></button>';
            menu.innerHTML += `
                <div id="documentation" class="submenu">
                    <button data-section="documentation" data-type="velo">Velo Docs</button>
                    <button data-section="documentation" data-type="flask">Flask Docs</button>
                </div>
            `;

            if (userPermissions.includes('admin')) {
                menu.innerHTML += '<button data-href="/admin" class="btn-admin">Back to Admin</button>';
            }

            menu.innerHTML += '<button id="logOffBtn" class="btn-logoff">Log Off</button>';
        }

        async function loadBranding() {
            try {
                const response = await authenticatedFetch(`${apiUrl}/branding`);
                if (!response.ok) throw new Error(`Failed to fetch branding: ${response.status}`);
                const data = await response.json();
                document.getElementById('brandingContent').innerHTML = data.content || `
                    <img src="https://via.placeholder.com/50" alt="User Avatar">
                    <div>
                        <h1>Welcome to Your Admin Hub</h1>
                        <p>Manage affiliates, deals, and users with ease!</p>
                    </div>
                `;
            } catch (error) {
                toastr.error(`Error loading branding: ${error.message}`);
                document.getElementById('brandingContent').innerHTML = `
                    <img src="https://via.placeholder.com/50" alt="User Avatar">
                    <div>
                        <h1>Welcome to Your Admin Hub</h1>
                        <p>Manage affiliates, deals, and users with ease!</p>
                    </div>
                `;
            }
        }

        async function authenticatedFetch(url, options = {}) {
            const token = localStorage.getItem('authToken');
            options.headers = { ...options.headers, 'Authorization': `Bearer ${token}`, 'Content-Type': 'application/json' };
            const response = await fetch(url, options);
            if (response.status === 401) {
                toastr.error('Session expired. Please log in again.');
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                window.location.href = '/';
            }
            return response;
        }

        function showSection(section, type = null) {
            console.log(`Showing section: ${section}${type ? ` (${type})` : ''}`);
            document.querySelectorAll('.section').forEach(s => {
                s.classList.remove('active');
                s.style.display = 'none';
            });
            const activeSection = document.getElementById(section);
            if (activeSection) {
                activeSection.classList.add('active');
                activeSection.style.display = 'block';
                activeSection.style.visibility = 'visible';
                activeSection.style.opacity = '1';
                console.log(`Section ${section} is now visible, display: ${activeSection.style.display}, visibility: ${activeSection.style.visibility}, opacity: ${activeSection.style.opacity}`);
            } else {
                console.error(`Section ${section} not found`);
            }
            if (section === 'my-account') loadSettings();
            else if (section === 'my-products') loadProducts();
            else if (section === 'wix-keys') loadWixClientId();
            else if (section === 'site-requests') loadSiteRequests();
            else if (section === 'documentation') loadDocumentation(type);
        }

        function toggleSubmenu(submenuId) {
            const submenu = document.getElementById(submenuId);
            if (submenu) {
                submenu.classList.toggle('open');
                console.log(`Toggled submenu: ${submenuId}, now ${submenu.classList.contains('open') ? 'open' : 'closed'}`);
            } else {
                console.error(`Submenu with ID ${submenuId} not found`);
            }
        }

        async function loadDocumentation(type) {
            const contentDiv = document.getElementById('documentation-content');
            if (!contentDiv) {
                console.error('Documentation content div not found');
                return;
            }
            console.log('Loading documentation, type:', type);
            contentDiv.innerHTML = `
                <p>This section provides documentation for integrating with clubmadeira.io. Select a specific topic from the submenu.</p>
            `;
            console.log('Set default documentation content');
            if (!type) {
                return;
            }
            let url;
            if (type === 'velo') {
                url = `https://raw.githubusercontent.com/SimonBarnett/Madeira/main/velo.md`;
            } else if (type === 'flask') {
                url = `https://raw.githubusercontent.com/SimonBarnett/Madeira/main/flask.md`;
            } else {
                console.error(`Invalid documentation type: ${type}`);
                return;
            }
            console.log(`Fetching documentation from: ${url}`);
            try {
                const response = await fetch(url);
                console.log(`Response status: ${response.status}`);
                if (!response.ok) {
                    const errorText = await response.text();
                    throw new Error(`Failed to load ${type} documentation: ${response.status} - ${errorText}`);
                }
                const markdown = await response.text();
                console.log(`Loaded ${type} markdown: ${markdown.substring(0, 100)}...`);
                try {
                    const html = marked.parse(markdown);
                    console.log(`Parsed HTML: ${html.substring(0, 100)}...`);
                    contentDiv.innerHTML = html;
                } catch (parseError) {
                    console.error(`Error parsing Markdown: ${parseError.message}`);
                    contentDiv.innerHTML = `<p>Error parsing ${type} documentation: ${parseError.message}</p>`;
                }
            } catch (error) {
                console.error(`Error loading ${type} documentation: ${error.message}`);
                toastr.error(`Error loading ${type} documentation: ${error.message}`);
                contentDiv.innerHTML = `<p>Failed to load ${type} documentation: ${error.message}</p>`;
            }
        }

        function logOff() {
            if (confirm('Are you sure you want to log off?')) {
                localStorage.removeItem('authToken');
                localStorage.removeItem('userId');
                toastr.success('Logged off successfully');
                setTimeout(() => window.location.href = '/', 1000);
            }
        }

        async function loadSettings() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch settings: ${response.status}`);
                const data = await response.json();
                document.getElementById('contactName').value = data.contact_name || '';
                document.getElementById('websiteUrl').value = data.website_url || '';
                document.getElementById('emailAddress').value = data.email_address || '';
                document.getElementById('phoneNumber').value = data.phone_number || '';
            } catch (error) {
                toastr.error(`Error loading settings: ${error.message}`);
            }
        }

        async function saveSettings() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            const settings = {
                contact_name: document.getElementById('contactName').value.trim(),
                website_url: document.getElementById('websiteUrl').value.trim(),
                email_address: document.getElementById('emailAddress').value.trim(),
                phone_number: document.getElementById('phoneNumber').value.trim()
            };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, { method: 'PATCH', body: JSON.stringify(settings) });
                if (!response.ok) throw new Error(`Failed to save settings: ${response.status}`);
                toastr.success('Settings saved successfully');
            } catch (error) {
                toastr.error(`Error saving settings: ${error.message}`);
            }
        }

        function togglePassword(fieldId) {
            const input = document.getElementById(fieldId);
            const icon = input.nextElementSibling;
            if (input.type === 'password') {
                input.type = 'text';
                icon.classList.remove('fa-eye');
                icon.classList.add('fa-eye-slash');
            } else {
                input.type = 'password';
                icon.classList.remove('fa-eye-slash');
                icon.classList.add('fa-eye');
            }
        }

        async function savePassword() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            const currentPassword = document.getElementById('currentPassword').value;
            const newPassword = document.getElementById('newPassword').value;
            const confirmPassword = document.getElementById('confirmPassword').value;

            const passwordRegex = /^(?=.*\d).{8,}$/;
            if (!passwordRegex.test(newPassword)) {
                toastr.error('New password must be at least 8 characters long and include numbers');
                return;
            }
            if (newPassword !== confirmPassword) {
                toastr.error('New password and confirmation do not match');
                return;
            }

            const passwordData = { currentPassword, newPassword };
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/password`, {
                    method: 'POST',
                    body: JSON.stringify(passwordData)
                });
                if (!response.ok) throw new Error(`Failed to change password: ${response.status}`);
                toastr.success('Password changed successfully');
                document.getElementById('currentPassword').value = '';
                document.getElementById('newPassword').value = '';
                document.getElementById('confirmPassword').value = '';
            } catch (error) {
                toastr.error(`Error changing password: ${error.message}`);
            }
        }

        async function loadProducts() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/products`);
                if (!response.ok) throw new Error(`Failed to fetch products: ${response.status}`);
                const data = await response.json();
                const tbody = document.getElementById('productList');
                tbody.innerHTML = '';
                data.products.forEach(product => tbody.appendChild(createProductRow(product)));
            } catch (error) {
                toastr.error(`Error loading products: ${error.message}`);
            }
        }

        function createProductRow(product) {
            const tr = document.createElement('tr');
            tr.innerHTML = `
                <td class="hidden">${product.id}</td>
                <td>${product.category || 'N/A'}</td>
                <td>${product.title}</td>
                <td><a href="${product.product_url}" target="_blank">Link</a></td>
                <td>${product.current_price}</td>
                <td>${product.original_price}</td>
                <td><img src="${product.image_url}" width="50" onerror="this.src='https://via.placeholder.com/50';"></td>
                <td>${product.qty || 'N/A'}</td>
            `;
            return tr;
        }

        async function loadWixClientId() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`);
                if (!response.ok) throw new Error(`Failed to fetch Wix Client ID: ${response.status}`);
                const data = await response.json();
                document.getElementById('wixClientId').value = data.wixClientId || '';
            } catch (error) {
                toastr.error(`Error loading Wix Client ID: ${error.message}`);
            }
        }

        async function saveWixClientId() {
            if (!currentUserId) { toastr.error('User ID not found in session'); return; }
            const wixClientId = document.getElementById('wixClientId').value.trim();
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, {
                    method: 'PATCH',
                    body: JSON.stringify({ wixClientId })
                });
                if (!response.ok) throw new Error(`Failed to save Wix Client ID: ${response.status}`);
                toastr.success('Wix Client ID saved successfully');
            } catch (error) {
                toastr.error(`Error saving Wix Client ID: ${error.message}`);
            }
        }

        async function loadSiteRequests() {
            try {
                const url = `${apiUrl}/siterequests`;
                const response = await authenticatedFetch(url);
                if (!response.ok) throw new Error(`Failed to fetch site requests: ${response.status}`);
                const data = await response.json();
                const tbody = document.getElementById('siteRequestsList');
                tbody.innerHTML = '';
                if (data.siterequests && data.siterequests.length > 0) {
                    data.siterequests.forEach(request => {
                        const row = createSiteRequestRow(request);
                        row.classList.add('clickable');
                        tbody.appendChild(row);
                    });
                } else {
                    tbody.innerHTML = '<tr><td colspan="6">No site requests found.</td></tr>';
                }
            } catch (error) {
                toastr.error(`Error loading site requests: ${error.message}`);
                const tbody = document.getElementById('siteRequestsList');
                tbody.innerHTML = `<tr><td colspan="6">Error loading site requests: ${error.message}</td></tr>`;
            }
        }

        function createSiteRequestRow(request) {
            const tr = document.createElement('tr');
            tr.dataset.userId = request.user_id;
            tr.innerHTML = `
                <td>${request.type || ''}</td>
                <td>${request.received_at || ''}</td>
                <td>${request.contact_name || ''}</td>
                <td>${request.email || ''}</td>
                <td>${request.organisation || ''}</td>
                <td>${
                    request.type === 'merchant'
                        ? `<button data-user-id="${request.user_id}">Enter API Key</button>`
                        : ''
                }</td>
            `;
            return tr;
        }

        async function loadSiteRequestDetail(userId) {
            try {
                const url = `${apiUrl}/${userId}/siterequest`;
                const response = await authenticatedFetch(url);
                if (!response.ok) throw new Error(`Failed to fetch site request details: ${response.status}`);
                const data = await response.json();
                const content = document.getElementById('siteRequestContent');
                if (data.status === 'success' && Object.keys(data.site_request).length > 0) {
                    const siteRequest = data.site_request;
                    content.innerHTML = `
                        <label>Community Name:</label>
                        <p>${siteRequest.communityName || siteRequest.storeName || ''}</p>
                        <label>About Our Community/Store:</label>
                        <p>${siteRequest.aboutCommunity || siteRequest.aboutStore || ''}</p>
                        <label>Logos:</label>
                        <div>${(siteRequest.communityLogos || siteRequest.storeLogos || []).map(logo => `<img src="${logo}" alt="Logo">`).join(' ')}</div>
                        <label>Color Preferences:</label>
                        <p>${siteRequest.colorPrefs || ''}</p>
                        <label>Styling Details:</label>
                        <p>${siteRequest.stylingDetails || ''}</p>
                        <label>Preferred Domain Name:</label>
                        <p>${siteRequest.preferredDomain || 'mycommunity.org'}</p>
                        <label>Email Addresses to Set Up:</label>
                        <div>${(siteRequest.emails || []).map(email => `<div class="email-section">${email}@${siteRequest.preferredDomain || 'mycommunity.org'}</div>`).join('')}</div>
                        <label>Requested Pages:</label>
                        <div>${(siteRequest.pages || []).map(page => `
                            <div class="page-section">
                                <label>Page Name:</label>
                                <p>${page.name || ''}</p>
                                <label>Page Content:</label>
                                <p>${page.content || ''}</p>
                                <label>Additional Images:</label>
                                <div>${(page.images || []).map(img => `<img src="${img}" alt="Page Image">`).join(' ')}</div>
                            </div>
                        `).join('')}</div>
                        <label>Wix Widgets:</label>
                        <div>${(siteRequest.widgets || []).map(widget => `<p>${widget}</p>`).join('')}</div>
                    `;
                    currentUserId = userId;
                } else {
                    content.innerHTML = '<p>No details available for this site request.</p>';
                }
                showSection('site-request-detail');
            } catch (error) {
                toastr.error(`Error loading site request details: ${error.message}`);
                document.getElementById('siteRequestContent').innerHTML = `<p>Error: ${error.message}</p>`;
                showSection('site-request-detail');
            }
        }

        function openApiKeyModal(userId) {
            currentUserId = userId;
            document.getElementById('merchantWixClientId').value = '';
            document.getElementById('apiKeyModal').style.display = 'block';
        }

        function closeApiKeyModal() {
            document.getElementById('apiKeyModal').style.display = 'none';
        }

        async function saveMerchantWixClientId() {
            const wixClientId = document.getElementById('merchantWixClientId').value.trim();
            if (!wixClientId) {
                toastr.error('Wix Client ID cannot be empty');
                return;
            }
            if (!currentUserId) {
                toastr.error('User ID is missing. Please try again.');
                return;
            }
            try {
                const response = await authenticatedFetch(`${apiUrl}/${currentUserId}/user`, {
                    method: 'PATCH',
                    body: JSON.stringify({ wixClientId })
                });
                if (!response.ok) throw new Error(`Failed to save Wix Client ID: ${response.status}`);
                toastr.success('Wix Client ID saved successfully');
                closeApiKeyModal();
            } catch (error) {
                toastr.error(`Error saving Wix Client ID: ${error.message}`);
            }
        }

        initializePartner();
    </script>
</body>
</html>

old/user_management.py

from flask import Blueprint, jsonify, request
from utils.auth import login_required
from utils.users import load_users_settings, save_users_settings
import logging
import json

user_management_bp = Blueprint('user_management', __name__)

@user_management_bp.route('/users', methods=['GET'])  # Added explicit route
def get_users():
    """
    Retrieve a list of all users.
    """
    try:
        users_settings = load_users_settings()
        user_list = [
            {
                "USERid": user_id,
                "email_address": user.get("email_address", ""),
                "contact_name": user.get("contact_name", ""),
                "phone_number": user.get("phone_number", None)
            }
            for user_id, user in users_settings.items()
        ]
        if not user_list:
            logging.warning("UX Issue - No users found in settings")
        logging.debug(f"Retrieved user list: {json.dumps(user_list)}")
        return jsonify({"status": "success", "users": user_list}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to retrieve users: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/users/<user_id>', methods=['GET'])
@login_required(["admin"], require_all=True)
def get_user(user_id):
    """
    Retrieve details of a specific user.
    """
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            logging.warning(f"UX Issue - User not found: {user_id}")
            return jsonify({"status": "error", "message": "User not found"}), 404
        user = users_settings[user_id]
        user_data = {
            "USERid": user_id,
            "email_address": user.get("email_address", ""),
            "contact_name": user.get("contact_name", ""),
            "phone_number": user.get("phone_number", None),
            "permissions": user.get("permissions", []),
            "website_url": user.get("website_url", ""),
            "wixClientId": user.get("wixClientId", ""),
            "referrals": user.get("referrals", {"visits": [], "orders": []})
        }
        # Redact sensitive data in logs
        log_data = user_data.copy()
        if "password" in log_data:
            log_data["password"] = "[REDACTED]"
        logging.debug(f"Retrieved user data for {user_id}: {json.dumps(log_data)}")
        return jsonify({"status": "success", "user": user_data}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to retrieve user {user_id}: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/permissions/<user_id>', methods=['GET'])
@login_required(["admin"], require_all=True)
def get_permissions(user_id):
    """
    Retrieve the permissions of a specific user.
    """
    try:
        users_settings = load_users_settings()
        if user_id not in users_settings:
            logging.warning(f"UX Issue - User not found for permissions: {user_id}")
            return jsonify({"status": "error", "message": "User not found"}), 404
        permissions = users_settings[user_id].get('permissions', [])
        logging.debug(f"Retrieved permissions for user {user_id}: {json.dumps(permissions)}")
        return jsonify({"status": "success", "permissions": permissions}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to retrieve permissions for user {user_id}: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

@user_management_bp.route('/permissions/<user_id>', methods=['POST'])
@login_required(["admin"], require_all=True)
def add_permission(user_id):
    """
    Add a permission to a specific user.
    """
    try:
        data = request.get_json()
        if 'permission' not in data:
            logging.warning(f"UX Issue - Missing permission field in request for user {user_id}: {json.dumps(data)}")
            return jsonify({"status": "error", "message": "Permission field is required"}), 400
        permission = data['permission']
        users_settings = load_users_settings()
        if user_id not in users_settings:
            logging.warning(f"UX Issue - User not found for adding permission: {user_id}")
            return jsonify({"status": "error", "message": "User not found"}), 404
        if permission in users_settings[user_id].get('permissions', []):
            logging.warning(f"UX Issue - Permission already exists for user {user_id}: {permission}")
            return jsonify({"status": "error", "message": "Permission already exists"}), 400
        users_settings[user_id].setdefault('permissions', []).append(permission)
        save_users_settings(users_settings)
        logging.debug(f"Added permission {permission} to user {user_id}")
        return jsonify({"status": "success", "message": "Permission added"}), 200
    except Exception as e:
        logging.error(f"UX Issue - Failed to add permission for user {user_id}: {str(e)}", exc_info=True)
        return jsonify({"status": "error", "message": str(e)}), 500

signup.css

body {
    font-family: Arial, sans-serif;
    margin: 0;
    padding: 20px;
    background-color: #f4f4f4;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

.signup-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    text-align: center;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
}

.options {
    display: flex;
    gap: 15px; /* Increased gap for better spacing */
    justify-content: center;
    margin-bottom: 30px;
}

.option {
    text-align: center;
    cursor: pointer;
    padding: 10px;
    transition: border 0.3s ease;
}

.option.selected {
    border: 3px solid #007BFF;
    border-radius: 5px;
    animation: pulse 1.5s infinite ease-in-out;
}

.option img {
    width: 150px; /* Fixed width for uniformity */
    height: 200px; /* Fixed height for uniformity */
    object-fit: cover;
    border-radius: 5px;
}

.option span {
    display: block;
    margin-top: 10px;
    font-size: 16px;
    color: #333;
}

.option input[type="radio"] {
    display: none;
}

.form-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin: 0 auto; /* Center the form, removed margin-right */
    width: 100%;
    max-width: 400px; /* Match form-group max-width for alignment */
}

button {
    background-color: #007BFF;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    font-size: 16px;
    width: 100%;
    max-width: 200px;
}

button:hover {
    background-color: #0056b3;
}

.form-group {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    width: 100%;
    max-width: 400px;
}

.form-group label {
    font-weight: bold;
    flex: 1;
    text-align: right;
    margin-bottom: 0;
}

.form-group .input-container {
    position: relative;
    width: 192px; /* 160px + 20% = 192px */
}

.form-group input {
    width: 100%;
    padding: 8px;
    padding-right: 30px;
    border: 1px solid #ddd;
    border-radius: 4px;
    font-size: 14px;
    box-sizing: border-box;
}

.form-group .toggle-password {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
}

.hidden {
    display: none;
}

/* Pulse animation keyframes */
@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.4);
    }
    50% {
        box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }
}

styles.css

body {
    font-family: Arial, sans-serif;
    margin: 0 !important;
    padding: 0 !important;
    background-color: #f4f4f4;
    min-height: 100vh;
    display: block !important;
    align-items: initial !important;
    justify-content: initial !important;
    text-align: initial !important;
}

.layout-wrapper {
    max-width: 1200px;
    width: 100%;
    margin: 0 auto !important;
    box-sizing: border-box;
    display: block !important;
    align-items: initial !important;
    padding: 0 !important;
    margin-top: 0 !important;
}

.container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.signup-container {
    background-color: white;
    padding: 30px;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
    max-width: 800px;
    width: 100%;
    text-align: center;
}

.header {
    width: 100%;
    max-width: 1200px;
    margin: 2 auto !important;
    background-color: #f4f4f4;
    overflow: hidden;
    position: relative;
    box-sizing: border-box;
    padding: 0 !important;
    margin-top: 0 !important;
}

.layout-wrapper .header .header-content {
    width: 100%;
    max-width: 1200px;
    margin: 0 auto !important;
    padding: 12px 20px;
    background-color: #007BFF;
    color: white;
    border-radius: 8px;
    display: flex !important;
    flex-direction: column;
    align-items: flex-start;
    justify-content: center;
    box-sizing: border-box;
    max-height: 80px;
    overflow: hidden;
}

.layout-wrapper .header .header-content h1 {
    margin: 0 0 5px 0;
    font-size: 20px;
}

.layout-wrapper .header .header-content p {
    margin: 0;
    font-size: 14px;
}

.main-container {
    max-width: 1200px;
    margin: 0 auto !important;
    display: flex;
    gap: 20px;
    padding: 0 20px 20px 0; /* Updated as per CREQ */
    flex-direction: row;
}

.menu-container {
    flex: 0 0 200px; /* Reverted to 200px from 160px */
    max-width: 200px; /* Reverted to 200px from 160px */
    margin-top: 10px;
}

.content-wrapper {
    flex: 0 0 900px;
    max-width: 900px;
}

.menu {
    margin-bottom: 20px;
    text-align: left;
    margin-top: 0;
}

.menu button {
    padding: 10px 10px 10px 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    width: 100%;
    max-width: 200px; /* Reverted to 200px from 160px */
    margin-bottom: 5px;
    display: flex;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding-right: 30px;
}

.menu button:hover {
    background-color: #0056b3;
}

.menu button[data-submenu][aria-expanded="true"] {
    background-color: #0056b3;
    border-left: 4px solid #fff;
}

.menu button i,
.menu button .svg-icon,
.menu button .icon-group {
    margin-right: 8px;
    vertical-align: middle;
}

.menu button i::before {
    font-family: "Font Awesome 6 Free";
}

.menu button i.fas::before {
    font-weight: 900;
}

.menu button .svg-icon {
    display: inline-block;
    height: 16px;
    width: auto;
}

.menu button .svg-icon svg {
    height: 100%;
    width: auto;
    fill: white;
}

.menu button .icon-group {
    display: inline-flex;
    align-items: center;
    position: relative;
}

.menu button .icon-group .small-icon {
    font-size: 10px;
    position: absolute;
    bottom: 0;
    right: -8px;
    color: white;
}

.menu button .button-content {
    display: flex;
    align-items: center; /* Vertically centers the SVG and text */
    justify-content: flex-start; /* Aligns content to the left */
}

.menu button .caret {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    color: white;
    font-size: 14px;
}

.menu .btn-admin {
    background-color: #dc3545;
}

.menu .btn-admin:hover {
    background-color: #c82333;
}

.menu .btn-logoff {
    background-color: #dc3545;
}

.menu .btn-logoff:hover {
    background-color: #c82333;
}

.menu button[data-href="/admin"] {
    background-color: #dc3545; /* Added per CREQ to match Log Off button color */
}

.menu button[data-href="/admin"]:hover {
    background-color: #c82333; /* Added per CREQ to match Log Off hover color */
}

.submenu {
    display: none;
    padding-left: 20px;
    padding-bottom: 0; /* Remove extra space at the bottom */
    overflow: visible;
    max-height: 0;
    transition: all 0.3s ease-in-out;
}
.submenu.open {
    display: block !important;
    max-height: 1000px !important;
    height: auto !important;
    /* Removed min-height since submenus are working */
}

.submenu button {
    display: block !important;
    min-height: 30px !important;
    background-color: #6c757d !important;
}

.submenu button:hover {
    background-color: #5a6268;
}

.submenu button.active {
    background-color: #28a745;
    color: white;
}

.section {
    display: none;
    margin-left: 210px; /* Reverted to 210px (200px + 10px gap) from 170px */
}

.section.active {
    display: block;
}

.form {
    display: flex;
    flex-direction: column;
    gap: 10px;
    max-width: 400px;
}

.form label {
    font-weight: bold;
}

.form input, .form select {
    padding: 5px;
}

.form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
}

.form button:hover {
    background-color: #0056b3;
}

.signup-instructions {
    margin-top: 15px;
    font-size: 0.9em;
    color: #555;
}

.signup-instructions a {
    color: #007BFF;
    text-decoration: none;
}

.signup-instructions a:hover {
    text-decoration: underline;
}

.settings-form {
    display: flex;
    flex-direction: column;
    gap: 15px;
    max-width: 600px;
}

.settings-form label {
    font-weight: bold;
    margin-bottom: 5px;
}

.settings-form input, 
.settings-form textarea {
    padding: 8px;
    width: 100%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.settings-form button {
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    cursor: pointer;
    border-radius: 4px;
}

.settings-form button:hover {
    background-color: #0056b3;
}

table {
    width: 100%;
    border-collapse: collapse;
}

th, td {
    border: 1px solid #ddd;
    padding: 8px;
    text-align: left;
}

.deals-table th {
    background-color: #f2f2f2;
}

.treeview {
    max-height: 600px;
    overflow-y: auto;
    margin-bottom: 10px;
}

.treeview, .treeview ul, .treeview li {
    list-style-type: none;
    padding: 0;
    margin: 0;
}

.treeview .node {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 5px 0;
}

.treeview .toggle {
    cursor: pointer;
    width: 20px;
    text-align: center;
    font-weight: bold;
    flex-shrink: 0;
}

.treeview input[type="checkbox"] {
    width: 16px !important;
    height: 16px !important;
    margin: 0;
    flex-shrink: 0;
}

.treeview .subcategories {
    display: none;
    padding-left: 20px;
}

.treeview .subcategories.open {
    display: block;
}

#toast-container > .toast-success {
    background-color: #28a745;
    border-color: #218838;
}

#toast-container > .toast-error {
    background-color: #dc3545;
    border-color: #c82333;
}

.action-cell {
    display: flex;
    gap: 10px;
    align-items: center;
}

h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.form-group {
    margin-bottom: 15px;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 10px;
    width: 100%;
    max-width: 400px;
}

.form-group label {
    font-weight: bold;
    flex: 1;
    text-align: right;
    margin-bottom: 0;
}

.form-group .input-container {
    position: relative;
    width: 200px;
}

.form-group input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
    padding-right: 30px;
    font-size: 14px;
}

.form-group .toggle-password {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
}

.button-container {
    display: flex;
    justify-content: center;
    margin-top: 10px;
}

button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    max-width: 200px;
}

button:hover {
    background-color: #0056b3;
}

.toggle-link {
    text-align: center;
    margin-top: 15px;
}

.toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.toggle-link a:hover {
    text-decoration: underline;
}

.hidden {
    display: none;
}

.toggle-section {
    cursor: pointer;
    font-weight: bold;
    margin: 10px 0;
    background-color: #e9ecef;
    padding: 5px;
    border-radius: 4px;
}

.toggle-content {
    display: none;
}

.toggle-content.open {
    display: block;
}

.page-section, .email-section {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.email-section {
    margin-top: 10px;
    padding: 10px;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.widget-checkboxes div {
    margin-bottom: 10px;
}

.remove-page-btn, .remove-email-btn {
    padding: 5px 10px;
    background-color: #dc3545;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.remove-page-btn:hover, .remove-email-btn:hover {
    background-color: #c82333;
}

.password-container {
    position: relative;
    display: flex;
    flex-direction: column;
    margin-bottom: 15px;
    justify-content: flex-end;
    align-items: center;
}

.password-container input {
    padding: 8px 30px 8px 8px;
    width: 50%;
    box-sizing: border-box;
    border: 1px solid #ddd;
    border-radius: 4px;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
    font-size: 16px;
}

#my-store .settings-form {
    max-width: 600px;
}

#my-store .email-section input[type="text"] {
    width: 50%;
}

#my-store .widget-checkboxes input[type="checkbox"] {
    width: 10px;
}

h1 {
    font-size: 24px;
    margin-bottom: 20px;
    color: #333;
}

.options {
    display: flex;
    gap: 5px;
    justify-content: center;
    margin-bottom: 30px;
}

.option {
    text-align: center;
    cursor: pointer;
    padding: 10px;
    transition: border 0.3s ease;
}

.option.selected {
    border: 3px solid #007BFF;
    border-radius: 5px;
}

.option img {
    object-fit: cover;
    border-radius: 5px;
}

.option span {
    display: block;
    margin-top: 10px;
    font-size: 16px;
    color: #333;
}

.option input[type="radio"] {
    display: none;
}

.form-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 20px;
    margin-right: 100px;
}

/* Loading Overlay */
#loadingOverlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(255, 255, 255, 1);
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 9999;
}

/* Multicircle Loader Container */
.multicircle-loader {
    position: relative;
    width: 100px;
    height: 100px;
}

/* Circle Styles */
.multicircle-loader .circle {
    position: absolute;
    border-radius: 50%;
    border: 4px solid transparent;
    animation: spin 1.5s linear infinite;
}

/* Individual Circle Variations */
.circle1 {
    width: 60px;
    height: 60px;
    border-top-color: #ff6f61;
    top: 20px;
    left: 20px;
    animation-delay: 0s;
}

.circle2 {
    width: 45px;
    height: 45px;
    border-top-color: #6bff61;
    top: 27.5px;
    left: 27.5px;
    animation-delay: 0.3s;
}

.circle3 {
    width: 30px;
    height: 30px;
    border-top-color: #61cfff;
    top: 35px;
    left: 35px;
    animation-delay: 0.6s;
}

.circle4 {
    width: 15px;
    height: 15px;
    border-top-color: #ff61ff;
    top: 42.5px;
    left: 42.5px;
    animation-delay: 0.9s;
}

/* Spin Animation */
@keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
}

/* Login page specific styles */
.login-page {
    display: flex !important;
    justify-content: center !important;
    align-items: center !important;
    padding: 20px;
}

.login-page .container {
    background: white;
    padding: 20px;
    border-radius: 8px;
    box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    width: 100%;
    max-width: 400px;
}

.login-page h2 {
    text-align: center;
    color: #333;
    margin-bottom: 20px;
}

.login-page .form-group {
    margin-bottom: 15px;
    transform: translateX(-40px);
}

.login-page .form-group label {
    display: block;
    font-weight: bold;
    margin-bottom: 0;
    max-width: 70px;
}

.login-page input {
    width: 100%;
    padding: 8px;
    border: 1px solid #ddd;
    border-radius: 4px;
    box-sizing: border-box;
}

.login-page button {
    width: 100%;
    padding: 10px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    margin-top: 10px;
}

.login-page button:hover {
    background-color: #0056b3;
}

.login-page .toggle-link {
    text-align: center;
    margin-top: 15px;
}

.login-page .toggle-link a {
    color: #007BFF;
    text-decoration: none;
    cursor: pointer;
}

.login-page .toggle-link a:hover {
    text-decoration: underline;
}

.login-page #toast-container > .toast-success {
    background-color: #28a745;
    border-color: #218838;
}

.login-page #toast-container > .toast-error {
    background-color: #dc3545;
    border-color: #c82333;
}

.login-page .custom-login-notice {
    background-color: #f0e68c;
    border: 2px dashed #4682b4;
    padding: 15px;
    border-radius: 10px;
    box-shadow: 3px 3px 5px rgba(0, 0, 0, 0.2);
    font-family: 'Courier New', Courier, monospace;
    color: #2f4f4f;
    transition: transform 0.3s ease-in-out;
    margin-bottom: 30px;
}

.login-page .custom-login-notice .highlight {
    color: #007BFF;
    font-weight: bold;
}

.login-page .custom-login-notice:hover {
    transform: scale(1.02);
}

/* New styles for "My Account" section */
.settings-form {
    max-width: 400px;
    margin: 20px auto;
    padding: 20px;
    background-color: #f9f9f9;
    border-radius: 8px;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
}

.settings-form label {
    display: block;
    margin-bottom: 5px;
    font-weight: bold;
    color: #333;
}

.settings-form input[type="text"],
.settings-form input[type="url"],
.settings-form input[type="email"],
.settings-form input[type="password"] {
    width: 100%;
    padding: 8px;
    margin-bottom: 15px;
    border: 1px solid #ccc;
    border-radius: 4px;
    box-sizing: border-box;
}

.settings-form button {
    background-color: #007BFF;
    color: white;
    padding: 10px 20px;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
}

.settings-form button:hover {
    background-color: #0056b3;
}

.password-container {
    position: relative;
}

.password-toggle {
    position: absolute;
    right: 10px;
    top: 50%;
    transform: translateY(-50%);
    cursor: pointer;
    color: #666;
    font-size: 16px;
}

.password-toggle:hover {
    color: #007BFF;
}

.settings-form button i {
    margin-right: 5px;
}


