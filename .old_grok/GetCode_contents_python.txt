+ [GetCode]
+----getcode.py
+----log.txt

getcode.py
import os
import sys
import mimetypes
import logging
import re
import json
import ctypes
import tkinter as tk
from tkinter import ttk, messagebox
import shutil
import subprocess

# Set up logging to a file in the script's directory
script_dir = os.path.dirname(os.path.abspath(__file__))
log_file = os.path.join(script_dir, "log.txt")
logging.basicConfig(filename=log_file, level=logging.DEBUG, 
                    format='%(asctime)s - %(levelname)s - %(message)s')

# Log the script's execution path for debugging
logging.info(f"Script executed from: {sys.executable}")
logging.info(f"Script path: {os.path.abspath(__file__)}")

# Track files written to in this runtime to determine delete vs append
WRITTEN_FILES = set()

# Default configuration in case config.json is missing or empty
DEFAULT_CONFIG = {
    "content_types": {
        "ALL": [".txt", ".css", ".json", ".xml", ".config", ".html", ".htm", ".js", ".md", ".csv", 
                ".ini", ".yaml", ".yml", ".py", ".java", ".c", ".cpp", ".h", ".cs", ".rb", ".php", 
                ".go", ".rs", ".ts", ".swift", ".kt", ".sh", ".bat", ".pl", ".lua", ".r", ".sql",".inc"],
        "TEXT": [".txt"],
        "CSS": [".css"],
        "JSON": [".json"],
        "XML": [".xml"],
        "CONFIG": [".config", ".ini", ".yaml", ".yml", ".json"],
        "HTML": [".html", ".htm",".inc"],
        "JAVASCRIPT": [".js"],
        "MARKDOWN": [".md"],
        "CSV": [".csv"],
        "PYTHON": [".py"],
        "JAVA": [".java"],
        "C": [".c", ".h"],
        "CPP": [".cpp", ".h"],
        "CSHARP": [".cs"],
        "RUBY": [".rb"],
        "PHP": [".php"],
        "GO": [".go"],
        "RUST": [".rs"],
        "TYPESCRIPT": [".ts"],
        "SWIFT": [".swift"],
        "KOTLIN": [".kt"],
        "SHELL": [".sh", ".bat"],
        "PERL": [".pl"],
        "LUA": [".lua"],
        "R": [".r"],
        "SQL": [".sql"]
    },
    "languages": {
        "all": "ALL",
        "python": [".py"],
        "java": [".java"],
        "c": [".c", ".h"],
        "cpp": [".cpp", ".h"],
        "csharp": [".cs"],
        "javascript": [".js"],
        "typescript": [".ts"],
        "php": [".php"],
        "ruby": [".rb"],
        "go": [".go"],
        "swift": [".swift"],
        "kotlin": [".kt"]
    },
    "function_patterns": {
        ".py": "^\\s*def\\s+(\\w+)\\s*\\((.*?)\\):(.*?)(?=\\n\\s*def|\\n\\s*class|\\Z)",
        ".java": "^\\s*(?:public|private|protected|static|\\s)*\\s*\\w+\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".c": "^\\s*\\w+\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".cpp": "^\\s*(?:\\w+::)?\\w+\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".h": "^\\s*\\w+\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".cs": "^\\s*(?:public|private|protected|static|\\s)*\\s*\\w+\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".js": "^\\s*(?:function\\s+(\\w+)\\s*\\((.*?)\\)|const\\s+(\\w+)\\s*=\\s*\\((.*?)\\)\\s*=>\\s*)\\s*{(.*?)}",
        ".ts": "^\\s*(?:function\\s+(\\w+)\\s*\\((.*?)\\)|const\\s+(\\w+)\\s*=\\s*\\((.*?)\\)\\s*=>\\s*)\\s*{(.*?)}",
        ".php": "^\\s*function\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".rb": "^\\s*def\\s+(\\w+)\\s*(\\([^)]*\\))?(.*?)(?=^\\s*def|\\s*end|\\Z)",
        ".go": "^\\s*func\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".swift": "^\\s*func\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}",
        ".kt": "^\\s*fun\\s+(\\w+)\\s*\\((.*?)\\)\\s*{(.*?)}"
    },
    "function_formats": {
        ".py": "def {func_name}({params}):\n    {body}",
        ".java": "{func_name}({params}) {{\n    {body}\n}}",
        ".c": "{func_name}({params}) {{\n    {body}\n}}",
        ".cpp": "{func_name}({params}) {{\n    {body}\n}}",
        ".h": "{func_name}({params}) {{\n    {body}\n}}",
        ".cs": "{func_name}({params}) {{\n    {body}\n}}",
        ".js": "function {func_name}({params}) {{\n    {body}\n}}",
        ".js_arrow": "const {func_name} = ({params}) => {{\n    {body}\n}}",
        ".ts": "function {func_name}({params}) {{\n    {body}\n}}",
        ".ts_arrow": "const {func_name} = ({params}) => {{\n    {body}\n}}",
        ".php": "function {func_name}({params}) {{\n    {body}\n}}",
        ".rb": "def {func_name}{params}\n    {body}\nend",
        ".go": "func {func_name}({params}) {{\n    {body}\n}}",
        ".swift": "func {func_name}({params}) {{\n    {body}\n}}",
        ".kt": "fun {func_name}({params}) {{\n    {body}\n}}"
    },
    "ignore_items": {
        "dirs": [".git", "__pycache__", "build", "dist", "node_modules", "venv", ".venv", 
                 ".idea", ".vscode", ".pytest_cache", ".tox", ".cache"],
        "files": [".gitignore", ".gitattributes", ".gitmodules", ".pyc", ".pyo", ".pyd", 
                  ".DS_Store", ".coverage", "coverage", "htmlcov", "getcode.json"],
        "generated_prefixes": ["_contents_"],
        "generated_suffixes": ["_dir.txt", "_functions.txt"]
    }
}

# Load configuration from JSON file
config_path = os.path.join(script_dir, "config.json")
if not os.path.exists(config_path) or os.path.getsize(config_path) == 0:
    try:
        with open(config_path, 'w', encoding='utf-8') as config_file:
            json.dump(DEFAULT_CONFIG, config_file, indent=4)
        logging.info(f"Created default config.json at: {config_path}")
    except Exception as e:
        logging.error(f"Failed to create default config.json: {e}")
        ctypes.windll.user32.MessageBoxW(0, f"Failed to create default config.json: {str(e)}", "Error", 0x10)
        sys.exit(1)

try:
    with open(config_path, 'r', encoding='utf-8') as config_file:
        CONFIG = json.load(config_file)
except json.JSONDecodeError as e:
    logging.error(f"Failed to parse config.json: {e}")
    ctypes.windll.user32.MessageBoxW(0, f"Failed to parse config.json: {str(e)}", "Error", 0x10)
    sys.exit(1)
except Exception as e:
    logging.error(f"Failed to load config.json: {e}")
    ctypes.windll.user32.MessageBoxW(0, f"Failed to load config.json: {str(e)}", "Error", 0x10)
    sys.exit(1)

CONTENT_TYPES = {k: set(v) for k, v in CONFIG["content_types"].items()}
LANGUAGES = {k: set(v) if k != "all" else CONTENT_TYPES["ALL"] for k, v in CONFIG["languages"].items()}
FUNCTION_PATTERNS = CONFIG["function_patterns"]
FUNCTION_FORMATS = CONFIG["function_formats"]
IGNORE_DIRS = set(CONFIG["ignore_items"]["dirs"])
IGNORE_FILES = set(CONFIG["ignore_items"]["files"])
GENERATED_PREFIXES = CONFIG["ignore_items"]["generated_prefixes"]
GENERATED_SUFFIXES = CONFIG["ignore_items"]["generated_suffixes"]

# Step 1: Check for the .reg file (install.reg) and create it if missing
reg_file_path = os.path.join(script_dir, "install.reg")
if not os.path.exists(reg_file_path):
    pythonw_path = shutil.which("pythonw.exe")
    if not pythonw_path:
        error_msg = "pythonw.exe not found in PATH. Please ensure Python is installed and pythonw.exe is accessible."
        logging.error(error_msg)
        ctypes.windll.user32.MessageBoxW(0, error_msg, "Error", 0x10)
        sys.exit(1)

    pythonw_path = pythonw_path.replace("\\", "\\\\")
    getcode_path = os.path.join(script_dir, "getcode.py").replace("\\", "\\\\")

    reg_content = f"""Windows Registry Editor Version 5.00

[-HKEY_CLASSES_ROOT\\Directory\\shell\\GetAllCode]
[-HKEY_CLASSES_ROOT\\Directory\\shell\\GetAllCode_Directory]
[-HKEY_CLASSES_ROOT\\Directory\\shell\\GetAllCode_Contents]
[-HKEY_CLASSES_ROOT\\Directory\\shell\\GetAllCode_Functions]
[-HKEY_CLASSES_ROOT\\Directory\\shell\\GetAllCodeAHK]

[HKEY_CLASSES_ROOT\\Directory\\shell\\GetAllCode]
@="Get All Code"

[HKEY_CLASSES_ROOT\\Directory\\shell\\GetAllCode\\command]
@="\\"{pythonw_path}\\" \\"{getcode_path}\\" \\"%1\\""
"""

    try:
        with open(reg_file_path, "w", encoding="utf-8") as reg_file:
            reg_file.write(reg_content)
        logging.info(f"Created install.reg at: {reg_file_path}")
    except Exception as e:
        error_msg = f"Failed to create install.reg at {reg_file_path}: {str(e)}"
        logging.error(error_msg)
        ctypes.windll.user32.MessageBoxW(0, error_msg, "Error", 0x10)
        sys.exit(1)

    try:
        subprocess.run(['reg', 'import', reg_file_path], check=True, shell=True)
        logging.info("Successfully applied install.reg.")
    except Exception as e:
        error_msg = f"Failed to apply install.reg as administrator: {str(e)}\nPlease run the script with administrative privileges or apply install.reg manually."
        logging.error(error_msg)
        ctypes.windll.user32.MessageBoxW(0, error_msg, "Error", 0x10)
        sys.exit(1)

# Step 3: Check if a directory is specified
if len(sys.argv) < 2:
    logging.info("No directory specified. Exiting.")
    sys.exit(0)

def is_text_file(filepath, content_type='ALL', language=None):
    logging.debug(f"Checking if {filepath} is a text file with content_type {content_type} and language {language}")
    _, ext = os.path.splitext(filepath)
    if ext.lower() in {'.pyc'}:
        return False
    
    mime_type, _ = mimetypes.guess_type(filepath)
    is_mime_text = mime_type and mime_type.startswith('text')
    is_ext_text = ext.lower() in CONTENT_TYPES.get(content_type.upper(), set())
    logging.debug(f"File: {filepath}, MIME: {mime_type}, is_mime_text: {is_mime_text}, is_ext_text: {is_ext_text}")
    
    if language and language.lower() in LANGUAGES:
        return is_mime_text or (is_ext_text and ext.lower() in LANGUAGES[language.lower()])
    return is_mime_text or is_ext_text

def extract_function_definitions(file_content, ext):
    """Extract complete function definitions including their bodies from designated code files only."""
    if ext.lower() in CONTENT_TYPES["CONFIG"] or ext.lower() == '.txt':
        return []  # Exclude config files and .txt from function extraction
    pattern = FUNCTION_PATTERNS.get(ext)
    if not pattern:
        return []

    functions = []
    for match in re.finditer(pattern, file_content, re.MULTILINE | re.DOTALL):
        if ext in {'.js', '.ts'}:
            func_name = match.group(1) or match.group(3)
            params = match.group(2) or match.group(4)
            body = match.group(5)
            format_key = f"{ext}_arrow" if match.group(3) else ext
        elif ext in {'.rb'}:
            func_name = match.group(1)
            params = match.group(2) or ''
            body = match.group(3)
            format_key = ext
        else:
            func_name = match.group(1)
            params = match.group(2)
            body = match.group(3)
            format_key = ext
        
        body = body.strip()
        full_text = FUNCTION_FORMATS[format_key].format(func_name=func_name, params=params, body=body)
        functions.append(full_text)
    return functions

def should_ignore(item, is_dir=False):
    """Check if a file or directory should be ignored, including dynamically generated files"""
    basename = item if is_dir else os.path.basename(item).lower()
    is_generated_file = any(basename.startswith(prefix) for prefix in GENERATED_PREFIXES) or \
                       any(basename.endswith(suffix) for suffix in GENERATED_SUFFIXES)
    
    if is_dir:
        return basename.lower() in IGNORE_DIRS
    
    # Dynamically check for generated files
    root_name = os.path.basename(os.path.dirname(item)).lower() if not is_dir else ""
    if not is_dir:
        if basename == f"{root_name}_dir.txt":
            return True
        for content_type in CONTENT_TYPES.keys():
            if basename == f"{root_name}_contents_{content_type.lower()}.txt":
                return True
        for language in LANGUAGES.keys():
            if basename == f"{root_name}_functions_{language.lower()}.txt":
                return True
    
    return basename in IGNORE_FILES or is_generated_file

def has_relevant_files(dir_path, content_type='ALL', language=None, check_functions=False):
    """Check if a directory contains relevant files or subdirs with relevant files"""
    try:
        for item in os.listdir(dir_path):
            item_path = os.path.join(dir_path, item)
            logging.debug(f"Found file: {item_path}, is_text: {is_text_file(item_path, content_type, language)}")
            if os.path.isfile(item_path) and not should_ignore(item):
                if is_text_file(item_path, content_type, language):
                    if check_functions:
                        _, ext = os.path.splitext(item_path)
                        if ext.lower() in FUNCTION_PATTERNS:
                            with open(item_path, 'r', encoding='utf-8') as f:
                                content = f.read()
                            if extract_function_definitions(content, ext):
                                return True
                    else:
                        return True
            elif os.path.isdir(item_path) and not should_ignore(item, is_dir=True):
                if has_relevant_files(item_path, content_type, language, check_functions):
                    return True
        return False
    except PermissionError:
        return False

def get_folder_structure(root_path, content_type='ALL', language=None, check_functions=False):
    """Generate ASCII representation of folder structure with only relevant folders and files"""
    structure = []
    root_name = os.path.basename(root_path)
    structure.append(f"+ [{root_name}]")
    
    try:
        items = sorted(os.listdir(root_path))
        logging.info(f"Items in {root_path}: {items}")
    except PermissionError as e:
        logging.error(f"PermissionError accessing {root_path}: {e}")
        return structure
    
    for item in items:
        item_path = os.path.join(root_path, item)
        if should_ignore(item, is_dir=True):
            logging.info(f"Skipping ignored directory: {item_path}")
            continue
        if os.path.isdir(item_path):
            if has_relevant_files(item_path, content_type, language, check_functions):
                structure.append(f"+----[{item}]")
                try:
                    sub_items = sorted(os.listdir(item_path))
                    for sub_item in sub_items:
                        sub_item_path = os.path.join(item_path, sub_item)
                        if os.path.isfile(sub_item_path) and not should_ignore(sub_item) and is_text_file(sub_item_path, content_type, language):
                            if check_functions:
                                _, ext = os.path.splitext(sub_item_path)
                                if ext.lower() in FUNCTION_PATTERNS:
                                    with open(sub_item_path, 'r', encoding='utf-8') as f:
                                        content = f.read()
                                    if extract_function_definitions(content, ext):
                                        structure.append(f"+------{sub_item}")
                            else:
                                structure.append(f"+------{sub_item}")
                except PermissionError as e:
                    logging.error(f"PermissionError accessing {item_path}: {e}")
        elif os.path.isfile(item_path) and not should_ignore(item) and is_text_file(item_path, content_type, language):
            if check_functions:
                _, ext = os.path.splitext(item_path)
                if ext.lower() in FUNCTION_PATTERNS:
                    with open(item_path, 'r', encoding='utf-8') as f:
                        content = f.read()
                    if extract_function_definitions(content, ext):
                        structure.append(f"+----{item}")
            else:
                structure.append(f"+----{item}")
    
    return structure if len(structure) > 1 else [f"+ [{root_name}]"]

def get_file_contents(root_path, content_type='ALL', language=None):
    """Collect contents of text files from root and immediate subdirs, matching the specified content type"""
    contents = []
    
    try:
        for item in os.listdir(root_path):
            item_path = os.path.join(root_path, item)
            if os.path.isfile(item_path) and not should_ignore(item) and is_text_file(item_path, content_type, language):
                rel_path = os.path.basename(item_path)
                try:
                    with open(item_path, 'r', encoding='utf-8') as f:
                        file_content = f.read()
                    contents.append((rel_path, file_content))
                    logging.info(f"Added root file: {item_path}")
                except (IOError, UnicodeDecodeError) as e:
                    logging.error(f"Error reading file {item_path}: {e}")
            
            elif os.path.isdir(item_path) and not should_ignore(item, is_dir=True):
                for sub_item in os.listdir(item_path):
                    sub_item_path = os.path.join(item_path, sub_item)
                    if os.path.isfile(sub_item_path) and not should_ignore(sub_item) and is_text_file(sub_item_path, content_type, language):
                        rel_path = f"{item}/{sub_item}"
                        try:
                            with open(sub_item_path, 'r', encoding='utf-8') as f:
                                file_content = f.read()
                            contents.append((rel_path, file_content))
                            logging.info(f"Added subdir file: {sub_item_path}")
                        except (IOError, UnicodeDecodeError) as e:
                            logging.error(f"Error reading file {sub_item_path}: {e}")
    except PermissionError as e:
        logging.error(f"PermissionError accessing {root_path}: {e}")
    
    return contents

def show_file_in_notepad(file_path):
    """Attempt to open the file in Notepad and show error if it fails"""
    try:
        os.startfile(file_path)
        logging.info(f"Opened {file_path} in Notepad")
    except Exception as e:
        error_msg = f"Failed to open {file_path} in Notepad: {str(e)}"
        logging.error(error_msg)
        ctypes.windll.user32.MessageBoxW(0, error_msg, "Error", 0x10)

def create_dir_file(root_path, content_type, output_dir=None, show_in_notepad=True):
    """Create or append to the directory listing output file and display it, filtered by content_type"""
    root_name = os.path.basename(os.path.abspath(root_path))
    output_file = os.path.join(output_dir or root_path, f"{root_name}_dir.txt")
    structure = get_folder_structure(root_path, content_type)
    
    mode = 'a' if output_file in WRITTEN_FILES else 'w'
    if mode == 'w' and os.path.exists(output_file):
        os.remove(output_file)
    with open(output_file, mode, encoding='utf-8') as f:
        if mode == 'a':
            f.write("\r\n\r\n")
        f.write('\n'.join(structure))
    WRITTEN_FILES.add(output_file)
    logging.info(f"Directory listing file {'appended to' if mode == 'a' else 'created at'}: {output_file}")
    if show_in_notepad:
        show_file_in_notepad(output_file)

def create_contents_file(root_path, content_type, output_dir=None, show_in_notepad=True):
    """Create or append to the contents output file with content_type in filename and display it"""
    root_name = os.path.basename(os.path.abspath(root_path))
    output_file = os.path.join(output_dir or root_path, f"{root_name}_contents_{content_type.lower()}.txt")
    structure = get_folder_structure(root_path, content_type)
    file_contents = get_file_contents(root_path, content_type)
    
    mode = 'a' if output_file in WRITTEN_FILES else 'w'
    if mode == 'w' and os.path.exists(output_file):
        os.remove(output_file)
    with open(output_file, mode, encoding='utf-8') as f:
        if mode == 'a':
            f.write("\r\n\r\n")
        f.write('\n'.join(structure))
        f.write('\n\n')
        for rel_path, content in file_contents:
            f.write(f"{rel_path}\r\n")
            f.write(f"{content}\r\n")
    WRITTEN_FILES.add(output_file)
    logging.info(f"Contents file {'appended to' if mode == 'a' else 'created at'}: {output_file}")
    if show_in_notepad:
        show_file_in_notepad(output_file)

def create_functions_file(root_path, language, output_dir=None, show_in_notepad=True):
    """Create or append to the functions output file with complete function definitions and display it"""
    root_name = os.path.basename(os.path.abspath(root_path))
    output_file = os.path.join(output_dir or root_path, f"{root_name}_functions_{language.lower()}.txt")
    file_contents = get_file_contents(root_path, 'ALL', language)
    
    filtered_contents = []
    function_file_paths = set()
    for rel_path, content in file_contents:
        _, ext = os.path.splitext(rel_path)
        if ext.lower() in FUNCTION_PATTERNS:
            functions = extract_function_definitions(content, ext)
            if functions:
                filtered_contents.append((rel_path, functions))
                function_file_paths.add(rel_path)
    
    structure = get_folder_structure(root_path, 'ALL', language, check_functions=True)
    
    mode = 'a' if output_file in WRITTEN_FILES else 'w'
    if mode == 'w' and os.path.exists(output_file):
        os.remove(output_file)
    with open(output_file, mode, encoding='utf-8') as f:
        if mode == 'a':
            f.write("\r\n\r\n")
        f.write('\n'.join(structure))
        f.write('\n\n')
        for rel_path, functions in filtered_contents:
            f.write(f"+-{rel_path}\n")
            for function in functions:
                f.write(f"{function}\n")
            f.write('\n')
    WRITTEN_FILES.add(output_file)
    logging.info(f"Functions file {'appended to' if mode == 'a' else 'created at'}: {output_file}")
    if show_in_notepad:
        show_file_in_notepad(output_file)

def find_getcode_files(root_path):
    """Recursively find all getcode.json files in root_path and subfolders"""
    getcode_files = []
    for root, dirs, files in os.walk(root_path):
        if "getcode.json" in files and not should_ignore(root, is_dir=True):
            getcode_files.append(os.path.join(root, "getcode.json"))
    return getcode_files

def process_settings_from_file(file_path):
    """Process all settings from a getcode.json file"""
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            settings = json.load(f)
        for entry in settings:
            mode = entry["mode"]
            content_type = entry["content_type"]
            output_dir = entry["output_directory"]
            if not os.path.isdir(output_dir):
                os.makedirs(output_dir, exist_ok=True)
            if mode == "dir":
                create_dir_file(os.path.dirname(file_path), content_type, output_dir, show_in_notepad=False)
            elif mode == "contents":
                create_contents_file(os.path.dirname(file_path), content_type, output_dir, show_in_notepad=False)
            elif mode == "functions":
                create_functions_file(os.path.dirname(file_path), content_type, output_dir, show_in_notepad=False)
    except Exception as e:
        logging.error(f"Failed to process settings from {file_path}: {e}")
        raise

class GetCodeGUI:
    def __init__(self, folder_path):
        self.folder_path = folder_path
        self.root = tk.Tk()
        self.root.title("Get All Code")

        # Set the size and center the dialog before displaying
        width = 250
        height = 420
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        x = (screen_width // 2) - (width // 2)
        y = (screen_height // 2) - (height // 2)
        self.root.geometry(f"{width}x{height}+{x}+{y}")
        self.root.resizable(False, False)  # Toolbox style: non-resizable

        # Mode selection
        self.mode_var = tk.StringVar(value="dir")
        mode_label = tk.Label(self.root, text="**Select Mode:**", font=("TkDefaultFont", 9, "bold"))
        mode_label.pack(pady=5, anchor="w", padx=10)
        tk.Radiobutton(self.root, text="Directory", variable=self.mode_var, value="dir", command=self.update_content_types).pack(anchor="w", padx=20)
        tk.Radiobutton(self.root, text="Contents", variable=self.mode_var, value="contents", command=self.update_content_types).pack(anchor="w", padx=20)
        tk.Radiobutton(self.root, text="Functions", variable=self.mode_var, value="functions", command=self.update_content_types).pack(anchor="w", padx=20)
        tk.Radiobutton(self.root, text="Update from Settings", variable=self.mode_var, value="update", command=self.update_content_types).pack(anchor="w", padx=20)

        # Content type selection
        content_label = tk.Label(self.root, text="**Select Content Type:**", font=("TkDefaultFont", 9, "bold"))
        content_label.pack(pady=5, anchor="w", padx=10)
        self.content_type_var = tk.StringVar(value="ALL")
        self.content_type_dropdown = ttk.Combobox(self.root, textvariable=self.content_type_var, state="readonly")
        self.content_type_dropdown.pack(pady=5, padx=10, fill="x")

        # Content types for each mode
        self.content_types = {
            "dir": list(CONTENT_TYPES.keys()),
            "contents": list(CONTENT_TYPES.keys()),
            "functions": list(LANGUAGES.keys()),
            "update": [""]
        }

        # Save settings frame
        self.save_frame = tk.LabelFrame(self.root, text="Save Options")
        self.save_frame.pack(pady=5, padx=10, fill="x")
        
        self.save_settings_var = tk.BooleanVar(value=False)
        self.save_settings_check = tk.Checkbutton(self.save_frame, text="Save Settings", variable=self.save_settings_var, command=self.toggle_save_options)
        self.save_settings_check.pack(anchor="w", padx=5, pady=2)

        self.output_dir_label = tk.Label(self.save_frame, text="Output Directory:")
        self.output_dir_label.pack(anchor="w", padx=5, pady=2)
        self.output_dir_var = tk.StringVar(value=self.folder_path)
        self.output_dir_entry = tk.Entry(self.save_frame, textvariable=self.output_dir_var, state="disabled")
        self.output_dir_entry.pack(padx=5, pady=2, fill="x")

        self.save_as_label = tk.Label(self.save_frame, text="Save As:")
        self.save_as_label.pack(anchor="w", padx=5, pady=2)
        self.save_as_var = tk.StringVar()
        self.save_as_entry = tk.Entry(self.save_frame, textvariable=self.save_as_var, state="disabled")
        self.save_as_entry.pack(padx=5, pady=2, fill="x")

        # Initialize content types and save as default
        self.update_content_types()

        # Load settings from getcode.json if it exists
        self.load_settings()

        # Buttons frame
        button_frame = tk.Frame(self.root)
        button_frame.pack(pady=10)
        tk.Button(button_frame, text="OK", command=self.on_ok, width=8).pack(side=tk.LEFT, padx=5)
        tk.Button(button_frame, text="Cancel", command=self.on_cancel, width=8).pack(side=tk.LEFT, padx=5)

    def update_content_types(self):
        mode = self.mode_var.get()
        self.content_type_dropdown['values'] = self.content_types[mode]
        if mode == "dir" and not self.content_type_var.get():
            self.content_type_var.set("ALL")
        elif mode == "contents" and not self.content_type_var.get():
            self.content_type_var.set("ALL")
        elif mode == "functions" and not self.content_type_var.get():
            self.content_type_var.set("all")
        elif mode == "update":
            self.content_type_var.set("")
            self.content_type_dropdown.config(state="disabled")
            self.save_settings_check.config(state="disabled")
            self.output_dir_entry.config(state="disabled")
            self.save_as_entry.config(state="disabled")
        else:
            self.content_type_dropdown.config(state="readonly")
            self.save_settings_check.config(state="normal")
            self.toggle_save_options()
        self.update_save_as_default()

    def update_save_as_default(self):
        mode = self.mode_var.get()
        if mode == "update":
            self.save_as_var.set("")
            return
        content_type = self.content_type_var.get()
        root_name = os.path.basename(self.folder_path)
        if mode == "dir":
            self.save_as_var.set(f"{root_name}_dir.txt")
        elif mode == "contents":
            self.save_as_var.set(f"{root_name}_contents_{content_type.lower()}.txt")
        elif mode == "functions":
            self.save_as_var.set(f"{root_name}_functions_{content_type.lower()}.txt")

    def toggle_save_options(self):
        if self.mode_var.get() == "update":
            return
        state = "normal" if self.save_settings_var.get() else "disabled"
        self.output_dir_entry.config(state=state)
        self.save_as_entry.config(state=state)

    def load_settings(self):
        settings_file = os.path.join(self.folder_path, "getcode.json")
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
                mode = self.mode_var.get()
                content_type = self.content_type_var.get()
                for entry in settings:
                    if entry["mode"] == mode and entry["content_type"] == content_type:
                        self.output_dir_var.set(entry["output_directory"])
                        self.save_as_var.set(entry["save_as"])
                        break
            except Exception as e:
                logging.error(f"Failed to load settings from {settings_file}: {e}")

    def save_settings(self):
        if not self.save_settings_var.get() or self.mode_var.get() == "update":
            return
        settings_file = os.path.join(self.folder_path, "getcode.json")
        settings = []
        if os.path.exists(settings_file):
            try:
                with open(settings_file, 'r', encoding='utf-8') as f:
                    settings = json.load(f)
            except Exception as e:
                logging.error(f"Failed to read existing settings from {settings_file}: {e}")
        
        new_entry = {
            "mode": self.mode_var.get(),
            "content_type": self.content_type_var.get(),
            "output_directory": self.output_dir_var.get(),
            "save_as": self.save_as_var.get()
        }
        
        updated = False
        for i, entry in enumerate(settings):
            if entry["mode"] == new_entry["mode"] and entry["content_type"] == new_entry["content_type"]:
                settings[i] = new_entry
                updated = True
                break
        if not updated:
            settings.append(new_entry)
        
        try:
            with open(settings_file, 'w', encoding='utf-8') as f:
                json.dump(settings, f, indent=4)
            logging.info(f"Saved settings to {settings_file}")
        except Exception as e:
            logging.error(f"Failed to save settings to {settings_file}: {e}")
            messagebox.showerror("Error", f"Failed to save settings: {str(e)}")

    def on_ok(self):
        mode = self.mode_var.get()
        content_type = self.content_type_var.get()

        if mode != "update" and not content_type:
            messagebox.showerror("Error", "Please select a content type.")
            return

        self.root.withdraw()
        try:
            if mode == "dir":
                create_dir_file(self.folder_path, content_type)
            elif mode == "contents":
                create_contents_file(self.folder_path, content_type)
            elif mode == "functions":
                create_functions_file(self.folder_path, content_type)
            elif mode == "update":
                getcode_files = find_getcode_files(self.folder_path)
                if not getcode_files:
                    messagebox.showinfo("Info", "No getcode.json files found in the directory or subdirectories.")
                for file_path in getcode_files:
                    process_settings_from_file(file_path)
            self.save_settings()
            self.root.destroy()
        except Exception as e:
            messagebox.showerror("Error", f"Failed to complete operation: {str(e)}")
            self.root.destroy()

    def on_cancel(self):
        self.root.destroy()

    def run(self):
        self.root.mainloop()

if __name__ == "__main__":
    try:
        logging.info(f"Script started with arguments: {sys.argv}")
        root_path = sys.argv[1]
        if not os.path.isdir(root_path):
            logging.error(f"Invalid directory path: {root_path}")
            print(f"Error: Invalid directory path: {root_path}")
            sys.exit(1)

        # If only the folder path is provided (context menu), open the GUI
        if len(sys.argv) == 2:
            logging.info("Attempting to open GUI for context menu invocation")
            try:
                app = GetCodeGUI(root_path)
                logging.info("GUI instance created successfully")
                app.run()
                logging.info("GUI run completed")
            except Exception as e:
                logging.error(f"Failed to open GUI: {str(e)}")
                print(f"Error: Failed to open GUI: {str(e)}")
                sys.exit(1)
        else:
            # Command-line invocation with mode and optional content type/language
            mode = sys.argv[2].lower()
            valid_languages = set(LANGUAGES.keys())
            valid_content_types = set(CONTENT_TYPES.keys())

            if mode == 'dir':
                if len(sys.argv) != 4:
                    raise ValueError("Dir mode requires a content_type parameter")
                content_type = sys.argv[3].upper()
                if content_type not in valid_content_types:
                    RisValueError(f"Content type must be one of: {', '.join(valid_content_types)}")
                create_dir_file(root_path, content_type)
                print(f"Successfully created directory listing file in {root_path}")

            elif mode == 'functions':
                if len(sys.argv) != 4:
                    raise ValueError("Functions mode requires a language parameter")
                language = sys.argv[3].lower()
                if language not in valid_languages:
                    raise ValueError(f"Language must be one of: {', '.join(valid_languages)}")
                create_functions_file(root_path, language)
                print(f"Successfully created functions file for {language} in {root_path}")

            elif mode == 'contents':
                if len(sys.argv) != 4:
                    raise ValueError("Contents mode requires a content_type parameter")
                content_type = sys.argv[3].upper()
                if content_type not in valid_content_types:
                    raise ValueError(f"Content type must be one of: {', '.join(valid_content_types)}")
                create_contents_file(root_path, content_type)
                print(f"Successfully created contents file for {content_type} in {root_path}")

            elif mode == 'update':
                getcode_files = find_getcode_files(root_path)
                if not getcode_files:
                    logging.info("No getcode.json files found in the directory or subdirectories.")
                    print("No getcode.json files found in the directory or subdirectories.")
                for file_path in getcode_files:
                    process_settings_from_file(file_path)
                print(f"Successfully processed settings for {root_path}")

            else:
                raise ValueError("Mode must be 'dir', 'functions', 'contents', or 'update'")

    except Exception as e:
        logging.error(f"Script failed: {e}")
        print(f"Error: {str(e)}")
        sys.exit(1)
log.txt
2025-03-29 08:50:02,774 - INFO - Script executed from: C:\Python\Python312\pythonw.exe
2025-03-29 08:50:02,775 - INFO - Script path: C:\GetCode\getcode.py
2025-03-29 08:50:02,776 - INFO - Script started with arguments: ['C:\\GetCode\\getcode.py', 'C:\\GetCode']
2025-03-29 08:50:02,776 - INFO - Attempting to open GUI for context menu invocation
2025-03-29 08:50:02,924 - INFO - GUI instance created successfully
2025-03-29 08:50:06,076 - INFO - Items in C:\GetCode: ['RunGetCodeOnIISSiteStart.ps1', 'config.json', 'getcode.json', 'getcode.py', 'install.reg', 'log.txt']
2025-03-29 08:50:06,076 - DEBUG - Checking if C:\GetCode\RunGetCodeOnIISSiteStart.ps1 is a text file with content_type python and language None
2025-03-29 08:50:06,107 - DEBUG - File: C:\GetCode\RunGetCodeOnIISSiteStart.ps1, MIME: None, is_mime_text: None, is_ext_text: False
2025-03-29 08:50:06,108 - DEBUG - Checking if C:\GetCode\config.json is a text file with content_type python and language None
2025-03-29 08:50:06,108 - DEBUG - File: C:\GetCode\config.json, MIME: application/json, is_mime_text: False, is_ext_text: False
2025-03-29 08:50:06,108 - DEBUG - Checking if C:\GetCode\getcode.json is a text file with content_type python and language None
2025-03-29 08:50:06,108 - DEBUG - File: C:\GetCode\getcode.json, MIME: application/json, is_mime_text: False, is_ext_text: False
2025-03-29 08:50:06,108 - DEBUG - Checking if C:\GetCode\getcode.py is a text file with content_type python and language None
2025-03-29 08:50:06,108 - DEBUG - File: C:\GetCode\getcode.py, MIME: text/x-python, is_mime_text: True, is_ext_text: True
2025-03-29 08:50:06,109 - DEBUG - Checking if C:\GetCode\install.reg is a text file with content_type python and language None
2025-03-29 08:50:06,109 - DEBUG - File: C:\GetCode\install.reg, MIME: None, is_mime_text: None, is_ext_text: False
2025-03-29 08:50:06,109 - DEBUG - Checking if C:\GetCode\log.txt is a text file with content_type python and language None
2025-03-29 08:50:06,109 - DEBUG - File: C:\GetCode\log.txt, MIME: text/plain, is_mime_text: True, is_ext_text: False
2025-03-29 08:50:06,109 - DEBUG - Checking if C:\GetCode\config.json is a text file with content_type python and language None
2025-03-29 08:50:06,109 - DEBUG - File: C:\GetCode\config.json, MIME: application/json, is_mime_text: False, is_ext_text: False
2025-03-29 08:50:06,110 - DEBUG - Checking if C:\GetCode\getcode.json is a text file with content_type python and language None
2025-03-29 08:50:06,110 - DEBUG - File: C:\GetCode\getcode.json, MIME: application/json, is_mime_text: False, is_ext_text: False
2025-03-29 08:50:06,110 - DEBUG - Checking if C:\GetCode\getcode.py is a text file with content_type python and language None
2025-03-29 08:50:06,110 - DEBUG - File: C:\GetCode\getcode.py, MIME: text/x-python, is_mime_text: True, is_ext_text: True
2025-03-29 08:50:06,111 - INFO - Added root file: C:\GetCode\getcode.py
2025-03-29 08:50:06,111 - DEBUG - Checking if C:\GetCode\install.reg is a text file with content_type python and language None
2025-03-29 08:50:06,111 - DEBUG - File: C:\GetCode\install.reg, MIME: None, is_mime_text: None, is_ext_text: False
2025-03-29 08:50:06,112 - DEBUG - Checking if C:\GetCode\log.txt is a text file with content_type python and language None
2025-03-29 08:50:06,112 - DEBUG - File: C:\GetCode\log.txt, MIME: text/plain, is_mime_text: True, is_ext_text: False

