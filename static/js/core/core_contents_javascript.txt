+ [core]
+----auth.js
+----cookies.js
+----core_contents_javascript.txt
+----logger.js
+----markdown.js
+----notifications.js

auth.js
// auth.js
import { log as loggerLog, error as loggerError } from './logger.js';
import { getCookie as cookiesGetCookie, setCookie as cookiesSetCookie, deleteCookie as cookiesDeleteCookie } from './cookies.js';
import { success as notificationsSuccess, error as notificationsError } from './notifications.js';

let token = null;
let decoded = null;
let redirectCount = 0;
const maxRedirects = 2;

export function tokenManagerGetToken() {
    if (!token) {
        token = localStorage.getItem('authToken') || cookiesGetCookie('authToken');
        loggerLog(`tokenManagerGetToken - Token: ${token ? '[present]' : 'none'}`);
    }
    return token;
}

export function tokenManagerDecode() {
    if (!decoded && tokenManagerGetToken()) {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                throw new Error('Invalid JWT format');
            }
            const base64Url = parts[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(
                atob(base64)
                    .split('')
                    .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
                    .join('')
            );
            decoded = JSON.parse(jsonPayload);
            loggerLog('tokenManagerDecode - Decoded JWT:', decoded);
        } catch (error) {
            loggerError('tokenManagerDecode - Error decoding JWT:', error, 'Token:', token);
            decoded = null;
        }
    }
    return decoded;
}

export function tokenManagerSetToken(newToken) {
    token = newToken;
    localStorage.setItem('authToken', newToken);
    cookiesSetCookie('authToken', newToken, 7);
    decoded = null;
    loggerLog('tokenManagerSetToken - Token updated');
}

export function tokenManagerClear() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('userId');
    cookiesDeleteCookie('authToken');
    token = null;
    decoded = null;
    redirectCount = 0;
    loggerLog('tokenManagerClear - Auth data cleared');
}

export function tokenManagerIncrementRedirect() {
    redirectCount++;
    localStorage.setItem('redirectCount', redirectCount);
    loggerLog(`tokenManagerIncrementRedirect - Count: ${redirectCount}`);
    return redirectCount;
}

export function tokenManagerResetRedirect() {
    redirectCount = 0;
    localStorage.setItem('redirectCount', redirectCount);
    loggerLog('tokenManagerResetRedirect - Count reset');
}

export function tokenManagerCanRedirect() {
    const can = redirectCount <= maxRedirects;
    loggerLog(`tokenManagerCanRedirect - Count: ${redirectCount}, Max: ${maxRedirects}, Can: ${can}`);
    return can;
}

export async function authenticatedFetch(url, options = {}) {
    loggerLog(`authenticatedFetch - Fetching: ${url}`);
    const publicEndpoints = ['/', '/signup'];
    const isPublic = publicEndpoints.some(endpoint => url.includes(endpoint));
    loggerLog(`authenticatedFetch - Is public: ${isPublic}`);

    const token = tokenManagerGetToken();
    if (!token && !isPublic) {
        if (!tokenManagerCanRedirect()) {
            loggerError('authenticatedFetch - Redirect loop detected, clearing token');
            tokenManagerClear();
            window.location.href = '/';
            return null;
        }
        tokenManagerIncrementRedirect();
        loggerError('authenticatedFetch - No token, redirecting to /');
        notificationsError('Please log in to continue');
        window.location.href = '/';
        return null;
    }

    const headers = new Headers(options.headers || {});
    if (token) {
        headers.set('Authorization', `Bearer ${token}`);
    }
    headers.set('Content-Type', 'application/json');

    const fetchOptions = {
        ...options,
        headers
    };

    try {
        const response = await fetch(url, fetchOptions);
        loggerLog(`authenticatedFetch - Response status: ${response.status}`);
        if (!response.ok && !isPublic) {
            const errorData = await response.json();
            throw new Error(errorData.message || `Request failed with status ${response.status}`);
        }
        tokenManagerResetRedirect();
        return response;
    } catch (error) {
        loggerError('authenticatedFetch - Error:', error);
        if (!isPublic && tokenManagerCanRedirect()) {
            tokenManagerIncrementRedirect();
            notificationsError('Session expired, please log in');
            window.location.href = '/';
            return null;
        }
        throw error;
    }
}

export async function logout() {
    loggerLog('logout - Initiating');
    const confirmed = confirm('Are you sure you want to log off?');
    if (!confirmed) {
        loggerLog('logout - Cancelled by user');
        return;
    }

    try {
        loggerLog('logout - Sending /logoff request');
        const response = await fetch('/logoff', { method: 'GET' });
        const data = await response.json();
        if (data.status === 'success') {
            loggerLog('logout - Server confirmed logout');
            tokenManagerClear();
            sessionStorage.clear();
            notificationsSuccess('Logged off successfully');
            setTimeout(() => {
                window.location.href = data.redirect_url || '/';
                loggerLog('logout - Redirected to:', data.redirect_url || '/');
            }, 1000);
        } else {
            loggerError('logout - Server error:', data.message);
            notificationsError(data.message || 'Logout failed');
        }
    } catch (error) {
        loggerError('logout - Error:', error);
        notificationsError('Logout failed: ' + error.message);
        tokenManagerClear();
        window.location.href = '/';
    }
}

export function togglePassword(fieldId) {
    loggerLog(`togglePassword - Toggling field: ${fieldId}`);
    const input = document.getElementById(fieldId);
    const icon = input?.nextElementSibling;

    if (!input) {
        loggerError(`togglePassword - Input not found: ${fieldId}`);
        return;
    }
    if (!icon) {
        loggerError(`togglePassword - Icon not found for: ${fieldId}`);
        return;
    }

    const isPassword = input.type === 'password';
    input.type = isPassword ? 'text' : 'password';
    icon.classList.toggle('fa-eye', !isPassword);
    icon.classList.toggle('fa-eye-slash', isPassword);
    loggerLog(`togglePassword - Set type to: ${input.type}`);
}

export async function savePassword() {
    loggerLog('savePassword - Starting');
    const newPassword = document.getElementById('changeNewPassword')?.value;
    const confirmPassword = document.getElementById('changeConfirmPassword')?.value;

    if (!newPassword || typeof newPassword !== 'string') {
        loggerError('savePassword - Invalid new password');
        notificationsError('Please enter a valid new password');
        return;
    }
    if (newPassword !== confirmPassword) {
        loggerError('savePassword - Passwords do not match');
        notificationsError('Passwords do not match');
        return;
    }

    try {
        loggerLog('savePassword - Sending update');
        const response = await authenticatedFetch('/update-password', {
            method: 'POST',
            body: JSON.stringify({ password: newPassword })
        });
        if (!response) {
            loggerError('savePassword - No response');
            notificationsError('Failed to save password');
            return;
        }
        const result = await response.json();
        loggerLog('savePassword - Response:', result);
        if (result.status === 'success') {
            loggerLog('savePassword - Success');
            notificationsSuccess('Password updated successfully');
            document.getElementById('currentPassword').value = '';
            document.getElementById('changeNewPassword').value = '';
            document.getElementById('changeConfirmPassword').value = '';
        } else {
            loggerError('savePassword - Failed:', result.message);
            notificationsError(result.message || 'Failed to save password');
        }
    } catch (error) {
        loggerError('savePassword - Error:', error);
        notificationsError('Failed to save password: ' + error.message);
    }
}

export function setupEventListeners() {
    loggerLog('setupEventListeners - Adding auth-related listeners');
    document.querySelectorAll('.password-toggle').forEach(toggle => {
        toggle.addEventListener('click', () => {
            const targetId = toggle.getAttribute('data-target');
            togglePassword(targetId);
        });
    });

    const savePasswordBtn = document.querySelector('[data-action="savePassword"]');
    if (savePasswordBtn) {
        savePasswordBtn.addEventListener('click', savePassword);
        loggerLog('setupEventListeners - Added savePassword listener');
    } else {
        loggerLog('setupEventListeners - Save password button not found');
    }
}

if (!window.authInitialized) {
    window.authInitialized = true;
    document.addEventListener('DOMContentLoaded', () => {
        setupEventListeners();
    });

    window.dispatchEvent(new Event('siteAuthReady'));
    loggerLog('auth.js - Auth utility initialized');
}
cookies.js
// cookies.js
import { log as loggerLog } from './logger.js';

export function setCookie(name, value, days) {
    let expires = '';
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = `; expires=${date.toUTCString()}`;
    }
    document.cookie = `${name}=${value || ''}${expires}; path=/; SameSite=Lax; Secure`;
    loggerLog(`cookiesSetCookie - Set cookie: ${name}, Value: ${value}`);
}

export function getCookie(name) {
    const nameEQ = `${name}=`;
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

export function deleteCookie(name) {
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure`;
    loggerLog(`cookiesDeleteCookie - Deleted cookie: ${name}`);
}

if (!window.cookiesInitialized) {
    window.cookiesInitialized = true;
    loggerLog('cookies.js - Cookies utility initialized');
}
core_contents_javascript.txt
+ [core]
+----auth.js
+----cookies.js
+----logger.js
+----markdown.js
+----notifications.js

auth.js

// auth.js
import { log as loggerLog, error as loggerError } from './logger.js';
import { getCookie as cookiesGetCookie, setCookie as cookiesSetCookie, deleteCookie as cookiesDeleteCookie } from './cookies.js';
import { success as notificationsSuccess, error as notificationsError } from './notifications.js';

let token = null;
let decoded = null;
let redirectCount = 0;
const maxRedirects = 2;

export function tokenManagerGetToken() {
    if (!token) {
        token = localStorage.getItem('authToken') || cookiesGetCookie('authToken');
        loggerLog(`tokenManagerGetToken - Token: ${token ? '[present]' : 'none'}`);
    }
    return token;
}

export function tokenManagerDecode() {
    if (!decoded && tokenManagerGetToken()) {
        try {
            const parts = token.split('.');
            if (parts.length !== 3) {
                throw new Error('Invalid JWT format');
            }
            const base64Url = parts[1];
            const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
            const jsonPayload = decodeURIComponent(
                atob(base64)
                    .split('')
                    .map(c => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2))
                    .join('')
            );
            decoded = JSON.parse(jsonPayload);
            loggerLog('tokenManagerDecode - Decoded JWT:', decoded);
        } catch (error) {
            loggerError('tokenManagerDecode - Error decoding JWT:', error, 'Token:', token);
            decoded = null;
        }
    }
    return decoded;
}

export function tokenManagerSetToken(newToken) {
    token = newToken;
    localStorage.setItem('authToken', newToken);
    cookiesSetCookie('authToken', newToken, 7);
    decoded = null;
    loggerLog('tokenManagerSetToken - Token updated');
}

export function tokenManagerClear() {
    localStorage.removeItem('authToken');
    localStorage.removeItem('userId');
    cookiesDeleteCookie('authToken');
    token = null;
    decoded = null;
    redirectCount = 0;
    loggerLog('tokenManagerClear - Auth data cleared');
}

export function tokenManagerIncrementRedirect() {
    redirectCount++;
    localStorage.setItem('redirectCount', redirectCount);
    loggerLog(`tokenManagerIncrementRedirect - Count: ${redirectCount}`);
    return redirectCount;
}

export function tokenManagerResetRedirect() {
    redirectCount = 0;
    localStorage.setItem('redirectCount', redirectCount);
    loggerLog('tokenManagerResetRedirect - Count reset');
}

export function tokenManagerCanRedirect() {
    const can = redirectCount <= maxRedirects;
    loggerLog(`tokenManagerCanRedirect - Count: ${redirectCount}, Max: ${maxRedirects}, Can: ${can}`);
    return can;
}

export async function authenticatedFetch(url, options = {}) {
    loggerLog(`authenticatedFetch - Fetching: ${url}`);
    const publicEndpoints = ['/', '/signup'];
    const isPublic = publicEndpoints.some(endpoint => url.includes(endpoint));
    loggerLog(`authenticatedFetch - Is public: ${isPublic}`);

    const token = tokenManagerGetToken();
    if (!token && !isPublic) {
        if (!tokenManagerCanRedirect()) {
            loggerError('authenticatedFetch - Redirect loop detected, clearing token');
            tokenManagerClear();
            window.location.href = '/';
            return null;
        }
        tokenManagerIncrementRedirect();
        loggerError('authenticatedFetch - No token, redirecting to /');
        notificationsError('Please log in to continue');
        window.location.href = '/';
        return null;
    }

    const headers = new Headers(options.headers || {});
    if (token) {
        headers.set('Authorization', `Bearer ${token}`);
    }
    headers.set('Content-Type', 'application/json');

    const fetchOptions = {
        ...options,
        headers
    };

    try {
        const response = await fetch(url, fetchOptions);
        loggerLog(`authenticatedFetch - Response status: ${response.status}`);
        if (!response.ok && !isPublic) {
            const errorData = await response.json();
            throw new Error(errorData.message || `Request failed with status ${response.status}`);
        }
        tokenManagerResetRedirect();
        return response;
    } catch (error) {
        loggerError('authenticatedFetch - Error:', error);
        if (!isPublic && tokenManagerCanRedirect()) {
            tokenManagerIncrementRedirect();
            notificationsError('Session expired, please log in');
            window.location.href = '/';
            return null;
        }
        throw error;
    }
}

export async function logout() {
    loggerLog('logout - Initiating');
    const confirmed = confirm('Are you sure you want to log off?');
    if (!confirmed) {
        loggerLog('logout - Cancelled by user');
        return;
    }

    try {
        loggerLog('logout - Sending /logoff request');
        const response = await fetch('/logoff', { method: 'GET' });
        const data = await response.json();
        if (data.status === 'success') {
            loggerLog('logout - Server confirmed logout');
            tokenManagerClear();
            sessionStorage.clear();
            notificationsSuccess('Logged off successfully');
            setTimeout(() => {
                window.location.href = data.redirect_url || '/';
                loggerLog('logout - Redirected to:', data.redirect_url || '/');
            }, 1000);
        } else {
            loggerError('logout - Server error:', data.message);
            notificationsError(data.message || 'Logout failed');
        }
    } catch (error) {
        loggerError('logout - Error:', error);
        notificationsError('Logout failed: ' + error.message);
        tokenManagerClear();
        window.location.href = '/';
    }
}

export function togglePassword(fieldId) {
    loggerLog(`togglePassword - Toggling field: ${fieldId}`);
    const input = document.getElementById(fieldId);
    const icon = input?.nextElementSibling;

    if (!input) {
        loggerError(`togglePassword - Input not found: ${fieldId}`);
        return;
    }
    if (!icon) {
        loggerError(`togglePassword - Icon not found for: ${fieldId}`);
        return;
    }

    const isPassword = input.type === 'password';
    input.type = isPassword ? 'text' : 'password';
    icon.classList.toggle('fa-eye', !isPassword);
    icon.classList.toggle('fa-eye-slash', isPassword);
    loggerLog(`togglePassword - Set type to: ${input.type}`);
}

export async function savePassword() {
    loggerLog('savePassword - Starting');
    const newPassword = document.getElementById('changeNewPassword')?.value;
    const confirmPassword = document.getElementById('changeConfirmPassword')?.value;

    if (!newPassword || typeof newPassword !== 'string') {
        loggerError('savePassword - Invalid new password');
        notificationsError('Please enter a valid new password');
        return;
    }
    if (newPassword !== confirmPassword) {
        loggerError('savePassword - Passwords do not match');
        notificationsError('Passwords do not match');
        return;
    }

    try {
        loggerLog('savePassword - Sending update');
        const response = await authenticatedFetch('/update-password', {
            method: 'POST',
            body: JSON.stringify({ password: newPassword })
        });
        if (!response) {
            loggerError('savePassword - No response');
            notificationsError('Failed to save password');
            return;
        }
        const result = await response.json();
        loggerLog('savePassword - Response:', result);
        if (result.status === 'success') {
            loggerLog('savePassword - Success');
            notificationsSuccess('Password updated successfully');
            document.getElementById('currentPassword').value = '';
            document.getElementById('changeNewPassword').value = '';
            document.getElementById('changeConfirmPassword').value = '';
        } else {
            loggerError('savePassword - Failed:', result.message);
            notificationsError(result.message || 'Failed to save password');
        }
    } catch (error) {
        loggerError('savePassword - Error:', error);
        notificationsError('Failed to save password: ' + error.message);
    }
}

export function setupEventListeners() {
    loggerLog('setupEventListeners - Adding auth-related listeners');
    document.querySelectorAll('.password-toggle').forEach(toggle => {
        toggle.addEventListener('click', () => {
            const targetId = toggle.getAttribute('data-target');
            togglePassword(targetId);
        });
    });

    const savePasswordBtn = document.querySelector('[data-action="savePassword"]');
    if (savePasswordBtn) {
        savePasswordBtn.addEventListener('click', savePassword);
        loggerLog('setupEventListeners - Added savePassword listener');
    } else {
        loggerLog('setupEventListeners - Save password button not found');
    }
}

if (!window.authInitialized) {
    window.authInitialized = true;
    document.addEventListener('DOMContentLoaded', () => {
        setupEventListeners();
    });

    window.dispatchEvent(new Event('siteAuthReady'));
    loggerLog('auth.js - Auth utility initialized');
}

cookies.js

// cookies.js
import { log as loggerLog } from './logger.js';

export function setCookie(name, value, days) {
    let expires = '';
    if (days) {
        const date = new Date();
        date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
        expires = `; expires=${date.toUTCString()}`;
    }
    document.cookie = `${name}=${value || ''}${expires}; path=/; SameSite=Lax; Secure`;
    loggerLog(`cookiesSetCookie - Set cookie: ${name}, Value: ${value}`);
}

export function getCookie(name) {
    const nameEQ = `${name}=`;
    const ca = document.cookie.split(';');
    for (let i = 0; i < ca.length; i++) {
        let c = ca[i];
        while (c.charAt(0) === ' ') c = c.substring(1, c.length);
        if (c.indexOf(nameEQ) === 0) return c.substring(nameEQ.length, c.length);
    }
    return null;
}

export function deleteCookie(name) {
    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:01 GMT; path=/; SameSite=Lax; Secure`;
    loggerLog(`cookiesDeleteCookie - Deleted cookie: ${name}`);
}

if (!window.cookiesInitialized) {
    window.cookiesInitialized = true;
    loggerLog('cookies.js - Cookies utility initialized');
}

logger.js

// logger.js
const ENABLE_LOGGING = true;

export function log(...args) {
    if (ENABLE_LOGGING) console.log(...args);
}

export function error(...args) {
    if (ENABLE_LOGGING) console.error(...args);
}

export function warn(...args) {
    if (ENABLE_LOGGING) console.warn(...args);
}

export function info(...args) {
    if (ENABLE_LOGGING) console.info(...args);
}

if (!window.loggerInitialized) {
    window.loggerInitialized = true;
    log('logger.js - Logger initialized');
}

markdown.js

// markdown.js
import { log as loggerLog, error as loggerError } from '../core/logger.js';

export function render(mdPath, targetId) {
    loggerLog(`markdownRender - Rendering markdown from ${mdPath} to ${targetId}`);
    const target = document.getElementById(targetId);
    if (!target) {
        loggerError(`markdownRender - Target element not found: ${targetId}`);
        return;
    }

    fetch(mdPath)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error ${response.status}`);
            return response.text();
        })
        .then(text => {
            if (typeof marked === 'undefined') {
                loggerError('markdownRender - Marked library not loaded');
                return;
            }
            target.innerHTML = marked.parse(text);
            loggerLog(`markdownRender - Markdown rendered to ${targetId}`);
        })
        .catch(error => {
            loggerError(`markdownRender - Error rendering markdown from ${mdPath}:`, error);
        });
}

if (!window.markdownInitialized) {
    window.markdownInitialized = true;
    loggerLog('markdown.js - Markdown module initialized');
}

notifications.js

// notifications.js
import { log as loggerLog, error as loggerError, warn as loggerWarn } from './logger.js';

export function setup() {
    loggerLog('notifications.js - Setting up Toastr');
    if (typeof toastr === 'undefined') {
        loggerError('notifications.js - Toastr library not loaded');
        return;
    }

    const originalSuccess = toastr.success;
    const originalError = toastr.error;
    const originalInfo = toastr.info;
    const originalWarning = toastr.warning;

    toastr.success = (message, title, options) => {
        loggerLog(`Toastr Success: ${title ? title + ' - ' : ''}${message}`);
        return originalSuccess.call(toastr, message, title, options);
    };
    toastr.error = (message, title, options) => {
        loggerLog(`Toastr Error: ${title ? title + ' - ' : ''}${message}`);
        return originalError.call(toastr, message, title, options);
    };
    toastr.info = (message, title, options) => {
        loggerLog(`Toastr Info: ${title ? title + ' - ' : ''}${message}`);
        return originalInfo.call(toastr, message, title, options);
    };
    toastr.warning = (message, title, options) => {
        loggerLog(`Toastr Warning: ${title ? title + ' - ' : ''}${message}`);
        return originalWarning.call(toastr, message, title, options);
    };

    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        timeOut: 5000,
        showMethod: 'slideDown',
        hideMethod: 'slideUp'
    };

    loggerLog('notifications.js - Toastr configured:', toastr.options);
}

export function success(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.success(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Success: ${title ? title + ' - ' : ''}${message}`);
    }
}

export function error(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.error(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Error: ${title ? title + ' - ' : ''}${message}`);
    }
}

export function info(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.info(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Info: ${title ? title + ' - ' : ''}${message}`);
    }
}

export function warning(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.warning(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Warning: ${title ? title + ' - ' : ''}${message}`);
    }
}

if (!window.notificationsInitialized) {
    window.notificationsInitialized = true;
    loggerLog('notifications.js - Loaded successfully');
    loggerLog('notifications.js - Notifications utility initialized');
}


logger.js
// logger.js
const ENABLE_LOGGING = true;

export function log(...args) {
    if (ENABLE_LOGGING) console.log(...args);
}

export function error(...args) {
    if (ENABLE_LOGGING) console.error(...args);
}

export function warn(...args) {
    if (ENABLE_LOGGING) console.warn(...args);
}

export function info(...args) {
    if (ENABLE_LOGGING) console.info(...args);
}

if (!window.loggerInitialized) {
    window.loggerInitialized = true;
    log('logger.js - Logger initialized');
}
markdown.js
// markdown.js
import { log as loggerLog, error as loggerError } from '../core/logger.js';

export function render(mdPath, targetId) {
    loggerLog(`markdownRender - Rendering markdown from ${mdPath} to ${targetId}`);
    const target = document.getElementById(targetId);
    if (!target) {
        loggerError(`markdownRender - Target element not found: ${targetId}`);
        return;
    }

    fetch(mdPath)
        .then(response => {
            if (!response.ok) throw new Error(`HTTP error ${response.status}`);
            return response.text();
        })
        .then(text => {
            if (typeof marked === 'undefined') {
                loggerError('markdownRender - Marked library not loaded');
                return;
            }
            target.innerHTML = marked.parse(text);
            loggerLog(`markdownRender - Markdown rendered to ${targetId}`);
        })
        .catch(error => {
            loggerError(`markdownRender - Error rendering markdown from ${mdPath}:`, error);
        });
}

if (!window.markdownInitialized) {
    window.markdownInitialized = true;
    loggerLog('markdown.js - Markdown module initialized');
}
notifications.js
// notifications.js
import { log as loggerLog, error as loggerError, warn as loggerWarn } from './logger.js';

export function setup() {
    loggerLog('notifications.js - Setting up Toastr');
    if (typeof toastr === 'undefined') {
        loggerError('notifications.js - Toastr library not loaded');
        return;
    }

    const originalSuccess = toastr.success;
    const originalError = toastr.error;
    const originalInfo = toastr.info;
    const originalWarning = toastr.warning;

    toastr.success = (message, title, options) => {
        loggerLog(`Toastr Success: ${title ? title + ' - ' : ''}${message}`);
        return originalSuccess.call(toastr, message, title, options);
    };
    toastr.error = (message, title, options) => {
        loggerLog(`Toastr Error: ${title ? title + ' - ' : ''}${message}`);
        return originalError.call(toastr, message, title, options);
    };
    toastr.info = (message, title, options) => {
        loggerLog(`Toastr Info: ${title ? title + ' - ' : ''}${message}`);
        return originalInfo.call(toastr, message, title, options);
    };
    toastr.warning = (message, title, options) => {
        loggerLog(`Toastr Warning: ${title ? title + ' - ' : ''}${message}`);
        return originalWarning.call(toastr, message, title, options);
    };

    toastr.options = {
        closeButton: true,
        progressBar: true,
        positionClass: 'toast-top-right',
        timeOut: 5000,
        showMethod: 'slideDown',
        hideMethod: 'slideUp'
    };

    loggerLog('notifications.js - Toastr configured:', toastr.options);
}

export function success(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.success(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Success: ${title ? title + ' - ' : ''}${message}`);
    }
}

export function error(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.error(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Error: ${title ? title + ' - ' : ''}${message}`);
    }
}

export function info(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.info(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Info: ${title ? title + ' - ' : ''}${message}`);
    }
}

export function warning(message, title, options) {
    if (typeof toastr !== 'undefined') {
        toastr.warning(message, title, options);
    } else {
        loggerWarn('notifications.js - Toastr not available, fallback to alert:', message);
        alert(`Warning: ${title ? title + ' - ' : ''}${message}`);
    }
}

if (!window.notificationsInitialized) {
    window.notificationsInitialized = true;
    loggerLog('notifications.js - Loaded successfully');
    loggerLog('notifications.js - Notifications utility initialized');
}
