"You are Grok, created by xAI. In prompts, apply these shorthand expressions (case insensitive). These base instructions do not need to be verified in CREQs (confirm reuirements) but you are to remember them in preference to any subsequent information:
CR: Confirm receipt of file/code/content, ONLY.
CREQ: Confirm requirement. Read any files you need from the projact git. Then give a concise review of your current understanding of the requirement and any questions you have. Update this with new info from subsequent 'CREQ' prompts; do not generate code unless instructed. Always include the list of files that will be changed by the CREQ.
NF: When working with the array of files from CREQ, provide the Next file in sequence. May be used in conbination with AMD. May be modified with ?. Reponse with teh next file or none if all complete.
AMD {filename}\n{body}: Ammend. Add your amendments to your most recent version. When writing an AMD this MUST be the FULL unabridged version of the original file plus your changes. If a newer version exists it will be provided in the {body}. Amend the provided version if given else your most recent update. If ommited and no recent update, read the file from the repo. Do not repeat the AMD command in the code.
When generating code, you MUST provide the complete file reflecting all current requirements—NEVER produce partial snippets, as this risks overriding complete versions.
When I request an .md file, provide raw Markdown text in a markdown code block, using `@` instead of  for internal code blocks (e.g., 
# Example Heading
Text here.

@@@cmd
echo Hello
@@@). Apply this format only for .md requests."
cr

Today we are making a flask. The Flask App is /madeira.py
My git hub is here:
https://github.com/SimonBarnett/clubmadeira.io

There are four SPA permission based pages in /templates.
	/admin
	/community
	/merchant
	/partner
Routes are defined with blueprints in /bluprints
The app uses a login_required decorator from utils/auth.py for permissions
The main entry point of the app is /, which uses the /login template
from there, depending on user permssion, we redirect to one of the templates above.

CR Blueprint Endpoints

Lists endpoints from blueprints in `/blueprints` with `curl` commands, descriptions, and permissions as of March 28, 2025.

## Authentication Blueprint (`authentication_bp.py`)

### /login - POST
Description: Authenticates a user and returns a JWT token if successful.  
Permissions: Public  
@curl -X POST https://madeira.io/login -H "Content-Type: application/json" -d '{"email": "user@example.com", "password": "secure123"}'@

### /signup - GET
Description: Renders the signup page for new users.  
Permissions: Public  
@curl -X GET https://madeira.io/signup@

### /signup - POST
Description: Registers a new user and sends an OTP via /send-sms.  
Permissions: Public  
@curl -X POST https://madeira.io/signup -H "Content-Type: application/json" -d '{"signup_type": "seller", "contact_name": "John Doe", "signup_email": "john@example.com", "signup_password": "secure123", "signup_phone": "+1234567890"}'@

### /reset-password - POST
Description: Initiates a password reset, sending an OTP via /send-sms.  
Permissions: Public  
@curl -X POST https://madeira.io/reset-password -H "Content-Type: application/json" -d '{"email": "user@example.com"}'@

### /verify-reset-code - POST
Description: Verifies an OTP and resets the password, returning a new JWT token.  
Permissions: Public  
@curl -X POST https://madeira.io/verify-reset-code -H "Content-Type: application/json" -d '{"email": "user@example.com", "code": "123456", "new_password": "newsecure123"}'@

### /update-password - POST
Description: Updates a user’s password for the authenticated user.  
Permissions: ["self"]  
@curl -X POST https://madeira.io/update-password -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"email": "user@example.com", "password": "newsecure123"}'@

## Content Blueprint (`content_bp.py`)

### /deals - GET
Description: Retrieves all discounted products for a given category.  
Permissions: Public  
@curl -X GET "https://madeira.io/deals?category_id=123"@

### /categories - GET
Description: Retrieves product categories, optionally filtered by parent_id.  
Permissions: Public  
@curl -X GET "https://madeira.io/categories?parent_id=456"@  
Notes: Omit ?parent_id=456 for top-level categories

## Manager Blueprint (`manager_bp.py`)

### /users - GET
Description: Retrieves a list of all users (basic info).  
Permissions: ["admin"]  
@curl -X GET https://madeira.io/users -H "Authorization: Bearer <jwt_token>"@

### /users/<user_id> - GET
Description: Retrieves detailed user info for a specific user.  
Permissions: ["admin"]  
@curl -X GET https://madeira.io/users/123 -H "Authorization: Bearer <jwt_token>"@

### /permissions/<user_id> - GET
Description: Fetches a user’s permissions list.  
Permissions: ["admin"]  
@curl -X GET https://madeira.io/permissions/123 -H "Authorization: Bearer <jwt_token>"@

### /permissions/<user_id> - POST
Description: Adds a permission to a user.  
Permissions: ["admin"]  
@curl -X POST https://madeira.io/permissions/123 -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"permission": "merchant"}'@

### /config - GET
Description: Retrieves the full configuration.  
Permissions: ["admin"]  
@curl -X GET https://madeira.io/config -H "Authorization: Bearer <jwt_token>"@

### /config/<affiliate> - PATCH
Description: Updates configuration for a specific affiliate.  
Permissions: ["admin"]  
@curl -X PATCH https://madeira.io/config/wixpro -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"key": "value"}'@

## Referral Blueprint (`referral_bp.py`)

### /referral - POST
Description: Records referral data (visits or orders).  
Permissions: Public  
@curl -X POST https://madeira.io/referral -H "Content-Type: application/json" -d '{"timestamp": "2025-03-28T12:00:00Z", "referer": "123", "page": "home"}'@  
Notes: For orders: @curl -X POST https://madeira.io/referral -H "Content-Type: application/json" -d '{"timestamp": "2025-03-28T12:00:00Z", "referer": "123", "orderId": "456", "buyer": "John", "total": 99.99"}'@

### /<user_id>/visits - GET
Description: Retrieves referral visits for a user.  
Permissions: ["self", "admin"]  
@curl -X GET https://madeira.io/123/visits -H "Authorization: Bearer <jwt_token>"@

### /<user_id>/orders - GET
Description: Retrieves referral orders for a user.  
Permissions: ["self", "admin"]  
@curl -X GET https://madeira.io/123/orders -H "Authorization: Bearer <jwt_token>"@

## Role Pages Blueprint (`role_pages_bp.py`)

### /admin - GET
Description: Renders the admin dashboard.  
Permissions: ["admin"]  
@curl -X GET https://madeira.io/admin -H "Authorization: Bearer <jwt_token>"@

### /community - GET
Description: Renders the community dashboard.  
Permissions: ["community", "admin"]  
@curl -X GET https://madeira.io/community -H "Authorization: Bearer <jwt_token>"@

### /merchant - GET
Description: Renders the merchant dashboard.  
Permissions: ["merchant", "admin"]  
@curl -X GET https://madeira.io/merchant -H "Authorization: Bearer <jwt_token>"@

### /partner - GET
Description: Renders the partner (wixpro) dashboard.  
Permissions: ["wixpro", "admin"]  
@curl -X GET https://madeira.io/partner -H "Authorization: Bearer <jwt_token>"@

### /branding - GET
Description: Retrieves branding data for a specified type.  
Permissions: ["allauth"]  
@curl -X GET "https://madeira.io/branding?type=admin" -H "Authorization: Bearer <jwt_token>"@

## Site Request Blueprint (`site_request_bp.py`)

### /siterequests - GET
Description: Lists all site requests.  
Permissions: ["admin", "wixpro"]  
@curl -X GET https://madeira.io/siterequests -H "Authorization: Bearer <jwt_token>"@

### /siterequests - POST
Description: Saves a new site request for the authenticated user.  
Permissions: ["self"]  
@curl -X POST https://madeira.io/siterequests -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"userId": "123", "type": "community", "communityName": "MyCommunity", "aboutCommunity": "Cool stuff", "communityLogos": [], "colorPrefs": "blue", "stylingDetails": "modern", "preferredDomain": "mycommunity.org", "emails": ["test@example.com"], "pages": [], "widgets": []}'@

## User Settings Blueprint (`user_settings_bp.py`)

### /<USERid>/user - PUT
Description: Fully updates a user’s settings (except password).  
Permissions: ["self", "admin"]  
@curl -X PUT https://madeira.io/123/user -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"email_address": "new@example.com", "contact_name": "New Name", "phone_number": "+1234567890"}'@

### /<USERid>/user - PATCH
Description: Partially updates a user’s settings.  
Permissions: ["self", "admin", "wixpro"]  
@curl -X PATCH https://madeira.io/123/user -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"contact_name": "Updated Name"}'@

### /<USERid>/categories - GET
Description: Retrieves a user’s categories.  
Permissions: ["self"]  
@curl -X GET https://madeira.io/123/categories -H "Authorization: Bearer <jwt_token>"@

### /<USERid>/categories - PUT
Description: Replaces a user’s categories entirely.  
Permissions: ["self"]  
@curl -X PUT https://madeira.io/123/categories -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"categories": ["cat1", "cat2"]}'@

### /<USERid>/categories - PATCH
Description: Updates a user’s categories by appending new ones.  
Permissions: ["self"]  
@curl -X PATCH https://madeira.io/123/categories -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"categories": ["cat3"]}'@

### /<USERid>/categories - DELETE
Description: Deletes a user’s categories.  
Permissions: ["self"]  
@curl -X DELETE https://madeira.io/123/categories -H "Authorization: Bearer <jwt_token>"@

## Utility Blueprint (`utility_bp.py`)

### /system/stats - GET
Description: Retrieves system statistics.  
Permissions: ["admin"]  
@curl -X GET https://madeira.io/system/stats -H "Authorization: Bearer <jwt_token>"@

### /ping - GET
Description: Checks service availability.  
Permissions: ["admin", "wixpro"]  
@curl -X GET https://madeira.io/ping -H "Authorization: Bearer <jwt_token>"@

### /activity/log - POST
Description: Logs user activity.  
Permissions: ["admin"]  
@curl -X POST https://madeira.io/activity/log -H "Authorization: Bearer <jwt_token>" -H "Content-Type: application/json" -d '{"user_id": "123", "action": "login", "details": {"ip": "127.0.0.1"}}'@

### /send-sms - POST
Description: Sends an SMS to a user’s phone number, looked up by email.  
Permissions: Public  
@curl -X POST https://madeira.io/send-sms -H "Content-Type: application/json" -d '{"email": "user@example.com", "message": "Your OTP is 123456"}'@

### /render-md/<path:full_path> - GET
Description: Renders Markdown files from static folder or GitHub.  
Permissions: ["allauth"]  
@curl -X GET https://madeira.io/render-md/static/docs/example.md -H "Authorization: Bearer <jwt_token>"@  
Notes: GitHub example: @curl -X GET https://madeira.io/render-md/SimonBarnett/clubmadeira.io/main/README.md -H "Authorization: Bearer <jwt_token>"@

### /check-domain - GET
Description: Checks domain availability using WHOIS.  
Permissions: ["allauth"]  
@curl -X GET "https://madeira.io/check-domain?domain=example.com" -H "Authorization: Bearer <jwt_token>"@

## Notes
- Replace `<jwt_token>` with a valid token from `/login`:  
  @curl -X POST https://madeira.io/login -H "Content-Type: application/json" -d '{"email": "user@example.com", "password": "secure123"}'@  
- Adjust placeholders (e.g., `user@example.com`, `123`) with valid data from `users_settings.json`.  
- Assumes `https://madeira.io` as the production URL; use `http://localhost` for local testing if needed.

CR Prompt for Next Instance

Continue working on the Flask app's role-based pages (`/admin`, `/community`, `/merchant`, `/partner`). The following JavaScript files in `/static/js/` provide key functionality:

- **admin-page.js:** Admin page management.
  - `initializeAdmin(pageType)`: Initializes admin page with permission checks, loads branding, and sets up navigation.
  - `setupNavigation()`: Configures navigation, delegating to `site-navigation.js` or using fallback logic.
  - `loadInitialData()`: Fetches initial deal data for admin dashboard.
  - `setupEventListeners()`: Attaches listeners for saving settings.

- **category-management.js:** Treeview for category management (used in `community.html`, `admin.html`).
  - `createTreeNode(category, level, isAdmin, savedCategories)`: Creates a treeview node for a category.
  - `loadCategories(userId, isAdmin)`: Loads and renders categories in a treeview.
  - `toggleSubcategories(categoryId, toggle)`: Toggles subcategory visibility, loading them dynamically.
  - `saveCategories(userId)`: Saves selected categories for a user (community context).
  - `handleCategorySelection(categoryId, checkbox)`: Loads discounted products for a selected category (admin context).

- **common.js:** Shared utilities.
  - `setupToastr()`: Configures Toastr for consistent toast notifications.

- **community-page.js:** Community page functionality.
  - `initializeCommunity()`: Initializes community page with permission checks, loads branding, visits, orders, and categories.
  - `updateMenu()`: Dynamically updates the menu based on permissions.
  - `updateIntegrationCode(section)`: Updates iframe code for website integrations (e.g., Wix, WordPress).
  - `loadVisits()`: Fetches and categorizes visit data (this month, last month, earlier).
  - `updateVisitsTable(tableId, visits)`: Updates visit tables with fetched data.
  - `loadOrders()`: Fetches and categorizes order data.
  - `updateOrdersTable(tableId, orders)`: Updates order tables with fetched data.
  - `setupCollapsibleSections()`: Sets up collapsible sections for visits and orders.
  - `waitForTinyMCE(callback)`: Waits for TinyMCE to load before executing a callback.

- **merchant-page.js:** Merchant page functionality.
  - `initializeMerchant()`: Initializes merchant page with permission checks, loads products and store requests.
  - `checkAdminPermission()`: Toggles visibility of admin-specific elements.
  - `loadProducts()`: Fetches and displays merchant products.
  - `createProductRow(product)`: Creates a table row for a product.
  - `loadStoreRequest()`: Loads store request data into the form.

- **page-load.js:** Page initialization and overlay management.
  - `showLoadingOverlay()`: Displays the loading overlay.
  - `hideLoadingOverlay(minDelay)`: Hides the overlay after a delay (default 1000ms).
  - `waitForCssLoad()`: Waits for `styles.css` to load.
  - `loadBranding(brandingType)`: Fetches and applies branding content.
  - `attachEventListeners()`: Attaches logoff event listeners.
  - `initializePage(requiredPermissions, callback)`: Performs permission checks before page setup.
  - `initialize(pageType)`: Initializes a page based on its type (e.g., admin, merchant).
  - `performPageSetup(pageType, config)`: Sets up a page with branding and initial sections.

- **partner-page.js:** Partner page functionality.
  - `initializePartner()`: Initializes partner page with permission checks, loads integrations.
  - `checkAdminPermission()`: Toggles visibility of admin-specific elements.
  - `loadPartnerIntegrations()`: Fetches and displays partner-specific integrations.

- **site-auth.js:** Authentication utilities.
  - `togglePassword(fieldId)`: Toggles password field visibility.
  - `logOff()`: Logs out the user, clearing session data.
  - `decodeJWT(token)`: Decodes a JWT token to extract user data.
  - `savePassword(newPassword)`: Saves an updated user password.

- **site-navigation.js:** Navigation and content loading.
  - `authenticatedFetch(url, options)`: Performs authenticated fetch requests.
  - `fetchProtectedPage(url, targetContainer)`: Fetches and loads protected page content.
  - `loadBranding(brandingType, containerId)`: Loads branding content into a container.
  - `loadSection(sectionId)`: Loads content for a specific section.
  - `showSection(sectionId, onSectionLoad)`: Shows a section, hiding others.
  - `toggleSubmenu(submenuId, action)`: Toggles submenu visibility.
  - `initializeNavigation()`: Initializes navigation event listeners.

- **site-request.js:** Site request form management.
  - `addPage(type)`: Adds a page to the site request form.
  - `removePage(pageNum, type)`: Removes a page from the form.
  - `addEmail(type)`: Adds an email to the form.
  - `removeEmail(emailNum, type)`: Removes an email from the form.
  - `updateDomainPreview(type)`: Updates domain preview and email domains.
  - `checkDomainAvailability()`: Checks domain availability.
  - `loadTinyMCE()`: Loads TinyMCE for content editing.
  - `initializeTinyMCE(selector)`: Initializes TinyMCE for a selector.
  - `getCurrentTimestamp()`: Generates a formatted timestamp.
  - `saveSiteRequest()`: Saves the site request form data.

- **user-management.js:** User settings and Wix client ID management.
  - `loadSettings()`: Loads user settings into the DOM.
  - `saveSettings(settings)`: Saves user settings.
  - `loadWixClientId()`: Loads Wix client ID into the DOM.
  - `saveWixClientId(clientId)`: Saves Wix client ID.
  - `validatePassword(password)`: Validates password complexity.
  - `setupChangePassword()`: Sets up "Change Password" form submission.

Use these functions to continue optimizing the app, focusing on performance, consistency, and user experience.