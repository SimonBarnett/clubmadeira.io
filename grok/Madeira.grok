{
    "SCHEMA": {
        "$schema": "http://json-schema.org/draft-07/schema#",
        "title": "Comprehensive Project Schema",
        "type": "object",
        "properties": {
            "name": {
                "type": "string",
                "description": "The name of the project (optional)"
            },
            "description": {
                "type": "string",
                "description": "A brief description of the project"
            },
            "base_url": {
                "type": "string",
                "format": "uri",
                "description": "The base URL of the project"
            },
            "main_file": {
                "type": "string",
                "description": "The main file of the project"
            },
            "github": {
                "type": "string",
                "format": "uri",
                "description": "The GitHub repository URL"
            },
            "files": {
                "type": "array",
                "items": {
                    "$ref": "#/definitions/file"
                },
                "description": "An array of files in the project"
            },
            "version": {
                "type": "string",
                "description": "The version of the project (optional)"
            },
            "dependencies": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of dependencies (optional)"
            },
            "technologies": {
                "type": "array",
                "items": {
                    "type": "string"
                },
                "description": "List of technologies used (optional)"
            }
        },
        "required": [
            "description",
            "base_url",
            "main_file",
            "github",
            "files"
        ],
        "definitions": {
            "file": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the file"
                    },
                    "type": {
                        "type": "string",
                        "description": "The type or extension of the file"
                    },
                    "relative_location": {
                        "type": "string",
                        "description": "The relative path to the file from the main file"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "relative_location"
                ],
                "oneOf": [
                    {
                        "$ref": "#/definitions/js_file"
                    },
                    {
                        "$ref": "#/definitions/blueprint_file"
                    },
                    {
                        "$ref": "#/definitions/template_file"
                    },
                    {
                        "$ref": "#/definitions/document_file"
                    }
                ]
            },
            "parameter": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the parameter"
                    },
                    "type": {
                        "type": "string",
                        "description": "The data type of the parameter"
                    },
                    "optional": {
                        "type": "boolean",
                        "description": "Whether the parameter is optional"
                    },
                    "description": {
                        "type": "string",
                        "description": "A concise description of the parameter"
                    }
                },
                "required": [
                    "name",
                    "type",
                    "optional",
                    "description"
                ]
            },
            "js_file": {
                "allOf": [
                    {
                        "$ref": "#/definitions/file"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "functions": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/function"
                                },
                                "description": "An array of functions defined in the JS file"
                            }
                        },
                        "required": [
                            "functions"
                        ]
                    }
                ]
            },
            "function": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the function"
                    },
                    "description": {
                        "type": "string",
                        "description": "A brief description of the function"
                    },
                    "parameters": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/parameter"
                        },
                        "description": "An array of parameters for the function"
                    }
                },
                "required": [
                    "name",
                    "description",
                    "parameters"
                ]
            },
            "blueprint_file": {
                "allOf": [
                    {
                        "$ref": "#/definitions/file"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "flask_blueprint": {
                                "type": "string",
                                "description": "The name of the Flask blueprint"
                            },
                            "endpoint_name": {
                                "type": "string",
                                "description": "The name of the endpoint"
                            },
                            "method": {
                                "type": "string",
                                "enum": [
                                    "GET",
                                    "POST",
                                    "PUT",
                                    "DELETE"
                                ],
                                "description": "The HTTP method of the endpoint"
                            },
                            "description": {
                                "type": "string",
                                "description": "A brief description of the endpoint"
                            },
                            "parameters": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/parameter"
                                },
                                "description": "An array of parameters for the endpoint"
                            }
                        },
                        "required": [
                            "flask_blueprint",
                            "endpoint_name",
                            "method",
                            "description",
                            "parameters"
                        ]
                    }
                ]
            },
            "template_file": {
                "allOf": [
                    {
                        "$ref": "#/definitions/file"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "engine": {
                                "type": "string",
                                "enum": [
                                    "jinja2",
                                    "handlebars",
                                    "mustache"
                                ],
                                "description": "The templating engine used"
                            }
                        },
                        "required": [
                            "engine"
                        ]
                    }
                ]
            },
            "document_file": {
                "allOf": [
                    {
                        "$ref": "#/definitions/file"
                    },
                    {
                        "type": "object",
                        "properties": {
                            "format": {
                                "type": "string",
                                "enum": [
                                    "pdf",
                                    "docx",
                                    "txt"
                                ],
                                "description": "The format of the document"
                            }
                        },
                        "required": [
                            "format"
                        ]
                    }
                ]
            },
            "command": {
                "type": "object",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the command"
                    },
                    "syntax": {
                        "type": "string",
                        "description": "The syntax of the command"
                    },
                    "description": {
                        "type": "string",
                        "description": "A brief description of the command"
                    },
                    "responses": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/response"
                        },
                        "description": "An array of possible responses"
                    }
                },
                "required": [
                    "name",
                    "syntax",
                    "description",
                    "responses"
                ]
            },
            "response": {
                "type": "object",
                "properties": {
                    "accepted_response": {
                        "type": "string",
                        "description": "The accepted response message"
                    },
                    "condition": {
                        "type": "string",
                        "description": "The condition under which this response is issued"
                    }
                },
                "required": [
                    "accepted_response",
                    "condition"
                ]
            }
        }
    },
    "VALID_COMMANDS": [
        {
            "name": "CR",
            "syntax": "CR",
            "description": "Confirm receipt of file/code/content, providing no additional response.",
            "responses": [
                {
                    "accepted_response": "CR",
                    "condition": "Always"
                }
            ]
        },
        {
            "name": "CREQ",
            "syntax": "CREQ",
            "description": "Confirm requirement. Read any files you need from the project git. Then give a concise review of your current understanding of the requirement and any questions you have. Update this with new info from subsequent 'CREQ' prompts; do not generate code unless instructed. Always include the list of files that will be changed by the CREQ.",
            "responses": [
                {
                    "accepted_response": "A concise text summary of understanding, questions, and a list of files to be changed.",
                    "condition": "When the requirement is understood and files to be changed are identified."
                },
                {
                    "accepted_response": "Clarification needed: [specific question]",
                    "condition": "When there are ambiguities or missing information in the requirement."
                }
            ]
        },
        {
            "name": "NF",
            "syntax": "NF",
            "description": "When working with the array of files from CREQ, provide the Next file in sequence. May be used in combination with AMD. May be modified with ?. Response with the next file or none if all complete.",
            "responses": [
                {
                    "accepted_response": "The next filename",
                    "condition": "When there are remaining files in the sequence."
                },
                {
                    "accepted_response": "none",
                    "condition": "When all files in the sequence have been processed."
                },
                {
                    "accepted_response": "?",
                    "condition": "When the command is modified with '?' to indicate uncertainty."
                }
            ]
        },
        {
            "name": "AMD",
            "syntax": "AMD {filename}\n{body}",
            "description": "Ammend. Add your amendments to your most recent version. When writing an AMD this MUST be the FULL unabridged version of the original file plus your changes. If a newer version exists it will be provided in the {body}. Amend the provided version if given else your most recent update. If omitted and no recent update, read the file from the repo. Do not repeat the AMD command in the code.",
            "responses": [
                {
                    "accepted_response": "The full amended file content reflecting all changes.",
                    "condition": "When the amendment is successfully applied to the file."
                }
            ]
        },
        {
            "name": "XREQ",
            "syntax": "XREQ",
            "description": "A Transfer Request. Create a concise prompt to restart the chat with another instance, stating the Current Requirement and progress made toward it. List files changed in AMD amendments with before and after code. Add a section of observations for code improvement. This may be saved as xreq.md in the project repo, so use .md formatting. Include a timestamp, self-assessment of your performance in our session, and advice for future instances. Choose your own session identifier and sign the md.",
            "responses": [
                {
                    "accepted_response": "A raw Markdown text block formatted with @ for internal code blocks, containing the transfer request details.",
                    "condition": "When the transfer request is generated with all required details."
                }
            ]
        },
        {
            "name": "LEARN",
            "syntax": "LEARN\n{body}",
            "description": "Create a Comprehensive Project Schema if one is not in memory. Read the {body} and add/update entries from body to the project. Add to the schema as appropriate. CR only when done.",
            "responses": [
                {
                    "accepted_response": "CR",
                    "condition": "When the learning process is completed and entries are updated."
                }
            ]
        },
        {
            "name": "SUMMARISE",
            "syntax": "summarise {all}",
            "description": "If all is omitted write the current project schema in full. Otherwise write this json in full in the format {`SCHEMA`: current SCHEMA in full ; `VALID_COMMANDS`: current valid commands in full ; `Comprehensive Project Schema`: the current project schema in full }",
            "responses": [
                {
                    "accepted_response": "{`SCHEMA`: current SCHEMA in full ; `VALID_COMMANDS`: current valid commands in full ; `Comprehensive Project Schema`: the current project schema in full }",
                    "condition": "if all"
                },
                {
                    "accepted_response": "Write just current `Comprehensive Project Schema` JSON in full.",
                    "condition": "if all is omitted"
                }
            ]
        }
    ],
    "Comprehensive Project Schema": {
        "description": "A Flask-based web application with permission-based routing, single-page application (SPA) interfaces, and integrations with Amazon and Wix APIs for product and category management, featuring extensive user management, referral tracking, and utility functions.",
        "base_url": "https://clubmadeira.io",
        "main_file": "madeira.py",
        "github": "https://github.com/SimonBarnett/clubmadeira.io",
        "files": [
            {
                "name": "authentication_bp.py",
                "type": "py",
                "relative_location": "blueprints/authentication_bp.py",
                "flask_blueprint": "authentication_bp",
                "endpoint_name": "login",
                "method": "POST",
                "description": "Handles user login with email and password, issuing a JWT token.",
                "parameters": []
            },
            {
                "name": "authentication_bp.py",
                "type": "py",
                "relative_location": "blueprints/authentication_bp.py",
                "flask_blueprint": "authentication_bp",
                "endpoint_name": "signup_page",
                "method": "GET",
                "description": "Renders the signup page.",
                "parameters": []
            },
            {
                "name": "authentication_bp.py",
                "type": "py",
                "relative_location": "blueprints/authentication_bp.py",
                "flask_blueprint": "authentication_bp",
                "endpoint_name": "signup",
                "method": "POST",
                "description": "Registers a new user and sends an OTP via SMS.",
                "parameters": []
            },
            {
                "name": "authentication_bp.py",
                "type": "py",
                "relative_location": "blueprints/authentication_bp.py",
                "flask_blueprint": "authentication_bp",
                "endpoint_name": "reset_password",
                "method": "POST",
                "description": "Initiates a password reset by sending an OTP via SMS.",
                "parameters": []
            },
            {
                "name": "authentication_bp.py",
                "type": "py",
                "relative_location": "blueprints/authentication_bp.py",
                "flask_blueprint": "authentication_bp",
                "endpoint_name": "verify_reset_code",
                "method": "POST",
                "description": "Verifies an OTP and resets the user's password.",
                "parameters": []
            },
            {
                "name": "authentication_bp.py",
                "type": "py",
                "relative_location": "blueprints/authentication_bp.py",
                "flask_blueprint": "authentication_bp",
                "endpoint_name": "update_password",
                "method": "POST",
                "description": "Updates the authenticated user's password.",
                "parameters": []
            },
            {
                "name": "content_bp.py",
                "type": "py",
                "relative_location": "blueprints/content_bp.py",
                "flask_blueprint": "content_bp",
                "endpoint_name": "get_all_discounted_products",
                "method": "GET",
                "description": "Retrieves discounted products for a given category.",
                "parameters": [
                    {
                        "name": "category_id",
                        "type": "string",
                        "optional": false,
                        "description": "The ID of the category to filter discounted products."
                    }
                ]
            },
            {
                "name": "content_bp.py",
                "type": "py",
                "relative_location": "blueprints/content_bp.py",
                "flask_blueprint": "content_bp",
                "endpoint_name": "get_categories",
                "method": "GET",
                "description": "Retrieves product categories, optionally filtered by parent_id.",
                "parameters": [
                    {
                        "name": "parent_id",
                        "type": "string",
                        "optional": true,
                        "description": "The ID of the parent category to filter subcategories."
                    }
                ]
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "get_users",
                "method": "GET",
                "description": "Lists all users for admin users.",
                "parameters": []
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "get_user",
                "method": "GET",
                "description": "Retrieves detailed user info for a specific user ID.",
                "parameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "optional": false,
                        "description": "The ID of the user to fetch."
                    }
                ]
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "get_permissions",
                "method": "GET",
                "description": "Fetches a user's permissions.",
                "parameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "optional": false,
                        "description": "The ID of the user whose permissions are sought."
                    }
                ]
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "add_permission",
                "method": "POST",
                "description": "Adds a permission to a user.",
                "parameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "optional": false,
                        "description": "The ID of the user to add a permission to."
                    }
                ]
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "get_settings_key_settings",
                "method": "GET",
                "description": "Retrieves all settings of type 'settings_key' from the configuration.",
                "parameters": []
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "patch_settings_key",
                "method": "PATCH",
                "description": "Updates specific fields of an existing settings_key entry.",
                "parameters": [
                    {
                        "name": "key_type",
                        "type": "string",
                        "optional": false,
                        "description": "The type of settings_key to update."
                    }
                ]
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "put_settings_key",
                "method": "PUT",
                "description": "Replaces an existing settings_key entry or creates it if it doesn’t exist.",
                "parameters": [
                    {
                        "name": "key_type",
                        "type": "string",
                        "optional": false,
                        "description": "The type of settings_key to replace."
                    }
                ]
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "get_affiliate_key_settings",
                "method": "GET",
                "description": "Retrieves all settings of type 'affiliate_key' from the configuration.",
                "parameters": []
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "patch_affiliate_key",
                "method": "PATCH",
                "description": "Updates specific fields of an existing affiliate_key entry.",
                "parameters": [
                    {
                        "name": "key_type",
                        "type": "string",
                        "optional": false,
                        "description": "The type of affiliate_key to update."
                    }
                ]
            },
            {
                "name": "manager_bp.py",
                "type": "py",
                "relative_location": "blueprints/manager_bp.py",
                "flask_blueprint": "manager_bp",
                "endpoint_name": "put_affiliate_key",
                "method": "PUT",
                "description": "Replaces an existing affiliate_key entry or creates it if it doesn’t exist.",
                "parameters": [
                    {
                        "name": "key_type",
                        "type": "string",
                        "optional": false,
                        "description": "The type of affiliate_key to replace."
                    }
                ]
            },
            {
                "name": "referral_bp.py",
                "type": "py",
                "relative_location": "blueprints/referral_bp.py",
                "flask_blueprint": "referral_bp",
                "endpoint_name": "handle_referral",
                "method": "POST",
                "description": "Records referral data (visits or orders).",
                "parameters": []
            },
            {
                "name": "referral_bp.py",
                "type": "py",
                "relative_location": "blueprints/referral_bp.py",
                "flask_blueprint": "referral_bp",
                "endpoint_name": "get_referral_visits",
                "method": "GET",
                "description": "Retrieves referral visits for a user.",
                "parameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "optional": false,
                        "description": "The ID of the user whose referral visits are sought."
                    }
                ]
            },
            {
                "name": "referral_bp.py",
                "type": "py",
                "relative_location": "blueprints/referral_bp.py",
                "flask_blueprint": "referral_bp",
                "endpoint_name": "get_referral_orders",
                "method": "GET",
                "description": "Retrieves referral orders for a user.",
                "parameters": [
                    {
                        "name": "user_id",
                        "type": "string",
                        "optional": false,
                        "description": "The ID of the user whose referral orders are sought."
                    }
                ]
            },
            {
                "name": "role_pages_bp.py",
                "type": "py",
                "relative_location": "blueprints/role_pages_bp.py",
                "flask_blueprint": "role_pages",
                "endpoint_name": "admin",
                "method": "GET",
                "description": "Renders the admin dashboard.",
                "parameters": []
            },
            {
                "name": "role_pages_bp.py",
                "type": "py",
                "relative_location": "blueprints/role_pages_bp.py",
                "flask_blueprint": "role_pages",
                "endpoint_name": "community",
                "method": "GET",
                "description": "Renders the community dashboard.",
                "parameters": []
            },
            {
                "name": "role_pages_bp.py",
                "type": "py",
                "relative_location": "blueprints/role_pages_bp.py",
                "flask_blueprint": "role_pages",
                "endpoint_name": "merchant",
                "method": "GET",
                "description": "Renders the merchant dashboard.",
                "parameters": []
            },
            {
                "name": "role_pages_bp.py",
                "type": "py",
                "relative_location": "blueprints/role_pages_bp.py",
                "flask_blueprint": "role_pages",
                "endpoint_name": "partner",
                "method": "GET",
                "description": "Renders the partner dashboard for wixpro users.",
                "parameters": []
            },
            {
                "name": "role_pages_bp.py",
                "type": "py",
                "relative_location": "blueprints/role_pages_bp.py",
                "flask_blueprint": "role_pages",
                "endpoint_name": "get_branding",
                "method": "GET",
                "description": "Retrieves branding data for a specified type.",
                "parameters": [
                    {
                        "name": "type",
                        "type": "string",
                        "optional": false,
                        "description": "The branding type (e.g., admin, merchant)."
                    }
                ]
            },
            {
                "name": "site_request_bp.py",
                "type": "py",
                "relative_location": "blueprints/site_request_bp.py",
                "flask_blueprint": "site_request_bp",
                "endpoint_name": "list_site_requests",
                "method": "GET",
                "description": "Lists all site requests for admin or wixpro users.",
                "parameters": []
            },
            {
                "name": "site_request_bp.py",
                "type": "py",
                "relative_location": "blueprints/site_request_bp.py",
                "flask_blueprint": "site_request_bp",
                "endpoint_name": "save_site_request_endpoint",
                "method": "POST",
                "description": "Saves a new site request for the authenticated user.",
                "parameters": []
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "manage_user_settings",
                "method": "GET",
                "description": "Retrieves the authenticated user's top-level settings.",
                "parameters": []
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "manage_user_settings",
                "method": "PUT",
                "description": "Replaces the authenticated user's top-level settings.",
                "parameters": []
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "manage_user_settings",
                "method": "PATCH",
                "description": "Updates specific fields in the authenticated user's top-level settings.",
                "parameters": []
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "get_client_api_settings",
                "method": "GET",
                "description": "Retrieves all client_api settings from the configuration.",
                "parameters": []
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "put_client_api_setting",
                "method": "PUT",
                "description": "Replaces the client_api setting for a specified key.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "description": "The key of the client_api setting to replace."
                    }
                ]
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "patch_client_api_setting",
                "method": "PATCH",
                "description": "Updates specific fields of the client_api setting for a specified key.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "description": "The key of the client_api setting to update."
                    }
                ]
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "get_api_key_settings",
                "method": "GET",
                "description": "Retrieves all api_key settings for the authenticated user.",
                "parameters": []
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "put_api_key_setting",
                "method": "PUT",
                "description": "Replaces the api_key setting for a specified key.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "description": "The key of the api_key setting to replace."
                    }
                ]
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "patch_api_key_setting",
                "method": "PATCH",
                "description": "Updates specific fields of the api_key setting for a specified key.",
                "parameters": [
                    {
                        "name": "key",
                        "type": "string",
                        "optional": false,
                        "description": "The key of the api_key setting to update."
                    }
                ]
            },
            {
                "name": "user_settings_bp.py",
                "type": "py",
                "relative_location": "blueprints/user_settings_bp.py",
                "flask_blueprint": "user_settings_bp",
                "endpoint_name": "get_user_products",
                "method": "GET",
                "description": "Retrieves the list of products for the authenticated user from Wix.",
                "parameters": []
            },
            {
                "name": "utility_bp.py",
                "type": "py",
                "relative_location": "blueprints/utility_bp.py",
                "flask_blueprint": "utility_bp",
                "endpoint_name": "system_stats",
                "method": "GET",
                "description": "Retrieves system statistics for admin users.",
                "parameters": []
            },
            {
                "name": "utility_bp.py",
                "type": "py",
                "relative_location": "blueprints/utility_bp.py",
                "flask_blueprint": "utility_bp",
                "endpoint_name": "ping",
                "method": "GET",
                "description": "Pings the service to check availability for admin or wixpro users.",
                "parameters": []
            },
            {
                "name": "utility_bp.py",
                "type": "py",
                "relative_location": "blueprints/utility_bp.py",
                "flask_blueprint": "utility_bp",
                "endpoint_name": "log_user_activity",
                "method": "POST",
                "description": "Logs user activity for admin users.",
                "parameters": []
            },
            {
                "name": "utility_bp.py",
                "type": "py",
                "relative_location": "blueprints/utility_bp.py",
                "flask_blueprint": "utility_bp",
                "endpoint_name": "send_sms",
                "method": "POST",
                "description": "Sends an SMS to a user's phone number looked up by email.",
                "parameters": []
            },
            {
                "name": "utility_bp.py",
                "type": "py",
                "relative_location": "blueprints/utility_bp.py",
                "flask_blueprint": "utility_bp",
                "endpoint_name": "render_md",
                "method": "GET",
                "description": "Renders Markdown content from a file or GitHub URL.",
                "parameters": [
                    {
                        "name": "full_path",
                        "type": "string",
                        "optional": false,
                        "description": "The path to the Markdown file (static or GitHub)."
                    }
                ]
            },
            {
                "name": "utility_bp.py",
                "type": "py",
                "relative_location": "blueprints/utility_bp.py",
                "flask_blueprint": "utility_bp",
                "endpoint_name": "check_domain",
                "method": "GET",
                "description": "Checks the availability of a domain name.",
                "parameters": [
                    {
                        "name": "domain",
                        "type": "string",
                        "optional": false,
                        "description": "The domain name to check."
                    }
                ]
            },
            {
                "name": "admin.html",
                "type": "html",
                "relative_location": "templates/admin.html",
                "engine": "jinja2"
            },
            {
                "name": "community.html",
                "type": "html",
                "relative_location": "templates/community.html",
                "engine": "jinja2"
            },
            {
                "name": "merchant.html",
                "type": "html",
                "relative_location": "templates/merchant.html",
                "engine": "jinja2"
            },
            {
                "name": "partner.html",
                "type": "html",
                "relative_location": "templates/partner.html",
                "engine": "jinja2"
            },
            {
                "name": "login.html",
                "type": "html",
                "relative_location": "templates/login.html",
                "engine": "jinja2"
            },
            {
                "name": "signup.html",
                "type": "html",
                "relative_location": "templates/signup.html",
                "engine": "jinja2"
            },
            {
                "name": "account_menu.inc",
                "type": "html",
                "relative_location": "templates/account_menu.inc",
                "engine": "jinja2"
            },
            {
                "name": "base.inc",
                "type": "html",
                "relative_location": "templates/base.inc",
                "engine": "jinja2"
            },
            {
                "name": "overlay.inc",
                "type": "html",
                "relative_location": "templates/overlay.inc",
                "engine": "jinja2"
            },
            {
                "name": "roles.inc",
                "type": "html",
                "relative_location": "templates/roles.inc",
                "engine": "jinja2"
            },
            {
                "name": "siterequest.inc",
                "type": "html",
                "relative_location": "templates/siterequest.inc",
                "engine": "jinja2"
            },
            {
                "name": "welcome.inc",
                "type": "html",
                "relative_location": "templates/welcome.inc",
                "engine": "jinja2"
            },
            {
                "name": "auth.py",
                "type": "py",
                "relative_location": "utils/auth.py",
                "functions": [
                    {
                        "name": "login_required",
                        "description": "Decorator to enforce JWT-based authentication and permission checks for routes.",
                        "parameters": [
                            {
                                "name": "required_permissions",
                                "type": "list",
                                "optional": false,
                                "description": "List of permissions required to access the route."
                            },
                            {
                                "name": "require_all",
                                "type": "boolean",
                                "optional": true,
                                "description": "If true, all permissions must match; if false, any match suffices."
                            }
                        ]
                    },
                    {
                        "name": "login_user",
                        "description": "Handles user login, verifies credentials, and issues a JWT token.",
                        "parameters": []
                    },
                    {
                        "name": "signup_user",
                        "description": "Handles user signup, creates a new user with hashed password and permissions.",
                        "parameters": []
                    },
                    {
                        "name": "generate_token",
                        "description": "Generates a JWT token for a user with specified permissions.",
                        "parameters": [
                            {
                                "name": "user_id",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the user."
                            },
                            {
                                "name": "permissions",
                                "type": "list",
                                "optional": false,
                                "description": "List of user permissions."
                            }
                        ]
                    },
                    {
                        "name": "generate_code",
                        "description": "Generates an 8-character code with a checksum for user IDs.",
                        "parameters": []
                    }
                ]
            },
            {
                "name": "categories.py",
                "type": "py",
                "relative_location": "utils/categories.py",
                "functions": [
                    {
                        "name": "get_all_categories",
                        "description": "Fetches all categories from Amazon API or returns pseudo-categories if not configured.",
                        "parameters": [
                            {
                                "name": "parent_id",
                                "type": "string",
                                "optional": true,
                                "description": "Parent category ID to fetch subcategories."
                            }
                        ]
                    },
                    {
                        "name": "filter_categories_with_products",
                        "description": "Filters categories based on product availability and discount percentage.",
                        "parameters": [
                            {
                                "name": "category_ids",
                                "type": "list",
                                "optional": false,
                                "description": "List of category IDs to filter."
                            },
                            {
                                "name": "min_discount_percent",
                                "type": "float",
                                "optional": false,
                                "description": "Minimum discount percentage for products."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "config.py",
                "type": "py",
                "relative_location": "utils/config.py",
                "functions": [
                    {
                        "name": "load_config",
                        "description": "Loads configuration from config.json or returns defaults if not found.",
                        "parameters": []
                    },
                    {
                        "name": "save_config",
                        "description": "Saves configuration to config.json.",
                        "parameters": [
                            {
                                "name": "config",
                                "type": "dict",
                                "optional": false,
                                "description": "Configuration dictionary to save."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "data.py",
                "type": "py",
                "relative_location": "utils/data.py",
                "functions": [
                    {
                        "name": "load_site_request",
                        "description": "Loads site request data for a user from a JSON file.",
                        "parameters": [
                            {
                                "name": "user_id",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the user."
                            }
                        ]
                    },
                    {
                        "name": "save_site_request",
                        "description": "Saves site request data for a user to a JSON file.",
                        "parameters": [
                            {
                                "name": "user_id",
                                "type": "string",
                                "optional": "false",
                                "description": "The ID of the user."
                            },
                            {
                                "name": "site_request_data",
                                "type": "dict",
                                "optional": false,
                                "description": "Data to save for the site request."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "helpers.py",
                "type": "py",
                "relative_location": "utils/helpers.py",
                "functions": [
                    {
                        "name": "get_system_stats",
                        "description": "Stub function to retrieve system statistics (CPU, memory, disk usage).",
                        "parameters": []
                    },
                    {
                        "name": "ping_service",
                        "description": "Stub function to check if a service is reachable.",
                        "parameters": []
                    },
                    {
                        "name": "log_activity",
                        "description": "Stub function to log user activity.",
                        "parameters": [
                            {
                                "name": "user_id",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the user."
                            },
                            {
                                "name": "action",
                                "type": "string",
                                "optional": false,
                                "description": "The action performed."
                            },
                            {
                                "name": "details",
                                "type": "string",
                                "optional": true,
                                "description": "Additional details about the action."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "products.py",
                "type": "py",
                "relative_location": "utils/products.py",
                "functions": [
                    {
                        "name": "search_all_discounted",
                        "description": "Searches for discounted products in a category using the Amazon API.",
                        "parameters": [
                            {
                                "name": "category_id",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the category to search."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "users.py",
                "type": "py",
                "relative_location": "utils/users.py",
                "functions": [
                    {
                        "name": "load_users_settings",
                        "description": "Loads user settings from a JSON file.",
                        "parameters": []
                    },
                    {
                        "name": "save_users_settings",
                        "description": "Saves user settings to a JSON file.",
                        "parameters": [
                            {
                                "name": "users_settings",
                                "type": "dict",
                                "optional": false,
                                "description": "Dictionary of user settings to save."
                            }
                        ]
                    },
                    {
                        "name": "get_user_settings",
                        "description": "Retrieves settings for a specific user.",
                        "parameters": [
                            {
                                "name": "user_id",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the user."
                            }
                        ]
                    },
                    {
                        "name": "generate_code",
                        "description": "Generates an 8-character code with a checksum for user IDs.",
                        "parameters": []
                    }
                ]
            },
            {
                "name": "wix.py",
                "type": "py",
                "relative_location": "utils/wix.py",
                "functions": [
                    {
                        "name": "get_wix_access_token",
                        "description": "Obtains an access token from Wix using a client ID.",
                        "parameters": [
                            {
                                "name": "client_id",
                                "type": "string",
                                "optional": false,
                                "description": "Wix client ID for authentication."
                            }
                        ]
                    },
                    {
                        "name": "fetch_wix_collections",
                        "description": "Fetches collections from Wix using an access token.",
                        "parameters": [
                            {
                                "name": "access_token",
                                "type": "string",
                                "optional": false,
                                "description": "Wix access token."
                            }
                        ]
                    },
                    {
                        "name": "fetch_wix_products_for_collection",
                        "description": "Fetches products for a specific Wix collection.",
                        "parameters": [
                            {
                                "name": "access_token",
                                "type": "string",
                                "optional": false,
                                "description": "Wix access token."
                            },
                            {
                                "name": "collection_id",
                                "type": "string",
                                "optional": false,
                                "description": "ID of the collection to fetch products for."
                            }
                        ]
                    },
                    {
                        "name": "fetch_user_products",
                        "description": "Fetches all products for a user from Wix.",
                        "parameters": [
                            {
                                "name": "user_id",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the user."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "utils_contents_text.txt",
                "type": "txt",
                "relative_location": "utils/utils_contents_text.txt",
                "format": "txt"
            },
            {
                "name": "admin-page.js",
                "type": "js",
                "relative_location": "js/admin-page.js",
                "functions": [
                    {
                        "name": "initializeAdmin",
                        "description": "Initializes the admin page with permission checks.",
                        "parameters": [
                            {
                                "name": "pageType",
                                "type": "string",
                                "optional": false,
                                "description": "The type of page being initialized."
                            }
                        ]
                    },
                    {
                        "name": "setupNavigation",
                        "description": "Sets up navigation for the admin page.",
                        "parameters": []
                    },
                    {
                        "name": "loadInitialData",
                        "description": "Loads initial data such as deals for the admin page.",
                        "parameters": []
                    },
                    {
                        "name": "setupEventListeners",
                        "description": "Sets up event listeners for the admin page.",
                        "parameters": []
                    }
                ]
            },
            {
                "name": "category-management.js",
                "type": "js",
                "relative_location": "js/category-management.js",
                "functions": [
                    {
                        "name": "createTreeNode",
                        "description": "Creates a treeview node for category display with configurable behavior.",
                        "parameters": [
                            {
                                "name": "category",
                                "type": "object",
                                "optional": false,
                                "description": "The category object to create a node for."
                            },
                            {
                                "name": "level",
                                "type": "number",
                                "optional": true,
                                "description": "The nesting level of the category (default is 0)."
                            },
                            {
                                "name": "isAdmin",
                                "type": "boolean",
                                "optional": true,
                                "description": "Whether the context is admin (default is false)."
                            },
                            {
                                "name": "savedCategories",
                                "type": "array",
                                "optional": true,
                                "description": "Array of saved category IDs (default is [])."
                            }
                        ]
                    },
                    {
                        "name": "loadCategories",
                        "description": "Loads category data for treeview rendering, with options for admin or community context.",
                        "parameters": [
                            {
                                "name": "userId",
                                "type": "string",
                                "optional": true,
                                "description": "The ID of the user (default is null)."
                            },
                            {
                                "name": "isAdmin",
                                "type": "boolean",
                                "optional": true,
                                "description": "Whether to load in admin context (default is false)."
                            }
                        ]
                    },
                    {
                        "name": "toggleSubcategories",
                        "description": "Toggles visibility of subcategories in treeview and loads them dynamically if needed.",
                        "parameters": [
                            {
                                "name": "categoryId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the category whose subcategories to toggle."
                            },
                            {
                                "name": "toggle",
                                "type": "object",
                                "optional": false,
                                "description": "The toggle element to update."
                            }
                        ]
                    },
                    {
                        "name": "saveCategories",
                        "description": "Saves updated category structure from treeview (community context).",
                        "parameters": [
                            {
                                "name": "userId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the user saving the categories."
                            }
                        ]
                    },
                    {
                        "name": "handleCategorySelection",
                        "description": "Handles category selection in admin context to load discounted products.",
                        "parameters": [
                            {
                                "name": "categoryId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the selected category."
                            },
                            {
                                "name": "checkbox",
                                "type": "object",
                                "optional": false,
                                "description": "The checkbox element associated with the selection."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "common.js",
                "type": "js",
                "relative_location": "js/common.js",
                "functions": [
                    {
                        "name": "setupToastr",
                        "description": "Configures Toastr for consistent toast notifications across the application.",
                        "parameters": []
                    },
                    {
                        "name": "waitForMarked",
                        "description": "Waits for the marked library to load.",
                        "parameters": []
                    },
                    {
                        "name": "renderMdPage",
                        "description": "Fetches and renders Markdown content from local server.",
                        "parameters": [
                            {
                                "name": "mdPath",
                                "type": "string",
                                "optional": false,
                                "description": "The path to the Markdown file."
                            },
                            {
                                "name": "targetElementId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the DOM element to render the content into."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "community-page.js",
                "type": "js",
                "relative_location": "js/community-page.js",
                "functions": [
                    {
                        "name": "initializeCommunity",
                        "description": "Initializes the community page with permission checks.",
                        "parameters": []
                    },
                    {
                        "name": "updateMenu",
                        "description": "Updates the menu dynamically based on permissions.",
                        "parameters": []
                    },
                    {
                        "name": "updateIntegrationCode",
                        "description": "Updates integration code snippets for various platforms.",
                        "parameters": [
                            {
                                "name": "section",
                                "type": "string",
                                "optional": false,
                                "description": "The section (platform) to update the code for."
                            }
                        ]
                    },
                    {
                        "name": "loadVisits",
                        "description": "Loads referral visit data for the community user.",
                        "parameters": []
                    },
                    {
                        "name": "updateVisitsTable",
                        "description": "Updates the visits table with fetched data.",
                        "parameters": [
                            {
                                "name": "tableId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the table to update."
                            },
                            {
                                "name": "visits",
                                "type": "array",
                                "optional": false,
                                "description": "The array of visit data to display."
                            }
                        ]
                    },
                    {
                        "name": "loadOrders",
                        "description": "Loads referral order data for the community user.",
                        "parameters": []
                    },
                    {
                        "name": "updateOrdersTable",
                        "description": "Updates the orders table with fetched data.",
                        "parameters": [
                            {
                                "name": "tableId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the table to update."
                            },
                            {
                                "name": "orders",
                                "type": "array",
                                "optional": false,
                                "description": "The array of order data to display."
                            }
                        ]
                    },
                    {
                        "name": "setupCollapsibleSections",
                        "description": "Sets up collapsible sections for Orders and Visits.",
                        "parameters": []
                    },
                    {
                        "name": "waitForTinyMCE",
                        "description": "Waits for TinyMCE to load before initializing editors.",
                        "parameters": [
                            {
                                "name": "callback",
                                "type": "function",
                                "optional": false,
                                "description": "The callback to execute once TinyMCE is loaded."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "marked.min.js",
                "type": "js",
                "relative_location": "js/marked.min.js",
                "functions": []
            },
            {
                "name": "merchant-page.js",
                "type": "js",
                "relative_location": "js/merchant-page.js",
                "functions": [
                    {
                        "name": "initializeMerchant",
                        "description": "Initializes the merchant page with permission checks.",
                        "parameters": []
                    },
                    {
                        "name": "loadUserSettings",
                        "description": "Loads user settings from /settings/user.",
                        "parameters": []
                    },
                    {
                        "name": "checkAdminPermission",
                        "description": "Checks and toggles visibility of admin-specific elements.",
                        "parameters": []
                    },
                    {
                        "name": "loadProducts",
                        "description": "Loads and displays merchant products.",
                        "parameters": []
                    },
                    {
                        "name": "createProductRow",
                        "description": "Creates a table row for a product.",
                        "parameters": [
                            {
                                "name": "product",
                                "type": "object",
                                "optional": false,
                                "description": "The product object to create a row for."
                            }
                        ]
                    },
                    {
                        "name": "loadStoreRequest",
                        "description": "Loads store request data specific to merchant page.",
                        "parameters": []
                    },
                    {
                        "name": "loadApiKeys",
                        "description": "Loads and manages API keys functionality.",
                        "parameters": []
                    },
                    {
                        "name": "displayApiKeyFields",
                        "description": "Displays fields for the selected API key.",
                        "parameters": [
                            {
                                "name": "setting",
                                "type": "object",
                                "optional": false,
                                "description": "The setting object containing API key details."
                            },
                            {
                                "name": "fieldsContainer",
                                "type": "object",
                                "optional": false,
                                "description": "The DOM element to display fields in."
                            },
                            {
                                "name": "form",
                                "type": "object",
                                "optional": false,
                                "description": "The form element to attach submission handler to."
                            }
                        ]
                    },
                    {
                        "name": "loadDocumentationMenu",
                        "description": "Loads documentation submenu items from /settings/api_key.",
                        "parameters": []
                    }
                ]
            },
            {
                "name": "page-load.js",
                "type": "js",
                "relative_location": "js/page-load.js",
                "functions": [
                    {
                        "name": "showLoadingOverlay",
                        "description": "Shows the loading overlay.",
                        "parameters": []
                    },
                    {
                        "name": "hideLoadingOverlay",
                        "description": "Hides the loading overlay and shows the main content with a minimum visibility delay.",
                        "parameters": [
                            {
                                "name": "minDelay",
                                "type": "number",
                                "optional": true,
                                "description": "Minimum delay in milliseconds before hiding (default is 1000)."
                            }
                        ]
                    },
                    {
                        "name": "waitForCssLoad",
                        "description": "Waits for /static/css/icons.css to load.",
                        "parameters": []
                    },
                    {
                        "name": "attachEventListeners",
                        "description": "Attaches event listeners for logoff only (navigation handled by site-navigation.js).",
                        "parameters": []
                    },
                    {
                        "name": "initializePage",
                        "description": "Base initialization function ensuring permission checks before page setup.",
                        "parameters": [
                            {
                                "name": "requiredPermissions",
                                "type": "array",
                                "optional": false,
                                "description": "Array of permissions required for the page."
                            },
                            {
                                "name": "callback",
                                "type": "function",
                                "optional": false,
                                "description": "Callback to execute after permission check."
                            }
                        ]
                    },
                    {
                        "name": "dispatchInitialize",
                        "description": "Dispatches the appropriate initialization function based on page type.",
                        "parameters": [
                            {
                                "name": "pageType",
                                "type": "string",
                                "optional": false,
                                "description": "The type of page to initialize."
                            }
                        ]
                    },
                    {
                        "name": "initialize",
                        "description": "Common initialize function handling page-specific setup based on page type.",
                        "parameters": [
                            {
                                "name": "pageType",
                                "type": "string",
                                "optional": false,
                                "description": "The type of page to initialize."
                            }
                        ]
                    },
                    {
                        "name": "performPageSetup",
                        "description": "Helper function to perform page setup after permission checks.",
                        "parameters": [
                            {
                                "name": "pageType",
                                "type": "string",
                                "optional": false,
                                "description": "The type of page being set up."
                            },
                            {
                                "name": "config",
                                "type": "object",
                                "optional": false,
                                "description": "Configuration object for the page setup."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "partner-page.js",
                "type": "js",
                "relative_location": "js/partner-page.js",
                "functions": [
                    {
                        "name": "initializePartner",
                        "description": "Initializes the partner page with permission checks.",
                        "parameters": []
                    },
                    {
                        "name": "checkAdminPermission",
                        "description": "Checks and toggles visibility of admin-specific elements.",
                        "parameters": []
                    },
                    {
                        "name": "loadPartnerIntegrations",
                        "description": "Loads and displays partner-specific integrations or tests.",
                        "parameters": []
                    }
                ]
            },
            {
                "name": "site-auth.js",
                "type": "js",
                "relative_location": "js/site-auth.js",
                "functions": [
                    {
                        "name": "togglePassword",
                        "description": "Toggles the visibility of a password input field, updating associated icon.",
                        "parameters": [
                            {
                                "name": "fieldId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the password input field to toggle."
                            }
                        ]
                    },
                    {
                        "name": "logOff",
                        "description": "Logs the user out, clearing session data and redirecting to home.",
                        "parameters": []
                    },
                    {
                        "name": "decodeJWT",
                        "description": "Decodes a JWT token to extract user data, such as permissions.",
                        "parameters": [
                            {
                                "name": "token",
                                "type": "string",
                                "optional": false,
                                "description": "The JWT token to decode."
                            }
                        ]
                    },
                    {
                        "name": "authenticatedFetch",
                        "description": "Authenticated fetch function to handle API requests with auth token.",
                        "parameters": [
                            {
                                "name": "url",
                                "type": "string",
                                "optional": false,
                                "description": "The URL to fetch."
                            },
                            {
                                "name": "options",
                                "type": "object",
                                "optional": true,
                                "description": "Fetch options (default is {})."
                            }
                        ]
                    },
                    {
                        "name": "savePassword",
                        "description": "Saves an updated user password via an authenticated request.",
                        "parameters": [
                            {
                                "name": "newPassword",
                                "type": "string",
                                "optional": false,
                                "description": "The new password to save."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "site-navigation.js",
                "type": "js",
                "relative_location": "js/site-navigation.js",
                "functions": [
                    {
                        "name": "fetchProtectedPage",
                        "description": "Fetches protected page content for navigation.",
                        "parameters": [
                            {
                                "name": "url",
                                "type": "string",
                                "optional": false,
                                "description": "The URL of the protected page to fetch."
                            }
                        ]
                    },
                    {
                        "name": "loadSection",
                        "description": "Loads content for a specific section.",
                        "parameters": [
                            {
                                "name": "sectionId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the section to load content for."
                            }
                        ]
                    },
                    {
                        "name": "showSection",
                        "description": "Shows a section and hides others.",
                        "parameters": [
                            {
                                "name": "sectionId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the section to show."
                            },
                            {
                                "name": "onSectionLoad",
                                "type": "function",
                                "optional": true,
                                "description": "Callback to execute after showing the section (default is null)."
                            }
                        ]
                    },
                    {
                        "name": "toggleSubmenu",
                        "description": "Toggles a submenu.",
                        "parameters": [
                            {
                                "name": "submenuId",
                                "type": "string",
                                "optional": false,
                                "description": "The ID of the submenu to toggle."
                            },
                            {
                                "name": "action",
                                "type": "string",
                                "optional": true,
                                "description": "The action to perform ('toggle', 'open', 'close'; default is 'toggle')."
                            }
                        ]
                    },
                    {
                        "name": "closeAllSubmenus",
                        "description": "Closes all submenus within a container.",
                        "parameters": [
                            {
                                "name": "container",
                                "type": "object",
                                "optional": false,
                                "description": "The DOM container element containing submenus."
                            }
                        ]
                    },
                    {
                        "name": "handleSectionClick",
                        "description": "Handles section button clicks.",
                        "parameters": [
                            {
                                "name": "event",
                                "type": "object",
                                "optional": false,
                                "description": "The click event object."
                            }
                        ]
                    },
                    {
                        "name": "initializeNavigation",
                        "description": "Initializes navigation and logout functionality.",
                        "parameters": []
                    },
                    {
                        "name": "handleLogoutClick",
                        "description": "Handles logout button click.",
                        "parameters": [
                            {
                                "name": "e",
                                "type": "object",
                                "optional": false,
                                "description": "The click event object."
                            }
                        ]
                    }
                ]
            },
            {
                "name": "site-request.js",
                "type": "js",
                "relative_location": "js/site-request.js",
                "functions": [
                    {
                        "name": "addPage",
                        "description": "Adds a page to the site request form based on user type (merchant/community).",
                        "parameters": [
                            {
                                "name": "type",
                                "type": "string",
                                "optional": false,
                                "description": "The user type ('merchant' or 'community')."
                            }
                        ]
                    },
                    {
                        "name": "removePage",
                        "description": "Removes a page from the site request form based on user type (merchant/community).",
                        "parameters": [
                            {
                                "name": "pageNum",
                                "type": "number",
                                "optional": false,
                                "description": "The page number to remove."
                            },
                            {
                                "name": "type",
                                "type": "string",
                                "optional": false,
                                "description": "The user type ('merchant' or 'community')."
                            }
                        ]
                    },
                    {
                        "name": "addEmail",
                        "description": "Adds an email to the site request form.",
                        "parameters": [
                            {
                                "name": "type",
                                "type": "string",
                                "optional": false,
                                "description": "The user type ('merchant' or 'community')."
                            }
                        ]
                    },
                    {
                        "name": "removeEmail",
                        "description": "Removes an email from the site request form.",
                        "parameters": [
                            {
                                "name": "emailNum",
                                "type": "number",
                                "optional": false,
                                "description": "The email number to remove."
                            },
                            {
                                "name": "type",
                                "type": "string",
                                "optional": false,
                                "description": "The user type ('merchant' or 'community')."
                            }
                        ]
                    },
                    {
                        "name": "updateDomainPreview",
                        "description": "Updates the domain preview and email domain spans for the site request.",
                        "parameters": [
                            {
                                "name": "type",
                                "type": "string",
                                "optional": false,
                                "description": "The user type ('merchant' or 'community')."
                            }
                        ]
                    },
                    {
                        "name": "checkDomainAvailability",
                        "description": "Checks domain availability for the site request.",
                        "parameters": []
                    },
                    {
                        "name": "loadTinyMCE",
                        "description": "Loads TinyMCE editor for site request content editing.",
                        "parameters": []
                    },
                    {
                        "name": "initializeTinyMCE",
                        "description": "Initializes TinyMCE editor for site request content editing with a specific selector.",
                        "parameters": [
                            {
                                "name": "selector",
                                "type": "string",
                                "optional": true,
                                "description": "CSS selector for elements to initialize TinyMCE on (default is 'textarea[name$=\"Content\"], #about')."
                            }
                        ]
                    },
                    {
                        "name": "getCurrentTimestamp",
                        "description": "Generates a formatted timestamp for site request forms.",
                        "parameters": []
                    },
                    {
                        "name": "saveSiteRequest",
                        "description": "Saves the site request form data for either a merchant store or community site.",
                        "parameters": []
                    }
                ]
            },
            {
                "name": "user-management.js",
                "type": "js",
                "relative_location": "js/user-management.js",
                "functions": [
                    {
                        "name": "loadSettings",
                        "description": "Loads user settings into the DOM.",
                        "parameters": []
                    },
                    {
                        "name": "saveSettings",
                        "description": "Saves user settings from the DOM.",
                        "parameters": [
                            {
                                "name": "settings",
                                "type": "object",
                                "optional": false,
                                "description": "The settings object to save."
                            }
                        ]
                    },
                    {
                        "name": "loadWixClientId",
                        "description": "Loads Wix client ID into the DOM.",
                        "parameters": []
                    },
                    {
                        "name": "saveWixClientId",
                        "description": "Saves Wix client ID from the DOM.",
                        "parameters": [
                            {
                                "name": "clientId",
                                "type": "string",
                                "optional": false,
                                "description": "The Wix client ID to save."
                            }
                        ]
                    },
                    {
                        "name": "validatePassword",
                        "description": "Validates password complexity.",
                        "parameters": [
                            {
                                "name": "password",
                                "type": "string",
                                "optional": false,
                                "description": "The password to validate."
                            }
                        ]
                    },
                    {
                        "name": "setupChangePassword",
                        "description": "Sets up the 'Change Password' form submission logic.",
                        "parameters": []
                    }
                ]
            }
        ],
        "dependencies": [
            "flask",
            "jwt",
            "bcrypt",
            "requests",
            "json",
            "os",
            "logging",
            "string",
            "random",
            "datetime",
            "re",
            "markdown",
            "whois"
        ],
        "technologies": [
            "Python",
            "Flask",
            "Jinja2",
            "JWT",
            "Amazon API",
            "Wix API",
            "bcrypt",
            "TextMagic API",
            "Markdown",
            "WHOIS"
        ]
    }
}